
aether_pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005998  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004018  08005c30  08005c30  00006c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000054  08009c48  08009c48  0000ac48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000248  08009c9c  08009c9c  0000ac9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08009ee4  08009ee4  0000aee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .fini_array   00000004  08009ee8  08009ee8  0000aee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .data         00000060  24000000  08009eec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000134c  24000060  08009f4c  0000b060  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  240013ac  08009f4c  0000b3ac  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003ff6e  00000000  00000000  0000b08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000402b  00000000  00000000  0004affc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000062a6  00000000  00000000  0004f027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  000552d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da9  00000000  00000000  00055f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013c96  00000000  00000000  00056d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000067dc  00000000  00000000  0006a99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0007117b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000025bc  00000000  00000000  000711c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005f  00000000  00000000  0007377c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000060 	.word	0x24000060
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005c18 	.word	0x08005c18

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000064 	.word	0x24000064
 80002d4:	08005c18 	.word	0x08005c18

080002d8 <selfrel_offset31>:
 80002d8:	6803      	ldr	r3, [r0, #0]
 80002da:	005a      	lsls	r2, r3, #1
 80002dc:	bf4c      	ite	mi
 80002de:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80002e2:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 80002e6:	4418      	add	r0, r3
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop

080002ec <search_EIT_table>:
 80002ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f0:	b359      	cbz	r1, 800034a <search_EIT_table+0x5e>
 80002f2:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 80002f6:	4605      	mov	r5, r0
 80002f8:	4616      	mov	r6, r2
 80002fa:	4647      	mov	r7, r8
 80002fc:	f04f 0a00 	mov.w	sl, #0
 8000300:	eb0a 0107 	add.w	r1, sl, r7
 8000304:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000308:	1049      	asrs	r1, r1, #1
 800030a:	eb05 09c1 	add.w	r9, r5, r1, lsl #3
 800030e:	4648      	mov	r0, r9
 8000310:	f7ff ffe2 	bl	80002d8 <selfrel_offset31>
 8000314:	4588      	cmp	r8, r1
 8000316:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 800031a:	4603      	mov	r3, r0
 800031c:	d010      	beq.n	8000340 <search_EIT_table+0x54>
 800031e:	f104 0008 	add.w	r0, r4, #8
 8000322:	42b3      	cmp	r3, r6
 8000324:	4428      	add	r0, r5
 8000326:	d807      	bhi.n	8000338 <search_EIT_table+0x4c>
 8000328:	f7ff ffd6 	bl	80002d8 <selfrel_offset31>
 800032c:	3801      	subs	r0, #1
 800032e:	42b0      	cmp	r0, r6
 8000330:	d208      	bcs.n	8000344 <search_EIT_table+0x58>
 8000332:	f101 0a01 	add.w	sl, r1, #1
 8000336:	e7e3      	b.n	8000300 <search_EIT_table+0x14>
 8000338:	458a      	cmp	sl, r1
 800033a:	d006      	beq.n	800034a <search_EIT_table+0x5e>
 800033c:	1e4f      	subs	r7, r1, #1
 800033e:	e7df      	b.n	8000300 <search_EIT_table+0x14>
 8000340:	42b0      	cmp	r0, r6
 8000342:	d8f9      	bhi.n	8000338 <search_EIT_table+0x4c>
 8000344:	4648      	mov	r0, r9
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	f04f 0900 	mov.w	r9, #0
 800034e:	4648      	mov	r0, r9
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000354 <__gnu_unwind_get_pr_addr>:
 8000354:	2801      	cmp	r0, #1
 8000356:	d009      	beq.n	800036c <__gnu_unwind_get_pr_addr+0x18>
 8000358:	2802      	cmp	r0, #2
 800035a:	d005      	beq.n	8000368 <__gnu_unwind_get_pr_addr+0x14>
 800035c:	4b04      	ldr	r3, [pc, #16]	@ (8000370 <__gnu_unwind_get_pr_addr+0x1c>)
 800035e:	2800      	cmp	r0, #0
 8000360:	bf0c      	ite	eq
 8000362:	4618      	moveq	r0, r3
 8000364:	2000      	movne	r0, #0
 8000366:	4770      	bx	lr
 8000368:	4802      	ldr	r0, [pc, #8]	@ (8000374 <__gnu_unwind_get_pr_addr+0x20>)
 800036a:	4770      	bx	lr
 800036c:	4802      	ldr	r0, [pc, #8]	@ (8000378 <__gnu_unwind_get_pr_addr+0x24>)
 800036e:	4770      	bx	lr
 8000370:	08000a39 	.word	0x08000a39
 8000374:	08000a41 	.word	0x08000a41
 8000378:	08000a3d 	.word	0x08000a3d

0800037c <get_eit_entry>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	4b22      	ldr	r3, [pc, #136]	@ (8000408 <get_eit_entry+0x8c>)
 8000380:	b083      	sub	sp, #12
 8000382:	4604      	mov	r4, r0
 8000384:	1e8d      	subs	r5, r1, #2
 8000386:	b343      	cbz	r3, 80003da <get_eit_entry+0x5e>
 8000388:	a901      	add	r1, sp, #4
 800038a:	4628      	mov	r0, r5
 800038c:	f3af 8000 	nop.w
 8000390:	b1f0      	cbz	r0, 80003d0 <get_eit_entry+0x54>
 8000392:	9901      	ldr	r1, [sp, #4]
 8000394:	462a      	mov	r2, r5
 8000396:	f7ff ffa9 	bl	80002ec <search_EIT_table>
 800039a:	4601      	mov	r1, r0
 800039c:	b1c0      	cbz	r0, 80003d0 <get_eit_entry+0x54>
 800039e:	f7ff ff9b 	bl	80002d8 <selfrel_offset31>
 80003a2:	684b      	ldr	r3, [r1, #4]
 80003a4:	64a0      	str	r0, [r4, #72]	@ 0x48
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d02b      	beq.n	8000402 <get_eit_entry+0x86>
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f101 0004 	add.w	r0, r1, #4
 80003b0:	db25      	blt.n	80003fe <get_eit_entry+0x82>
 80003b2:	f7ff ff91 	bl	80002d8 <selfrel_offset31>
 80003b6:	2300      	movs	r3, #0
 80003b8:	6523      	str	r3, [r4, #80]	@ 0x50
 80003ba:	6803      	ldr	r3, [r0, #0]
 80003bc:	64e0      	str	r0, [r4, #76]	@ 0x4c
 80003be:	2b00      	cmp	r3, #0
 80003c0:	db12      	blt.n	80003e8 <get_eit_entry+0x6c>
 80003c2:	f7ff ff89 	bl	80002d8 <selfrel_offset31>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2000      	movs	r0, #0
 80003ca:	6123      	str	r3, [r4, #16]
 80003cc:	b003      	add	sp, #12
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	2300      	movs	r3, #0
 80003d2:	2009      	movs	r0, #9
 80003d4:	6123      	str	r3, [r4, #16]
 80003d6:	b003      	add	sp, #12
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <get_eit_entry+0x90>)
 80003dc:	490c      	ldr	r1, [pc, #48]	@ (8000410 <get_eit_entry+0x94>)
 80003de:	1ac9      	subs	r1, r1, r3
 80003e0:	10c9      	asrs	r1, r1, #3
 80003e2:	4618      	mov	r0, r3
 80003e4:	9101      	str	r1, [sp, #4]
 80003e6:	e7d5      	b.n	8000394 <get_eit_entry+0x18>
 80003e8:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80003ec:	f7ff ffb2 	bl	8000354 <__gnu_unwind_get_pr_addr>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	bf0c      	ite	eq
 80003f4:	2009      	moveq	r0, #9
 80003f6:	2000      	movne	r0, #0
 80003f8:	6123      	str	r3, [r4, #16]
 80003fa:	b003      	add	sp, #12
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	2301      	movs	r3, #1
 8000400:	e7da      	b.n	80003b8 <get_eit_entry+0x3c>
 8000402:	2300      	movs	r3, #0
 8000404:	2005      	movs	r0, #5
 8000406:	e7e0      	b.n	80003ca <get_eit_entry+0x4e>
 8000408:	00000000 	.word	0x00000000
 800040c:	08009c9c 	.word	0x08009c9c
 8000410:	08009ee4 	.word	0x08009ee4

08000414 <restore_non_core_regs>:
 8000414:	6803      	ldr	r3, [r0, #0]
 8000416:	07da      	lsls	r2, r3, #31
 8000418:	b510      	push	{r4, lr}
 800041a:	4604      	mov	r4, r0
 800041c:	d406      	bmi.n	800042c <restore_non_core_regs+0x18>
 800041e:	079b      	lsls	r3, r3, #30
 8000420:	f100 0050 	add.w	r0, r0, #80	@ 0x50
 8000424:	d509      	bpl.n	800043a <restore_non_core_regs+0x26>
 8000426:	f000 fc8f 	bl	8000d48 <__gnu_Unwind_Restore_VFP_D>
 800042a:	6823      	ldr	r3, [r4, #0]
 800042c:	0759      	lsls	r1, r3, #29
 800042e:	d509      	bpl.n	8000444 <restore_non_core_regs+0x30>
 8000430:	071a      	lsls	r2, r3, #28
 8000432:	d50e      	bpl.n	8000452 <restore_non_core_regs+0x3e>
 8000434:	06db      	lsls	r3, r3, #27
 8000436:	d513      	bpl.n	8000460 <restore_non_core_regs+0x4c>
 8000438:	bd10      	pop	{r4, pc}
 800043a:	f000 fc7d 	bl	8000d38 <__gnu_Unwind_Restore_VFP>
 800043e:	6823      	ldr	r3, [r4, #0]
 8000440:	0759      	lsls	r1, r3, #29
 8000442:	d4f5      	bmi.n	8000430 <restore_non_core_regs+0x1c>
 8000444:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 8000448:	f000 fc86 	bl	8000d58 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800044c:	6823      	ldr	r3, [r4, #0]
 800044e:	071a      	lsls	r2, r3, #28
 8000450:	d4f0      	bmi.n	8000434 <restore_non_core_regs+0x20>
 8000452:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 8000456:	f000 fc87 	bl	8000d68 <__gnu_Unwind_Restore_WMMXD>
 800045a:	6823      	ldr	r3, [r4, #0]
 800045c:	06db      	lsls	r3, r3, #27
 800045e:	d4eb      	bmi.n	8000438 <restore_non_core_regs+0x24>
 8000460:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
 8000464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000468:	f000 bcc2 	b.w	8000df0 <__gnu_Unwind_Restore_WMMXC>

0800046c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 800046c:	4603      	mov	r3, r0
 800046e:	6800      	ldr	r0, [r0, #0]
 8000470:	b100      	cbz	r0, 8000474 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000472:	4418      	add	r0, r3
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <__gnu_unwind_24bit.isra.0>:
 8000478:	2009      	movs	r0, #9
 800047a:	4770      	bx	lr

0800047c <_Unwind_DebugHook>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <unwind_phase2>:
 8000480:	b570      	push	{r4, r5, r6, lr}
 8000482:	4604      	mov	r4, r0
 8000484:	460e      	mov	r6, r1
 8000486:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000488:	4620      	mov	r0, r4
 800048a:	f7ff ff77 	bl	800037c <get_eit_entry>
 800048e:	4605      	mov	r5, r0
 8000490:	b988      	cbnz	r0, 80004b6 <unwind_phase2+0x36>
 8000492:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8000494:	6162      	str	r2, [r4, #20]
 8000496:	6923      	ldr	r3, [r4, #16]
 8000498:	4632      	mov	r2, r6
 800049a:	4621      	mov	r1, r4
 800049c:	2001      	movs	r0, #1
 800049e:	4798      	blx	r3
 80004a0:	2808      	cmp	r0, #8
 80004a2:	d0f0      	beq.n	8000486 <unwind_phase2+0x6>
 80004a4:	2807      	cmp	r0, #7
 80004a6:	d106      	bne.n	80004b6 <unwind_phase2+0x36>
 80004a8:	4628      	mov	r0, r5
 80004aa:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80004ac:	f7ff ffe6 	bl	800047c <_Unwind_DebugHook>
 80004b0:	1d30      	adds	r0, r6, #4
 80004b2:	f000 fc35 	bl	8000d20 <__restore_core_regs>
 80004b6:	f005 fb55 	bl	8005b64 <abort>
 80004ba:	bf00      	nop

080004bc <unwind_phase2_forced>:
 80004bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004c0:	f101 0c04 	add.w	ip, r1, #4
 80004c4:	68c7      	ldr	r7, [r0, #12]
 80004c6:	f8d0 8018 	ldr.w	r8, [r0, #24]
 80004ca:	4606      	mov	r6, r0
 80004cc:	4691      	mov	r9, r2
 80004ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80004d2:	f5ad 7d76 	sub.w	sp, sp, #984	@ 0x3d8
 80004d6:	ac03      	add	r4, sp, #12
 80004d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80004de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80004e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80004ea:	ad02      	add	r5, sp, #8
 80004ec:	f04f 0e00 	mov.w	lr, #0
 80004f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80004f4:	f8c5 e000 	str.w	lr, [r5]
 80004f8:	e021      	b.n	800053e <unwind_phase2_forced+0x82>
 80004fa:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80004fc:	6173      	str	r3, [r6, #20]
 80004fe:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8000502:	4629      	mov	r1, r5
 8000504:	a87c      	add	r0, sp, #496	@ 0x1f0
 8000506:	f005 fb79 	bl	8005bfc <memcpy>
 800050a:	6933      	ldr	r3, [r6, #16]
 800050c:	aa7c      	add	r2, sp, #496	@ 0x1f0
 800050e:	4631      	mov	r1, r6
 8000510:	4650      	mov	r0, sl
 8000512:	4798      	blx	r3
 8000514:	9b8a      	ldr	r3, [sp, #552]	@ 0x228
 8000516:	64ab      	str	r3, [r5, #72]	@ 0x48
 8000518:	4649      	mov	r1, r9
 800051a:	e9cd 5800 	strd	r5, r8, [sp]
 800051e:	4682      	mov	sl, r0
 8000520:	4633      	mov	r3, r6
 8000522:	2001      	movs	r0, #1
 8000524:	4632      	mov	r2, r6
 8000526:	47b8      	blx	r7
 8000528:	4681      	mov	r9, r0
 800052a:	bb30      	cbnz	r0, 800057a <unwind_phase2_forced+0xbe>
 800052c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8000530:	a97c      	add	r1, sp, #496	@ 0x1f0
 8000532:	4628      	mov	r0, r5
 8000534:	f005 fb62 	bl	8005bfc <memcpy>
 8000538:	f1ba 0f08 	cmp.w	sl, #8
 800053c:	d11a      	bne.n	8000574 <unwind_phase2_forced+0xb8>
 800053e:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8000540:	4630      	mov	r0, r6
 8000542:	f7ff ff1b 	bl	800037c <get_eit_entry>
 8000546:	f109 0909 	add.w	r9, r9, #9
 800054a:	4604      	mov	r4, r0
 800054c:	fa5f fa89 	uxtb.w	sl, r9
 8000550:	2800      	cmp	r0, #0
 8000552:	d0d2      	beq.n	80004fa <unwind_phase2_forced+0x3e>
 8000554:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8000556:	64ab      	str	r3, [r5, #72]	@ 0x48
 8000558:	4632      	mov	r2, r6
 800055a:	e9cd 5800 	strd	r5, r8, [sp]
 800055e:	4633      	mov	r3, r6
 8000560:	f04a 0110 	orr.w	r1, sl, #16
 8000564:	2001      	movs	r0, #1
 8000566:	47b8      	blx	r7
 8000568:	b938      	cbnz	r0, 800057a <unwind_phase2_forced+0xbe>
 800056a:	4620      	mov	r0, r4
 800056c:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
 8000570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000574:	f1ba 0f07 	cmp.w	sl, #7
 8000578:	d005      	beq.n	8000586 <unwind_phase2_forced+0xca>
 800057a:	2409      	movs	r4, #9
 800057c:	4620      	mov	r0, r4
 800057e:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
 8000582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000586:	4648      	mov	r0, r9
 8000588:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800058a:	f7ff ff77 	bl	800047c <_Unwind_DebugHook>
 800058e:	a803      	add	r0, sp, #12
 8000590:	f000 fbc6 	bl	8000d20 <__restore_core_regs>

08000594 <_Unwind_GetCFA>:
 8000594:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8000596:	4770      	bx	lr

08000598 <__gnu_Unwind_RaiseException>:
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800059c:	b0fb      	sub	sp, #492	@ 0x1ec
 800059e:	f101 0c04 	add.w	ip, r1, #4
 80005a2:	640b      	str	r3, [r1, #64]	@ 0x40
 80005a4:	460e      	mov	r6, r1
 80005a6:	4605      	mov	r5, r0
 80005a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80005ac:	ac01      	add	r4, sp, #4
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80005ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005bc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80005c0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80005c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80005c8:	9700      	str	r7, [sp, #0]
 80005ca:	e006      	b.n	80005da <__gnu_Unwind_RaiseException+0x42>
 80005cc:	692b      	ldr	r3, [r5, #16]
 80005ce:	466a      	mov	r2, sp
 80005d0:	4629      	mov	r1, r5
 80005d2:	4798      	blx	r3
 80005d4:	2808      	cmp	r0, #8
 80005d6:	4604      	mov	r4, r0
 80005d8:	d108      	bne.n	80005ec <__gnu_Unwind_RaiseException+0x54>
 80005da:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80005dc:	4628      	mov	r0, r5
 80005de:	f7ff fecd 	bl	800037c <get_eit_entry>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	d0f2      	beq.n	80005cc <__gnu_Unwind_RaiseException+0x34>
 80005e6:	2009      	movs	r0, #9
 80005e8:	b07b      	add	sp, #492	@ 0x1ec
 80005ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ec:	4668      	mov	r0, sp
 80005ee:	f7ff ff11 	bl	8000414 <restore_non_core_regs>
 80005f2:	2c06      	cmp	r4, #6
 80005f4:	d1f7      	bne.n	80005e6 <__gnu_Unwind_RaiseException+0x4e>
 80005f6:	4631      	mov	r1, r6
 80005f8:	4628      	mov	r0, r5
 80005fa:	f7ff ff41 	bl	8000480 <unwind_phase2>
 80005fe:	bf00      	nop

08000600 <__gnu_Unwind_ForcedUnwind>:
 8000600:	60c1      	str	r1, [r0, #12]
 8000602:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000604:	6182      	str	r2, [r0, #24]
 8000606:	6419      	str	r1, [r3, #64]	@ 0x40
 8000608:	2200      	movs	r2, #0
 800060a:	4619      	mov	r1, r3
 800060c:	e756      	b.n	80004bc <unwind_phase2_forced>
 800060e:	bf00      	nop

08000610 <__gnu_Unwind_Resume>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	68c6      	ldr	r6, [r0, #12]
 8000614:	6943      	ldr	r3, [r0, #20]
 8000616:	640b      	str	r3, [r1, #64]	@ 0x40
 8000618:	b9ae      	cbnz	r6, 8000646 <__gnu_Unwind_Resume+0x36>
 800061a:	6903      	ldr	r3, [r0, #16]
 800061c:	460a      	mov	r2, r1
 800061e:	4604      	mov	r4, r0
 8000620:	460d      	mov	r5, r1
 8000622:	4601      	mov	r1, r0
 8000624:	2002      	movs	r0, #2
 8000626:	4798      	blx	r3
 8000628:	2807      	cmp	r0, #7
 800062a:	d005      	beq.n	8000638 <__gnu_Unwind_Resume+0x28>
 800062c:	2808      	cmp	r0, #8
 800062e:	d10f      	bne.n	8000650 <__gnu_Unwind_Resume+0x40>
 8000630:	4629      	mov	r1, r5
 8000632:	4620      	mov	r0, r4
 8000634:	f7ff ff24 	bl	8000480 <unwind_phase2>
 8000638:	4630      	mov	r0, r6
 800063a:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800063c:	f7ff ff1e 	bl	800047c <_Unwind_DebugHook>
 8000640:	1d28      	adds	r0, r5, #4
 8000642:	f000 fb6d 	bl	8000d20 <__restore_core_regs>
 8000646:	2201      	movs	r2, #1
 8000648:	f7ff ff38 	bl	80004bc <unwind_phase2_forced>
 800064c:	f005 fa8a 	bl	8005b64 <abort>
 8000650:	f005 fa88 	bl	8005b64 <abort>

08000654 <__gnu_Unwind_Resume_or_Rethrow>:
 8000654:	68c2      	ldr	r2, [r0, #12]
 8000656:	b11a      	cbz	r2, 8000660 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000658:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800065a:	640a      	str	r2, [r1, #64]	@ 0x40
 800065c:	2200      	movs	r2, #0
 800065e:	e72d      	b.n	80004bc <unwind_phase2_forced>
 8000660:	e79a      	b.n	8000598 <__gnu_Unwind_RaiseException>
 8000662:	bf00      	nop

08000664 <_Unwind_Complete>:
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <_Unwind_DeleteException>:
 8000668:	6883      	ldr	r3, [r0, #8]
 800066a:	4601      	mov	r1, r0
 800066c:	b10b      	cbz	r3, 8000672 <_Unwind_DeleteException+0xa>
 800066e:	2001      	movs	r0, #1
 8000670:	4718      	bx	r3
 8000672:	4770      	bx	lr

08000674 <_Unwind_VRS_Get>:
 8000674:	2905      	cmp	r1, #5
 8000676:	d815      	bhi.n	80006a4 <_Unwind_VRS_Get+0x30>
 8000678:	e8df f001 	tbb	[pc, r1]
 800067c:	0314030a 	.word	0x0314030a
 8000680:	0503      	.short	0x0503
 8000682:	2001      	movs	r0, #1
 8000684:	4770      	bx	lr
 8000686:	9a00      	ldr	r2, [sp, #0]
 8000688:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	2000      	movs	r0, #0
 800068e:	4770      	bx	lr
 8000690:	b943      	cbnz	r3, 80006a4 <_Unwind_VRS_Get+0x30>
 8000692:	2a0f      	cmp	r2, #15
 8000694:	d806      	bhi.n	80006a4 <_Unwind_VRS_Get+0x30>
 8000696:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800069a:	2000      	movs	r0, #0
 800069c:	6853      	ldr	r3, [r2, #4]
 800069e:	9a00      	ldr	r2, [sp, #0]
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	4770      	bx	lr
 80006a4:	2002      	movs	r0, #2
 80006a6:	4770      	bx	lr

080006a8 <_Unwind_GetGR>:
 80006a8:	b500      	push	{lr}
 80006aa:	b085      	sub	sp, #20
 80006ac:	460a      	mov	r2, r1
 80006ae:	2300      	movs	r3, #0
 80006b0:	a903      	add	r1, sp, #12
 80006b2:	9100      	str	r1, [sp, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	f7ff ffdd 	bl	8000674 <_Unwind_VRS_Get>
 80006ba:	9803      	ldr	r0, [sp, #12]
 80006bc:	b005      	add	sp, #20
 80006be:	f85d fb04 	ldr.w	pc, [sp], #4
 80006c2:	bf00      	nop

080006c4 <_Unwind_VRS_Set>:
 80006c4:	2905      	cmp	r1, #5
 80006c6:	d815      	bhi.n	80006f4 <_Unwind_VRS_Set+0x30>
 80006c8:	e8df f001 	tbb	[pc, r1]
 80006cc:	0314030a 	.word	0x0314030a
 80006d0:	0503      	.short	0x0503
 80006d2:	2001      	movs	r0, #1
 80006d4:	4770      	bx	lr
 80006d6:	9b00      	ldr	r3, [sp, #0]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6443      	str	r3, [r0, #68]	@ 0x44
 80006dc:	2000      	movs	r0, #0
 80006de:	4770      	bx	lr
 80006e0:	b943      	cbnz	r3, 80006f4 <_Unwind_VRS_Set+0x30>
 80006e2:	2a0f      	cmp	r2, #15
 80006e4:	d806      	bhi.n	80006f4 <_Unwind_VRS_Set+0x30>
 80006e6:	9b00      	ldr	r3, [sp, #0]
 80006e8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	6053      	str	r3, [r2, #4]
 80006f0:	2000      	movs	r0, #0
 80006f2:	4770      	bx	lr
 80006f4:	2002      	movs	r0, #2
 80006f6:	4770      	bx	lr

080006f8 <_Unwind_SetGR>:
 80006f8:	b510      	push	{r4, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	2300      	movs	r3, #0
 80006fe:	ac03      	add	r4, sp, #12
 8000700:	9203      	str	r2, [sp, #12]
 8000702:	9400      	str	r4, [sp, #0]
 8000704:	460a      	mov	r2, r1
 8000706:	4619      	mov	r1, r3
 8000708:	f7ff ffdc 	bl	80006c4 <_Unwind_VRS_Set>
 800070c:	b004      	add	sp, #16
 800070e:	bd10      	pop	{r4, pc}

08000710 <__gnu_Unwind_Backtrace>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8000714:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 8000718:	f102 0c04 	add.w	ip, r2, #4
 800071c:	6413      	str	r3, [r2, #64]	@ 0x40
 800071e:	4605      	mov	r5, r0
 8000720:	460c      	mov	r4, r1
 8000722:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000726:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 800072a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800072e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000732:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000736:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800073a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800073e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000742:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8000746:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800074a:	9616      	str	r6, [sp, #88]	@ 0x58
 800074c:	e010      	b.n	8000770 <__gnu_Unwind_Backtrace+0x60>
 800074e:	f7ff ffd3 	bl	80006f8 <_Unwind_SetGR>
 8000752:	4621      	mov	r1, r4
 8000754:	a816      	add	r0, sp, #88	@ 0x58
 8000756:	47a8      	blx	r5
 8000758:	4603      	mov	r3, r0
 800075a:	aa16      	add	r2, sp, #88	@ 0x58
 800075c:	2008      	movs	r0, #8
 800075e:	4669      	mov	r1, sp
 8000760:	b983      	cbnz	r3, 8000784 <__gnu_Unwind_Backtrace+0x74>
 8000762:	9b04      	ldr	r3, [sp, #16]
 8000764:	4798      	blx	r3
 8000766:	2805      	cmp	r0, #5
 8000768:	4606      	mov	r6, r0
 800076a:	d00c      	beq.n	8000786 <__gnu_Unwind_Backtrace+0x76>
 800076c:	2809      	cmp	r0, #9
 800076e:	d009      	beq.n	8000784 <__gnu_Unwind_Backtrace+0x74>
 8000770:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8000772:	4668      	mov	r0, sp
 8000774:	f7ff fe02 	bl	800037c <get_eit_entry>
 8000778:	4603      	mov	r3, r0
 800077a:	210c      	movs	r1, #12
 800077c:	466a      	mov	r2, sp
 800077e:	a816      	add	r0, sp, #88	@ 0x58
 8000780:	2b00      	cmp	r3, #0
 8000782:	d0e4      	beq.n	800074e <__gnu_Unwind_Backtrace+0x3e>
 8000784:	2609      	movs	r6, #9
 8000786:	a816      	add	r0, sp, #88	@ 0x58
 8000788:	f7ff fe44 	bl	8000414 <restore_non_core_regs>
 800078c:	4630      	mov	r0, r6
 800078e:	f50d 7d10 	add.w	sp, sp, #576	@ 0x240
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__gnu_unwind_pr_common>:
 8000794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000798:	4616      	mov	r6, r2
 800079a:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800079c:	b089      	sub	sp, #36	@ 0x24
 800079e:	460d      	mov	r5, r1
 80007a0:	f852 1b04 	ldr.w	r1, [r2], #4
 80007a4:	9206      	str	r2, [sp, #24]
 80007a6:	f000 0c03 	and.w	ip, r0, #3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d079      	beq.n	80008a2 <__gnu_unwind_pr_common+0x10e>
 80007ae:	0c0c      	lsrs	r4, r1, #16
 80007b0:	f88d 401d 	strb.w	r4, [sp, #29]
 80007b4:	0409      	lsls	r1, r1, #16
 80007b6:	b2e4      	uxtb	r4, r4
 80007b8:	9105      	str	r1, [sp, #20]
 80007ba:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80007be:	2102      	movs	r1, #2
 80007c0:	f88d 101c 	strb.w	r1, [sp, #28]
 80007c4:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 80007c6:	f1bc 0f02 	cmp.w	ip, #2
 80007ca:	bf08      	it	eq
 80007cc:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 80007ce:	f011 0801 	ands.w	r8, r1, #1
 80007d2:	d009      	beq.n	80007e8 <__gnu_unwind_pr_common+0x54>
 80007d4:	a905      	add	r1, sp, #20
 80007d6:	4630      	mov	r0, r6
 80007d8:	f000 fba4 	bl	8000f24 <__gnu_unwind_execute>
 80007dc:	2800      	cmp	r0, #0
 80007de:	d156      	bne.n	800088e <__gnu_unwind_pr_common+0xfa>
 80007e0:	2008      	movs	r0, #8
 80007e2:	b009      	add	sp, #36	@ 0x24
 80007e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007e8:	6817      	ldr	r7, [r2, #0]
 80007ea:	2f00      	cmp	r7, #0
 80007ec:	d0f2      	beq.n	80007d4 <__gnu_unwind_pr_common+0x40>
 80007ee:	f000 0108 	and.w	r1, r0, #8
 80007f2:	e9cd 1801 	strd	r1, r8, [sp, #4]
 80007f6:	46e3      	mov	fp, ip
 80007f8:	469a      	mov	sl, r3
 80007fa:	f1ba 0f02 	cmp.w	sl, #2
 80007fe:	d04c      	beq.n	800089a <__gnu_unwind_pr_common+0x106>
 8000800:	8817      	ldrh	r7, [r2, #0]
 8000802:	8854      	ldrh	r4, [r2, #2]
 8000804:	f102 0904 	add.w	r9, r2, #4
 8000808:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 800080a:	f024 0301 	bic.w	r3, r4, #1
 800080e:	210f      	movs	r1, #15
 8000810:	4630      	mov	r0, r6
 8000812:	eb03 0802 	add.w	r8, r3, r2
 8000816:	f7ff ff47 	bl	80006a8 <_Unwind_GetGR>
 800081a:	4580      	cmp	r8, r0
 800081c:	d83b      	bhi.n	8000896 <__gnu_unwind_pr_common+0x102>
 800081e:	f027 0201 	bic.w	r2, r7, #1
 8000822:	eb02 0308 	add.w	r3, r2, r8
 8000826:	4283      	cmp	r3, r0
 8000828:	bf94      	ite	ls
 800082a:	2300      	movls	r3, #0
 800082c:	2301      	movhi	r3, #1
 800082e:	0064      	lsls	r4, r4, #1
 8000830:	f004 0402 	and.w	r4, r4, #2
 8000834:	f007 0701 	and.w	r7, r7, #1
 8000838:	4327      	orrs	r7, r4
 800083a:	2f01      	cmp	r7, #1
 800083c:	d04e      	beq.n	80008dc <__gnu_unwind_pr_common+0x148>
 800083e:	2f02      	cmp	r7, #2
 8000840:	d035      	beq.n	80008ae <__gnu_unwind_pr_common+0x11a>
 8000842:	bb27      	cbnz	r7, 800088e <__gnu_unwind_pr_common+0xfa>
 8000844:	f1bb 0f00 	cmp.w	fp, #0
 8000848:	d002      	beq.n	8000850 <__gnu_unwind_pr_common+0xbc>
 800084a:	2b00      	cmp	r3, #0
 800084c:	f040 80d3 	bne.w	80009f6 <__gnu_unwind_pr_common+0x262>
 8000850:	f109 0204 	add.w	r2, r9, #4
 8000854:	6817      	ldr	r7, [r2, #0]
 8000856:	2f00      	cmp	r7, #0
 8000858:	d1cf      	bne.n	80007fa <__gnu_unwind_pr_common+0x66>
 800085a:	a905      	add	r1, sp, #20
 800085c:	4630      	mov	r0, r6
 800085e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8000862:	f000 fb5f 	bl	8000f24 <__gnu_unwind_execute>
 8000866:	b990      	cbnz	r0, 800088e <__gnu_unwind_pr_common+0xfa>
 8000868:	f1b8 0f00 	cmp.w	r8, #0
 800086c:	d0b8      	beq.n	80007e0 <__gnu_unwind_pr_common+0x4c>
 800086e:	210f      	movs	r1, #15
 8000870:	4630      	mov	r0, r6
 8000872:	f7ff ff19 	bl	80006a8 <_Unwind_GetGR>
 8000876:	210e      	movs	r1, #14
 8000878:	4602      	mov	r2, r0
 800087a:	4630      	mov	r0, r6
 800087c:	f7ff ff3c 	bl	80006f8 <_Unwind_SetGR>
 8000880:	4a6c      	ldr	r2, [pc, #432]	@ (8000a34 <__gnu_unwind_pr_common+0x2a0>)
 8000882:	210f      	movs	r1, #15
 8000884:	4630      	mov	r0, r6
 8000886:	f7ff ff37 	bl	80006f8 <_Unwind_SetGR>
 800088a:	2007      	movs	r0, #7
 800088c:	e000      	b.n	8000890 <__gnu_unwind_pr_common+0xfc>
 800088e:	2009      	movs	r0, #9
 8000890:	b009      	add	sp, #36	@ 0x24
 8000892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000896:	2300      	movs	r3, #0
 8000898:	e7c9      	b.n	800082e <__gnu_unwind_pr_common+0x9a>
 800089a:	6854      	ldr	r4, [r2, #4]
 800089c:	f102 0908 	add.w	r9, r2, #8
 80008a0:	e7b2      	b.n	8000808 <__gnu_unwind_pr_common+0x74>
 80008a2:	0209      	lsls	r1, r1, #8
 80008a4:	9105      	str	r1, [sp, #20]
 80008a6:	f88d 301d 	strb.w	r3, [sp, #29]
 80008aa:	2103      	movs	r1, #3
 80008ac:	e788      	b.n	80007c0 <__gnu_unwind_pr_common+0x2c>
 80008ae:	f8d9 4000 	ldr.w	r4, [r9]
 80008b2:	f024 4800 	bic.w	r8, r4, #2147483648	@ 0x80000000
 80008b6:	f1bb 0f00 	cmp.w	fp, #0
 80008ba:	d147      	bne.n	800094c <__gnu_unwind_pr_common+0x1b8>
 80008bc:	b12b      	cbz	r3, 80008ca <__gnu_unwind_pr_common+0x136>
 80008be:	9b01      	ldr	r3, [sp, #4]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d05c      	beq.n	800097e <__gnu_unwind_pr_common+0x1ea>
 80008c4:	f1b8 0f00 	cmp.w	r8, #0
 80008c8:	d059      	beq.n	800097e <__gnu_unwind_pr_common+0x1ea>
 80008ca:	2c00      	cmp	r4, #0
 80008cc:	da01      	bge.n	80008d2 <__gnu_unwind_pr_common+0x13e>
 80008ce:	f109 0904 	add.w	r9, r9, #4
 80008d2:	f108 0201 	add.w	r2, r8, #1
 80008d6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80008da:	e7bb      	b.n	8000854 <__gnu_unwind_pr_common+0xc0>
 80008dc:	f1bb 0f00 	cmp.w	fp, #0
 80008e0:	d11c      	bne.n	800091c <__gnu_unwind_pr_common+0x188>
 80008e2:	b1c3      	cbz	r3, 8000916 <__gnu_unwind_pr_common+0x182>
 80008e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80008e8:	f8d9 2000 	ldr.w	r2, [r9]
 80008ec:	1c99      	adds	r1, r3, #2
 80008ee:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80008f2:	d0cc      	beq.n	800088e <__gnu_unwind_pr_common+0xfa>
 80008f4:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 80008f8:	3301      	adds	r3, #1
 80008fa:	9404      	str	r4, [sp, #16]
 80008fc:	f000 808e 	beq.w	8000a1c <__gnu_unwind_pr_common+0x288>
 8000900:	f109 0004 	add.w	r0, r9, #4
 8000904:	f7ff fdb2 	bl	800046c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000908:	ab04      	add	r3, sp, #16
 800090a:	4601      	mov	r1, r0
 800090c:	4628      	mov	r0, r5
 800090e:	f3af 8000 	nop.w
 8000912:	2800      	cmp	r0, #0
 8000914:	d159      	bne.n	80009ca <__gnu_unwind_pr_common+0x236>
 8000916:	f109 0208 	add.w	r2, r9, #8
 800091a:	e79b      	b.n	8000854 <__gnu_unwind_pr_common+0xc0>
 800091c:	210d      	movs	r1, #13
 800091e:	4630      	mov	r0, r6
 8000920:	f7ff fec2 	bl	80006a8 <_Unwind_GetGR>
 8000924:	6a2c      	ldr	r4, [r5, #32]
 8000926:	4284      	cmp	r4, r0
 8000928:	d1f5      	bne.n	8000916 <__gnu_unwind_pr_common+0x182>
 800092a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800092c:	4599      	cmp	r9, r3
 800092e:	d1f2      	bne.n	8000916 <__gnu_unwind_pr_common+0x182>
 8000930:	4648      	mov	r0, r9
 8000932:	f7ff fcd1 	bl	80002d8 <selfrel_offset31>
 8000936:	210f      	movs	r1, #15
 8000938:	4602      	mov	r2, r0
 800093a:	4630      	mov	r0, r6
 800093c:	f7ff fedc 	bl	80006f8 <_Unwind_SetGR>
 8000940:	462a      	mov	r2, r5
 8000942:	2100      	movs	r1, #0
 8000944:	4630      	mov	r0, r6
 8000946:	f7ff fed7 	bl	80006f8 <_Unwind_SetGR>
 800094a:	e79e      	b.n	800088a <__gnu_unwind_pr_common+0xf6>
 800094c:	210d      	movs	r1, #13
 800094e:	4630      	mov	r0, r6
 8000950:	f7ff feaa 	bl	80006a8 <_Unwind_GetGR>
 8000954:	6a2f      	ldr	r7, [r5, #32]
 8000956:	4287      	cmp	r7, r0
 8000958:	d1b7      	bne.n	80008ca <__gnu_unwind_pr_common+0x136>
 800095a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800095c:	4599      	cmp	r9, r3
 800095e:	d1b4      	bne.n	80008ca <__gnu_unwind_pr_common+0x136>
 8000960:	2400      	movs	r4, #0
 8000962:	2304      	movs	r3, #4
 8000964:	e9c5 430b 	strd	r4, r3, [r5, #44]	@ 0x2c
 8000968:	444b      	add	r3, r9
 800096a:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 800096e:	636b      	str	r3, [r5, #52]	@ 0x34
 8000970:	f8d9 3000 	ldr.w	r3, [r9]
 8000974:	42a3      	cmp	r3, r4
 8000976:	db58      	blt.n	8000a2a <__gnu_unwind_pr_common+0x296>
 8000978:	2301      	movs	r3, #1
 800097a:	9302      	str	r3, [sp, #8]
 800097c:	e7a9      	b.n	80008d2 <__gnu_unwind_pr_common+0x13e>
 800097e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8000982:	f8cd b00c 	str.w	fp, [sp, #12]
 8000986:	f109 0704 	add.w	r7, r9, #4
 800098a:	46b3      	mov	fp, r6
 800098c:	2400      	movs	r4, #0
 800098e:	461e      	mov	r6, r3
 8000990:	e00b      	b.n	80009aa <__gnu_unwind_pr_common+0x216>
 8000992:	4638      	mov	r0, r7
 8000994:	9604      	str	r6, [sp, #16]
 8000996:	f7ff fd69 	bl	800046c <_Unwind_decode_typeinfo_ptr.constprop.0>
 800099a:	2200      	movs	r2, #0
 800099c:	4601      	mov	r1, r0
 800099e:	ab04      	add	r3, sp, #16
 80009a0:	4628      	mov	r0, r5
 80009a2:	f3af 8000 	nop.w
 80009a6:	3704      	adds	r7, #4
 80009a8:	b9f8      	cbnz	r0, 80009ea <__gnu_unwind_pr_common+0x256>
 80009aa:	4544      	cmp	r4, r8
 80009ac:	f104 0401 	add.w	r4, r4, #1
 80009b0:	d1ef      	bne.n	8000992 <__gnu_unwind_pr_common+0x1fe>
 80009b2:	210d      	movs	r1, #13
 80009b4:	4658      	mov	r0, fp
 80009b6:	f7ff fe77 	bl	80006a8 <_Unwind_GetGR>
 80009ba:	9b04      	ldr	r3, [sp, #16]
 80009bc:	f8c5 9028 	str.w	r9, [r5, #40]	@ 0x28
 80009c0:	4602      	mov	r2, r0
 80009c2:	e9c5 2308 	strd	r2, r3, [r5, #32]
 80009c6:	2006      	movs	r0, #6
 80009c8:	e762      	b.n	8000890 <__gnu_unwind_pr_common+0xfc>
 80009ca:	4604      	mov	r4, r0
 80009cc:	210d      	movs	r1, #13
 80009ce:	4630      	mov	r0, r6
 80009d0:	f7ff fe6a 	bl	80006a8 <_Unwind_GetGR>
 80009d4:	9e04      	ldr	r6, [sp, #16]
 80009d6:	6228      	str	r0, [r5, #32]
 80009d8:	2c02      	cmp	r4, #2
 80009da:	bf04      	itt	eq
 80009dc:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 80009de:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 80009e2:	e9c5 6909 	strd	r6, r9, [r5, #36]	@ 0x24
 80009e6:	2006      	movs	r0, #6
 80009e8:	e752      	b.n	8000890 <__gnu_unwind_pr_common+0xfc>
 80009ea:	465e      	mov	r6, fp
 80009ec:	f8d9 4000 	ldr.w	r4, [r9]
 80009f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80009f4:	e769      	b.n	80008ca <__gnu_unwind_pr_common+0x136>
 80009f6:	4648      	mov	r0, r9
 80009f8:	f7ff fc6e 	bl	80002d8 <selfrel_offset31>
 80009fc:	f109 0304 	add.w	r3, r9, #4
 8000a00:	4604      	mov	r4, r0
 8000a02:	63ab      	str	r3, [r5, #56]	@ 0x38
 8000a04:	4628      	mov	r0, r5
 8000a06:	f3af 8000 	nop.w
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	f43f af3f 	beq.w	800088e <__gnu_unwind_pr_common+0xfa>
 8000a10:	4622      	mov	r2, r4
 8000a12:	210f      	movs	r1, #15
 8000a14:	4630      	mov	r0, r6
 8000a16:	f7ff fe6f 	bl	80006f8 <_Unwind_SetGR>
 8000a1a:	e736      	b.n	800088a <__gnu_unwind_pr_common+0xf6>
 8000a1c:	4630      	mov	r0, r6
 8000a1e:	210d      	movs	r1, #13
 8000a20:	f7ff fe42 	bl	80006a8 <_Unwind_GetGR>
 8000a24:	4626      	mov	r6, r4
 8000a26:	6228      	str	r0, [r5, #32]
 8000a28:	e7db      	b.n	80009e2 <__gnu_unwind_pr_common+0x24e>
 8000a2a:	f108 0201 	add.w	r2, r8, #1
 8000a2e:	eb09 0082 	add.w	r0, r9, r2, lsl #2
 8000a32:	e77e      	b.n	8000932 <__gnu_unwind_pr_common+0x19e>
 8000a34:	00000000 	.word	0x00000000

08000a38 <__aeabi_unwind_cpp_pr0>:
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e6ab      	b.n	8000794 <__gnu_unwind_pr_common>

08000a3c <__aeabi_unwind_cpp_pr1>:
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e6a9      	b.n	8000794 <__gnu_unwind_pr_common>

08000a40 <__aeabi_unwind_cpp_pr2>:
 8000a40:	2302      	movs	r3, #2
 8000a42:	e6a7      	b.n	8000794 <__gnu_unwind_pr_common>

08000a44 <_Unwind_VRS_Pop>:
 8000a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a48:	4606      	mov	r6, r0
 8000a4a:	b0c4      	sub	sp, #272	@ 0x110
 8000a4c:	4614      	mov	r4, r2
 8000a4e:	2905      	cmp	r1, #5
 8000a50:	f200 80e8 	bhi.w	8000c24 <_Unwind_VRS_Pop+0x1e0>
 8000a54:	e8df f011 	tbh	[pc, r1, lsl #1]
 8000a58:	002d0012 	.word	0x002d0012
 8000a5c:	006600e6 	.word	0x006600e6
 8000a60:	0006008b 	.word	0x0006008b
 8000a64:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8000a66:	2c00      	cmp	r4, #0
 8000a68:	f040 80dc 	bne.w	8000c24 <_Unwind_VRS_Pop+0x1e0>
 8000a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a70:	6442      	str	r2, [r0, #68]	@ 0x44
 8000a72:	6383      	str	r3, [r0, #56]	@ 0x38
 8000a74:	2000      	movs	r0, #0
 8000a76:	b044      	add	sp, #272	@ 0x110
 8000a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f040 80d1 	bne.w	8000c24 <_Unwind_VRS_Pop+0x1e0>
 8000a82:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8000a84:	fa1f fc84 	uxth.w	ip, r4
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f106 0e04 	add.w	lr, r6, #4
 8000a8e:	fa00 f103 	lsl.w	r1, r0, r3
 8000a92:	ea11 0f0c 	tst.w	r1, ip
 8000a96:	462a      	mov	r2, r5
 8000a98:	d004      	beq.n	8000aa4 <_Unwind_VRS_Pop+0x60>
 8000a9a:	f852 1b04 	ldr.w	r1, [r2], #4
 8000a9e:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
 8000aa2:	4615      	mov	r5, r2
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	2b10      	cmp	r3, #16
 8000aa8:	d1f1      	bne.n	8000a8e <_Unwind_VRS_Pop+0x4a>
 8000aaa:	04a7      	lsls	r7, r4, #18
 8000aac:	d4e2      	bmi.n	8000a74 <_Unwind_VRS_Pop+0x30>
 8000aae:	63b5      	str	r5, [r6, #56]	@ 0x38
 8000ab0:	e7e0      	b.n	8000a74 <_Unwind_VRS_Pop+0x30>
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	ea4f 4714 	mov.w	r7, r4, lsr #16
 8000ab8:	b2a4      	uxth	r4, r4
 8000aba:	d07c      	beq.n	8000bb6 <_Unwind_VRS_Pop+0x172>
 8000abc:	2b05      	cmp	r3, #5
 8000abe:	f040 80b1 	bne.w	8000c24 <_Unwind_VRS_Pop+0x1e0>
 8000ac2:	eb07 0804 	add.w	r8, r7, r4
 8000ac6:	f1b8 0f20 	cmp.w	r8, #32
 8000aca:	f200 80ab 	bhi.w	8000c24 <_Unwind_VRS_Pop+0x1e0>
 8000ace:	2f0f      	cmp	r7, #15
 8000ad0:	f240 80aa 	bls.w	8000c28 <_Unwind_VRS_Pop+0x1e4>
 8000ad4:	2c00      	cmp	r4, #0
 8000ad6:	d0cd      	beq.n	8000a74 <_Unwind_VRS_Pop+0x30>
 8000ad8:	6802      	ldr	r2, [r0, #0]
 8000ada:	0755      	lsls	r5, r2, #29
 8000adc:	f100 80ff 	bmi.w	8000cde <_Unwind_VRS_Pop+0x29a>
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	ad02      	add	r5, sp, #8
 8000ae4:	4628      	mov	r0, r5
 8000ae6:	f000 f93b 	bl	8000d60 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000aea:	0064      	lsls	r4, r4, #1
 8000aec:	f1a7 0010 	sub.w	r0, r7, #16
 8000af0:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000af2:	9b01      	ldr	r3, [sp, #4]
 8000af4:	1e61      	subs	r1, r4, #1
 8000af6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8000afa:	3101      	adds	r1, #1
 8000afc:	3804      	subs	r0, #4
 8000afe:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8000b02:	f852 4b04 	ldr.w	r4, [r2], #4
 8000b06:	f840 4f04 	str.w	r4, [r0, #4]!
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	d1f9      	bne.n	8000b02 <_Unwind_VRS_Pop+0xbe>
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	f000 80cd 	beq.w	8000cae <_Unwind_VRS_Pop+0x26a>
 8000b14:	2f0f      	cmp	r7, #15
 8000b16:	63b2      	str	r2, [r6, #56]	@ 0x38
 8000b18:	f240 80e9 	bls.w	8000cee <_Unwind_VRS_Pop+0x2aa>
 8000b1c:	4628      	mov	r0, r5
 8000b1e:	f000 f91b 	bl	8000d58 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000b22:	e7a7      	b.n	8000a74 <_Unwind_VRS_Pop+0x30>
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d17d      	bne.n	8000c24 <_Unwind_VRS_Pop+0x1e0>
 8000b28:	b2a7      	uxth	r7, r4
 8000b2a:	eb07 4314 	add.w	r3, r7, r4, lsr #16
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	ea4f 4414 	mov.w	r4, r4, lsr #16
 8000b34:	d876      	bhi.n	8000c24 <_Unwind_VRS_Pop+0x1e0>
 8000b36:	6803      	ldr	r3, [r0, #0]
 8000b38:	0719      	lsls	r1, r3, #28
 8000b3a:	f100 80a4 	bmi.w	8000c86 <_Unwind_VRS_Pop+0x242>
 8000b3e:	ad22      	add	r5, sp, #136	@ 0x88
 8000b40:	4628      	mov	r0, r5
 8000b42:	f000 f933 	bl	8000dac <__gnu_Unwind_Save_WMMXD>
 8000b46:	007a      	lsls	r2, r7, #1
 8000b48:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 8000b4a:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8000b4e:	1e53      	subs	r3, r2, #1
 8000b50:	b142      	cbz	r2, 8000b64 <_Unwind_VRS_Pop+0x120>
 8000b52:	1b01      	subs	r1, r0, r4
 8000b54:	5862      	ldr	r2, [r4, r1]
 8000b56:	f844 2b04 	str.w	r2, [r4], #4
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	d1f9      	bne.n	8000b54 <_Unwind_VRS_Pop+0x110>
 8000b60:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8000b64:	63b0      	str	r0, [r6, #56]	@ 0x38
 8000b66:	4628      	mov	r0, r5
 8000b68:	f000 f8fe 	bl	8000d68 <__gnu_Unwind_Restore_WMMXD>
 8000b6c:	e782      	b.n	8000a74 <_Unwind_VRS_Pop+0x30>
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d158      	bne.n	8000c24 <_Unwind_VRS_Pop+0x1e0>
 8000b72:	2c10      	cmp	r4, #16
 8000b74:	d856      	bhi.n	8000c24 <_Unwind_VRS_Pop+0x1e0>
 8000b76:	6803      	ldr	r3, [r0, #0]
 8000b78:	06d8      	lsls	r0, r3, #27
 8000b7a:	d47c      	bmi.n	8000c76 <_Unwind_VRS_Pop+0x232>
 8000b7c:	ad22      	add	r5, sp, #136	@ 0x88
 8000b7e:	4628      	mov	r0, r5
 8000b80:	f000 f940 	bl	8000e04 <__gnu_Unwind_Save_WMMXC>
 8000b84:	6bb7      	ldr	r7, [r6, #56]	@ 0x38
 8000b86:	4629      	mov	r1, r5
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f04f 0c01 	mov.w	ip, #1
 8000b8e:	fa0c f203 	lsl.w	r2, ip, r3
 8000b92:	4222      	tst	r2, r4
 8000b94:	4638      	mov	r0, r7
 8000b96:	f103 0301 	add.w	r3, r3, #1
 8000b9a:	d003      	beq.n	8000ba4 <_Unwind_VRS_Pop+0x160>
 8000b9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8000ba0:	600a      	str	r2, [r1, #0]
 8000ba2:	4607      	mov	r7, r0
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	f101 0104 	add.w	r1, r1, #4
 8000baa:	d1f0      	bne.n	8000b8e <_Unwind_VRS_Pop+0x14a>
 8000bac:	63b7      	str	r7, [r6, #56]	@ 0x38
 8000bae:	4628      	mov	r0, r5
 8000bb0:	f000 f91e 	bl	8000df0 <__gnu_Unwind_Restore_WMMXC>
 8000bb4:	e75e      	b.n	8000a74 <_Unwind_VRS_Pop+0x30>
 8000bb6:	193a      	adds	r2, r7, r4
 8000bb8:	2a10      	cmp	r2, #16
 8000bba:	d833      	bhi.n	8000c24 <_Unwind_VRS_Pop+0x1e0>
 8000bbc:	2f10      	cmp	r7, #16
 8000bbe:	d031      	beq.n	8000c24 <_Unwind_VRS_Pop+0x1e0>
 8000bc0:	6802      	ldr	r2, [r0, #0]
 8000bc2:	07d1      	lsls	r1, r2, #31
 8000bc4:	d508      	bpl.n	8000bd8 <_Unwind_VRS_Pop+0x194>
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	f022 0203 	bic.w	r2, r2, #3
 8000bcc:	f840 2b50 	str.w	r2, [r0], #80
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	f000 f8b5 	bl	8000d40 <__gnu_Unwind_Save_VFP>
 8000bd6:	9b01      	ldr	r3, [sp, #4]
 8000bd8:	9301      	str	r3, [sp, #4]
 8000bda:	ad22      	add	r5, sp, #136	@ 0x88
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f000 f8af 	bl	8000d40 <__gnu_Unwind_Save_VFP>
 8000be2:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8000be4:	9b01      	ldr	r3, [sp, #4]
 8000be6:	2c00      	cmp	r4, #0
 8000be8:	d062      	beq.n	8000cb0 <_Unwind_VRS_Pop+0x26c>
 8000bea:	0062      	lsls	r2, r4, #1
 8000bec:	3a01      	subs	r2, #1
 8000bee:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
 8000bf2:	f04f 0800 	mov.w	r8, #0
 8000bf6:	3201      	adds	r2, #1
 8000bf8:	3804      	subs	r0, #4
 8000bfa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8000bfe:	f851 4b04 	ldr.w	r4, [r1], #4
 8000c02:	f840 4f04 	str.w	r4, [r0, #4]!
 8000c06:	4291      	cmp	r1, r2
 8000c08:	d1f9      	bne.n	8000bfe <_Unwind_VRS_Pop+0x1ba>
 8000c0a:	f1b8 0f00 	cmp.w	r8, #0
 8000c0e:	d142      	bne.n	8000c96 <_Unwind_VRS_Pop+0x252>
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d04d      	beq.n	8000cb0 <_Unwind_VRS_Pop+0x26c>
 8000c14:	2f0f      	cmp	r7, #15
 8000c16:	63b1      	str	r1, [r6, #56]	@ 0x38
 8000c18:	f63f af2c 	bhi.w	8000a74 <_Unwind_VRS_Pop+0x30>
 8000c1c:	4628      	mov	r0, r5
 8000c1e:	f000 f893 	bl	8000d48 <__gnu_Unwind_Restore_VFP_D>
 8000c22:	e727      	b.n	8000a74 <_Unwind_VRS_Pop+0x30>
 8000c24:	2002      	movs	r0, #2
 8000c26:	e726      	b.n	8000a76 <_Unwind_VRS_Pop+0x32>
 8000c28:	6802      	ldr	r2, [r0, #0]
 8000c2a:	f1b8 0f10 	cmp.w	r8, #16
 8000c2e:	f002 0101 	and.w	r1, r2, #1
 8000c32:	d943      	bls.n	8000cbc <_Unwind_VRS_Pop+0x278>
 8000c34:	b151      	cbz	r1, 8000c4c <_Unwind_VRS_Pop+0x208>
 8000c36:	f022 0201 	bic.w	r2, r2, #1
 8000c3a:	f042 0202 	orr.w	r2, r2, #2
 8000c3e:	f840 2b50 	str.w	r2, [r0], #80
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	f000 f884 	bl	8000d50 <__gnu_Unwind_Save_VFP_D>
 8000c48:	6832      	ldr	r2, [r6, #0]
 8000c4a:	9b01      	ldr	r3, [sp, #4]
 8000c4c:	9301      	str	r3, [sp, #4]
 8000c4e:	0750      	lsls	r0, r2, #29
 8000c50:	d451      	bmi.n	8000cf6 <_Unwind_VRS_Pop+0x2b2>
 8000c52:	ad22      	add	r5, sp, #136	@ 0x88
 8000c54:	4628      	mov	r0, r5
 8000c56:	f000 f87b 	bl	8000d50 <__gnu_Unwind_Save_VFP_D>
 8000c5a:	a802      	add	r0, sp, #8
 8000c5c:	f000 f880 	bl	8000d60 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000c60:	f1c7 0210 	rsb	r2, r7, #16
 8000c64:	0052      	lsls	r2, r2, #1
 8000c66:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8000c68:	9b01      	ldr	r3, [sp, #4]
 8000c6a:	f1a8 0810 	sub.w	r8, r8, #16
 8000c6e:	3a01      	subs	r2, #1
 8000c70:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
 8000c74:	e7bf      	b.n	8000bf6 <_Unwind_VRS_Pop+0x1b2>
 8000c76:	f023 0310 	bic.w	r3, r3, #16
 8000c7a:	6033      	str	r3, [r6, #0]
 8000c7c:	f506 70ec 	add.w	r0, r6, #472	@ 0x1d8
 8000c80:	f000 f8c0 	bl	8000e04 <__gnu_Unwind_Save_WMMXC>
 8000c84:	e77a      	b.n	8000b7c <_Unwind_VRS_Pop+0x138>
 8000c86:	f023 0308 	bic.w	r3, r3, #8
 8000c8a:	6003      	str	r3, [r0, #0]
 8000c8c:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 8000c90:	f000 f88c 	bl	8000dac <__gnu_Unwind_Save_WMMXD>
 8000c94:	e753      	b.n	8000b3e <_Unwind_VRS_Pop+0xfa>
 8000c96:	2f10      	cmp	r7, #16
 8000c98:	4638      	mov	r0, r7
 8000c9a:	bf38      	it	cc
 8000c9c:	2010      	movcc	r0, #16
 8000c9e:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8000ca2:	3810      	subs	r0, #16
 8000ca4:	ad02      	add	r5, sp, #8
 8000ca6:	3901      	subs	r1, #1
 8000ca8:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8000cac:	e725      	b.n	8000afa <_Unwind_VRS_Pop+0xb6>
 8000cae:	ad22      	add	r5, sp, #136	@ 0x88
 8000cb0:	3104      	adds	r1, #4
 8000cb2:	63b1      	str	r1, [r6, #56]	@ 0x38
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	f000 f83f 	bl	8000d38 <__gnu_Unwind_Restore_VFP>
 8000cba:	e6db      	b.n	8000a74 <_Unwind_VRS_Pop+0x30>
 8000cbc:	bb19      	cbnz	r1, 8000d06 <_Unwind_VRS_Pop+0x2c2>
 8000cbe:	ad22      	add	r5, sp, #136	@ 0x88
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	9301      	str	r3, [sp, #4]
 8000cc4:	f000 f844 	bl	8000d50 <__gnu_Unwind_Save_VFP_D>
 8000cc8:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8000cca:	2c00      	cmp	r4, #0
 8000ccc:	d0a6      	beq.n	8000c1c <_Unwind_VRS_Pop+0x1d8>
 8000cce:	0062      	lsls	r2, r4, #1
 8000cd0:	9b01      	ldr	r3, [sp, #4]
 8000cd2:	3a01      	subs	r2, #1
 8000cd4:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
 8000cd8:	f04f 0800 	mov.w	r8, #0
 8000cdc:	e78b      	b.n	8000bf6 <_Unwind_VRS_Pop+0x1b2>
 8000cde:	f022 0204 	bic.w	r2, r2, #4
 8000ce2:	f840 2bd8 	str.w	r2, [r0], #216
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	f000 f83a 	bl	8000d60 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000cec:	e6f9      	b.n	8000ae2 <_Unwind_VRS_Pop+0x9e>
 8000cee:	a822      	add	r0, sp, #136	@ 0x88
 8000cf0:	f000 f82a 	bl	8000d48 <__gnu_Unwind_Restore_VFP_D>
 8000cf4:	e712      	b.n	8000b1c <_Unwind_VRS_Pop+0xd8>
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	f022 0204 	bic.w	r2, r2, #4
 8000cfc:	f840 2bd8 	str.w	r2, [r0], #216
 8000d00:	f000 f82e 	bl	8000d60 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000d04:	e7a5      	b.n	8000c52 <_Unwind_VRS_Pop+0x20e>
 8000d06:	4630      	mov	r0, r6
 8000d08:	f022 0201 	bic.w	r2, r2, #1
 8000d0c:	f042 0202 	orr.w	r2, r2, #2
 8000d10:	f840 2b50 	str.w	r2, [r0], #80
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	f000 f81b 	bl	8000d50 <__gnu_Unwind_Save_VFP_D>
 8000d1a:	9b01      	ldr	r3, [sp, #4]
 8000d1c:	e7cf      	b.n	8000cbe <_Unwind_VRS_Pop+0x27a>
 8000d1e:	bf00      	nop

08000d20 <__restore_core_regs>:
 8000d20:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 8000d24:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000d28:	469c      	mov	ip, r3
 8000d2a:	46a6      	mov	lr, r4
 8000d2c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000d30:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000d34:	46e5      	mov	sp, ip
 8000d36:	bd00      	pop	{pc}

08000d38 <__gnu_Unwind_Restore_VFP>:
 8000d38:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <__gnu_Unwind_Save_VFP>:
 8000d40:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__gnu_Unwind_Restore_VFP_D>:
 8000d48:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <__gnu_Unwind_Save_VFP_D>:
 8000d50:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000d58:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000d60:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <__gnu_Unwind_Restore_WMMXD>:
 8000d68:	ecf0 0102 	ldfe	f0, [r0], #8
 8000d6c:	ecf0 1102 	ldfe	f1, [r0], #8
 8000d70:	ecf0 2102 	ldfe	f2, [r0], #8
 8000d74:	ecf0 3102 	ldfe	f3, [r0], #8
 8000d78:	ecf0 4102 	ldfe	f4, [r0], #8
 8000d7c:	ecf0 5102 	ldfe	f5, [r0], #8
 8000d80:	ecf0 6102 	ldfe	f6, [r0], #8
 8000d84:	ecf0 7102 	ldfe	f7, [r0], #8
 8000d88:	ecf0 8102 	ldfp	f0, [r0], #8
 8000d8c:	ecf0 9102 	ldfp	f1, [r0], #8
 8000d90:	ecf0 a102 	ldfp	f2, [r0], #8
 8000d94:	ecf0 b102 	ldfp	f3, [r0], #8
 8000d98:	ecf0 c102 	ldfp	f4, [r0], #8
 8000d9c:	ecf0 d102 	ldfp	f5, [r0], #8
 8000da0:	ecf0 e102 	ldfp	f6, [r0], #8
 8000da4:	ecf0 f102 	ldfp	f7, [r0], #8
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <__gnu_Unwind_Save_WMMXD>:
 8000dac:	ece0 0102 	stfe	f0, [r0], #8
 8000db0:	ece0 1102 	stfe	f1, [r0], #8
 8000db4:	ece0 2102 	stfe	f2, [r0], #8
 8000db8:	ece0 3102 	stfe	f3, [r0], #8
 8000dbc:	ece0 4102 	stfe	f4, [r0], #8
 8000dc0:	ece0 5102 	stfe	f5, [r0], #8
 8000dc4:	ece0 6102 	stfe	f6, [r0], #8
 8000dc8:	ece0 7102 	stfe	f7, [r0], #8
 8000dcc:	ece0 8102 	stfp	f0, [r0], #8
 8000dd0:	ece0 9102 	stfp	f1, [r0], #8
 8000dd4:	ece0 a102 	stfp	f2, [r0], #8
 8000dd8:	ece0 b102 	stfp	f3, [r0], #8
 8000ddc:	ece0 c102 	stfp	f4, [r0], #8
 8000de0:	ece0 d102 	stfp	f5, [r0], #8
 8000de4:	ece0 e102 	stfp	f6, [r0], #8
 8000de8:	ece0 f102 	stfp	f7, [r0], #8
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <__gnu_Unwind_Restore_WMMXC>:
 8000df0:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000df4:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000df8:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000dfc:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <__gnu_Unwind_Save_WMMXC>:
 8000e04:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000e08:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000e0c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000e10:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <_Unwind_RaiseException>:
 8000e18:	46ec      	mov	ip, sp
 8000e1a:	b500      	push	{lr}
 8000e1c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000e20:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000e2c:	a901      	add	r1, sp, #4
 8000e2e:	f7ff fbb3 	bl	8000598 <__gnu_Unwind_RaiseException>
 8000e32:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8000e36:	b012      	add	sp, #72	@ 0x48
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <_Unwind_Resume>:
 8000e3c:	46ec      	mov	ip, sp
 8000e3e:	b500      	push	{lr}
 8000e40:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000e44:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000e50:	a901      	add	r1, sp, #4
 8000e52:	f7ff fbdd 	bl	8000610 <__gnu_Unwind_Resume>
 8000e56:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8000e5a:	b012      	add	sp, #72	@ 0x48
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <_Unwind_Resume_or_Rethrow>:
 8000e60:	46ec      	mov	ip, sp
 8000e62:	b500      	push	{lr}
 8000e64:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000e68:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000e74:	a901      	add	r1, sp, #4
 8000e76:	f7ff fbed 	bl	8000654 <__gnu_Unwind_Resume_or_Rethrow>
 8000e7a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8000e7e:	b012      	add	sp, #72	@ 0x48
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <_Unwind_ForcedUnwind>:
 8000e84:	46ec      	mov	ip, sp
 8000e86:	b500      	push	{lr}
 8000e88:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000e8c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000e98:	ab01      	add	r3, sp, #4
 8000e9a:	f7ff fbb1 	bl	8000600 <__gnu_Unwind_ForcedUnwind>
 8000e9e:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8000ea2:	b012      	add	sp, #72	@ 0x48
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_Unwind_Backtrace>:
 8000ea8:	46ec      	mov	ip, sp
 8000eaa:	b500      	push	{lr}
 8000eac:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000eb0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ebc:	aa01      	add	r2, sp, #4
 8000ebe:	f7ff fc27 	bl	8000710 <__gnu_Unwind_Backtrace>
 8000ec2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8000ec6:	b012      	add	sp, #72	@ 0x48
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <next_unwind_byte>:
 8000ecc:	7a02      	ldrb	r2, [r0, #8]
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b97a      	cbnz	r2, 8000ef2 <next_unwind_byte+0x26>
 8000ed2:	7a42      	ldrb	r2, [r0, #9]
 8000ed4:	b1a2      	cbz	r2, 8000f00 <next_unwind_byte+0x34>
 8000ed6:	6841      	ldr	r1, [r0, #4]
 8000ed8:	3a01      	subs	r2, #1
 8000eda:	b410      	push	{r4}
 8000edc:	7242      	strb	r2, [r0, #9]
 8000ede:	6808      	ldr	r0, [r1, #0]
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	1d0c      	adds	r4, r1, #4
 8000ee4:	721a      	strb	r2, [r3, #8]
 8000ee6:	0202      	lsls	r2, r0, #8
 8000ee8:	605c      	str	r4, [r3, #4]
 8000eea:	0e00      	lsrs	r0, r0, #24
 8000eec:	bc10      	pop	{r4}
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	4770      	bx	lr
 8000ef2:	6800      	ldr	r0, [r0, #0]
 8000ef4:	3a01      	subs	r2, #1
 8000ef6:	721a      	strb	r2, [r3, #8]
 8000ef8:	0202      	lsls	r2, r0, #8
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	0e00      	lsrs	r0, r0, #24
 8000efe:	4770      	bx	lr
 8000f00:	20b0      	movs	r0, #176	@ 0xb0
 8000f02:	4770      	bx	lr

08000f04 <_Unwind_GetGR.constprop.0>:
 8000f04:	b500      	push	{lr}
 8000f06:	b085      	sub	sp, #20
 8000f08:	aa03      	add	r2, sp, #12
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	9200      	str	r2, [sp, #0]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	220c      	movs	r2, #12
 8000f12:	f7ff fbaf 	bl	8000674 <_Unwind_VRS_Get>
 8000f16:	9803      	ldr	r0, [sp, #12]
 8000f18:	b005      	add	sp, #20
 8000f1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f1e:	bf00      	nop

08000f20 <unwind_UCB_from_context>:
 8000f20:	e7f0      	b.n	8000f04 <_Unwind_GetGR.constprop.0>
 8000f22:	bf00      	nop

08000f24 <__gnu_unwind_execute>:
 8000f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f28:	4606      	mov	r6, r0
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	460d      	mov	r5, r1
 8000f2e:	f04f 0800 	mov.w	r8, #0
 8000f32:	4628      	mov	r0, r5
 8000f34:	f7ff ffca 	bl	8000ecc <next_unwind_byte>
 8000f38:	28b0      	cmp	r0, #176	@ 0xb0
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	f000 811c 	beq.w	8001178 <__gnu_unwind_execute+0x254>
 8000f40:	0607      	lsls	r7, r0, #24
 8000f42:	d55b      	bpl.n	8000ffc <__gnu_unwind_execute+0xd8>
 8000f44:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8000f48:	2ba0      	cmp	r3, #160	@ 0xa0
 8000f4a:	d01a      	beq.n	8000f82 <__gnu_unwind_execute+0x5e>
 8000f4c:	d830      	bhi.n	8000fb0 <__gnu_unwind_execute+0x8c>
 8000f4e:	2b80      	cmp	r3, #128	@ 0x80
 8000f50:	f000 8082 	beq.w	8001058 <__gnu_unwind_execute+0x134>
 8000f54:	2b90      	cmp	r3, #144	@ 0x90
 8000f56:	d127      	bne.n	8000fa8 <__gnu_unwind_execute+0x84>
 8000f58:	f000 030d 	and.w	r3, r0, #13
 8000f5c:	2b0d      	cmp	r3, #13
 8000f5e:	d023      	beq.n	8000fa8 <__gnu_unwind_execute+0x84>
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	2300      	movs	r3, #0
 8000f64:	f000 020f 	and.w	r2, r0, #15
 8000f68:	4619      	mov	r1, r3
 8000f6a:	9700      	str	r7, [sp, #0]
 8000f6c:	4630      	mov	r0, r6
 8000f6e:	f7ff fb81 	bl	8000674 <_Unwind_VRS_Get>
 8000f72:	2300      	movs	r3, #0
 8000f74:	9700      	str	r7, [sp, #0]
 8000f76:	220d      	movs	r2, #13
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	f7ff fba2 	bl	80006c4 <_Unwind_VRS_Set>
 8000f80:	e7d7      	b.n	8000f32 <__gnu_unwind_execute+0xe>
 8000f82:	43c3      	mvns	r3, r0
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8000f8c:	411a      	asrs	r2, r3
 8000f8e:	0701      	lsls	r1, r0, #28
 8000f90:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8000f94:	d501      	bpl.n	8000f9a <__gnu_unwind_execute+0x76>
 8000f96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	f7ff fd50 	bl	8000a44 <_Unwind_VRS_Pop>
 8000fa4:	2800      	cmp	r0, #0
 8000fa6:	d0c4      	beq.n	8000f32 <__gnu_unwind_execute+0xe>
 8000fa8:	2009      	movs	r0, #9
 8000faa:	b005      	add	sp, #20
 8000fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fb0:	2bb0      	cmp	r3, #176	@ 0xb0
 8000fb2:	d068      	beq.n	8001086 <__gnu_unwind_execute+0x162>
 8000fb4:	2bc0      	cmp	r3, #192	@ 0xc0
 8000fb6:	d13d      	bne.n	8001034 <__gnu_unwind_execute+0x110>
 8000fb8:	28c6      	cmp	r0, #198	@ 0xc6
 8000fba:	f000 80ca 	beq.w	8001152 <__gnu_unwind_execute+0x22e>
 8000fbe:	28c7      	cmp	r0, #199	@ 0xc7
 8000fc0:	f000 80df 	beq.w	8001182 <__gnu_unwind_execute+0x25e>
 8000fc4:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8000fc8:	2bc0      	cmp	r3, #192	@ 0xc0
 8000fca:	f000 80ec 	beq.w	80011a6 <__gnu_unwind_execute+0x282>
 8000fce:	28c8      	cmp	r0, #200	@ 0xc8
 8000fd0:	f000 80f7 	beq.w	80011c2 <__gnu_unwind_execute+0x29e>
 8000fd4:	28c9      	cmp	r0, #201	@ 0xc9
 8000fd6:	d1e7      	bne.n	8000fa8 <__gnu_unwind_execute+0x84>
 8000fd8:	4628      	mov	r0, r5
 8000fda:	f7ff ff77 	bl	8000ecc <next_unwind_byte>
 8000fde:	0302      	lsls	r2, r0, #12
 8000fe0:	f000 000f 	and.w	r0, r0, #15
 8000fe4:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8000fe8:	3001      	adds	r0, #1
 8000fea:	4302      	orrs	r2, r0
 8000fec:	2101      	movs	r1, #1
 8000fee:	2305      	movs	r3, #5
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	f7ff fd27 	bl	8000a44 <_Unwind_VRS_Pop>
 8000ff6:	2800      	cmp	r0, #0
 8000ff8:	d09b      	beq.n	8000f32 <__gnu_unwind_execute+0xe>
 8000ffa:	e7d5      	b.n	8000fa8 <__gnu_unwind_execute+0x84>
 8000ffc:	0083      	lsls	r3, r0, #2
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	1d1f      	adds	r7, r3, #4
 8001002:	f10d 0908 	add.w	r9, sp, #8
 8001006:	2300      	movs	r3, #0
 8001008:	4619      	mov	r1, r3
 800100a:	f8cd 9000 	str.w	r9, [sp]
 800100e:	220d      	movs	r2, #13
 8001010:	4630      	mov	r0, r6
 8001012:	f7ff fb2f 	bl	8000674 <_Unwind_VRS_Get>
 8001016:	9b02      	ldr	r3, [sp, #8]
 8001018:	f8cd 9000 	str.w	r9, [sp]
 800101c:	0660      	lsls	r0, r4, #25
 800101e:	bf4c      	ite	mi
 8001020:	1bdf      	submi	r7, r3, r7
 8001022:	18ff      	addpl	r7, r7, r3
 8001024:	2300      	movs	r3, #0
 8001026:	220d      	movs	r2, #13
 8001028:	4619      	mov	r1, r3
 800102a:	4630      	mov	r0, r6
 800102c:	9702      	str	r7, [sp, #8]
 800102e:	f7ff fb49 	bl	80006c4 <_Unwind_VRS_Set>
 8001032:	e77e      	b.n	8000f32 <__gnu_unwind_execute+0xe>
 8001034:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001038:	2bd0      	cmp	r3, #208	@ 0xd0
 800103a:	d1b5      	bne.n	8000fa8 <__gnu_unwind_execute+0x84>
 800103c:	f000 0207 	and.w	r2, r0, #7
 8001040:	3201      	adds	r2, #1
 8001042:	2305      	movs	r3, #5
 8001044:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001048:	2101      	movs	r1, #1
 800104a:	4630      	mov	r0, r6
 800104c:	f7ff fcfa 	bl	8000a44 <_Unwind_VRS_Pop>
 8001050:	2800      	cmp	r0, #0
 8001052:	f43f af6e 	beq.w	8000f32 <__gnu_unwind_execute+0xe>
 8001056:	e7a7      	b.n	8000fa8 <__gnu_unwind_execute+0x84>
 8001058:	4628      	mov	r0, r5
 800105a:	f7ff ff37 	bl	8000ecc <next_unwind_byte>
 800105e:	0224      	lsls	r4, r4, #8
 8001060:	4320      	orrs	r0, r4
 8001062:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001066:	d09f      	beq.n	8000fa8 <__gnu_unwind_execute+0x84>
 8001068:	0104      	lsls	r4, r0, #4
 800106a:	2300      	movs	r3, #0
 800106c:	b2a2      	uxth	r2, r4
 800106e:	4619      	mov	r1, r3
 8001070:	4630      	mov	r0, r6
 8001072:	f7ff fce7 	bl	8000a44 <_Unwind_VRS_Pop>
 8001076:	2800      	cmp	r0, #0
 8001078:	d196      	bne.n	8000fa8 <__gnu_unwind_execute+0x84>
 800107a:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 800107e:	bf18      	it	ne
 8001080:	f04f 0801 	movne.w	r8, #1
 8001084:	e755      	b.n	8000f32 <__gnu_unwind_execute+0xe>
 8001086:	f1a0 03b1 	sub.w	r3, r0, #177	@ 0xb1
 800108a:	2b04      	cmp	r3, #4
 800108c:	f200 80b5 	bhi.w	80011fa <__gnu_unwind_execute+0x2d6>
 8001090:	e8df f003 	tbb	[pc, r3]
 8001094:	0c162955 	.word	0x0c162955
 8001098:	03          	.byte	0x03
 8001099:	00          	.byte	0x00
 800109a:	aa03      	add	r2, sp, #12
 800109c:	2300      	movs	r3, #0
 800109e:	9200      	str	r2, [sp, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	220d      	movs	r2, #13
 80010a4:	4630      	mov	r0, r6
 80010a6:	f7ff fae5 	bl	8000674 <_Unwind_VRS_Get>
 80010aa:	e742      	b.n	8000f32 <__gnu_unwind_execute+0xe>
 80010ac:	2300      	movs	r3, #0
 80010ae:	461a      	mov	r2, r3
 80010b0:	2105      	movs	r1, #5
 80010b2:	4630      	mov	r0, r6
 80010b4:	f7ff fcc6 	bl	8000a44 <_Unwind_VRS_Pop>
 80010b8:	2800      	cmp	r0, #0
 80010ba:	f43f af3a 	beq.w	8000f32 <__gnu_unwind_execute+0xe>
 80010be:	e773      	b.n	8000fa8 <__gnu_unwind_execute+0x84>
 80010c0:	4628      	mov	r0, r5
 80010c2:	f7ff ff03 	bl	8000ecc <next_unwind_byte>
 80010c6:	0302      	lsls	r2, r0, #12
 80010c8:	f000 000f 	and.w	r0, r0, #15
 80010cc:	3001      	adds	r0, #1
 80010ce:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 80010d2:	2301      	movs	r3, #1
 80010d4:	4302      	orrs	r2, r0
 80010d6:	4619      	mov	r1, r3
 80010d8:	4630      	mov	r0, r6
 80010da:	f7ff fcb3 	bl	8000a44 <_Unwind_VRS_Pop>
 80010de:	2800      	cmp	r0, #0
 80010e0:	f43f af27 	beq.w	8000f32 <__gnu_unwind_execute+0xe>
 80010e4:	e760      	b.n	8000fa8 <__gnu_unwind_execute+0x84>
 80010e6:	2300      	movs	r3, #0
 80010e8:	f10d 0908 	add.w	r9, sp, #8
 80010ec:	220d      	movs	r2, #13
 80010ee:	4619      	mov	r1, r3
 80010f0:	f8cd 9000 	str.w	r9, [sp]
 80010f4:	4630      	mov	r0, r6
 80010f6:	f7ff fabd 	bl	8000674 <_Unwind_VRS_Get>
 80010fa:	4628      	mov	r0, r5
 80010fc:	f7ff fee6 	bl	8000ecc <next_unwind_byte>
 8001100:	0602      	lsls	r2, r0, #24
 8001102:	9c02      	ldr	r4, [sp, #8]
 8001104:	f04f 0702 	mov.w	r7, #2
 8001108:	d50b      	bpl.n	8001122 <__gnu_unwind_execute+0x1fe>
 800110a:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800110e:	40b8      	lsls	r0, r7
 8001110:	4404      	add	r4, r0
 8001112:	4628      	mov	r0, r5
 8001114:	9402      	str	r4, [sp, #8]
 8001116:	f7ff fed9 	bl	8000ecc <next_unwind_byte>
 800111a:	0603      	lsls	r3, r0, #24
 800111c:	f107 0707 	add.w	r7, r7, #7
 8001120:	d4f3      	bmi.n	800110a <__gnu_unwind_execute+0x1e6>
 8001122:	40b8      	lsls	r0, r7
 8001124:	2300      	movs	r3, #0
 8001126:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 800112a:	4404      	add	r4, r0
 800112c:	f8cd 9000 	str.w	r9, [sp]
 8001130:	220d      	movs	r2, #13
 8001132:	4619      	mov	r1, r3
 8001134:	4630      	mov	r0, r6
 8001136:	9402      	str	r4, [sp, #8]
 8001138:	f7ff fac4 	bl	80006c4 <_Unwind_VRS_Set>
 800113c:	e6f9      	b.n	8000f32 <__gnu_unwind_execute+0xe>
 800113e:	4628      	mov	r0, r5
 8001140:	f7ff fec4 	bl	8000ecc <next_unwind_byte>
 8001144:	1e43      	subs	r3, r0, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b0e      	cmp	r3, #14
 800114a:	4602      	mov	r2, r0
 800114c:	f67f af25 	bls.w	8000f9a <__gnu_unwind_execute+0x76>
 8001150:	e72a      	b.n	8000fa8 <__gnu_unwind_execute+0x84>
 8001152:	4628      	mov	r0, r5
 8001154:	f7ff feba 	bl	8000ecc <next_unwind_byte>
 8001158:	0302      	lsls	r2, r0, #12
 800115a:	f000 000f 	and.w	r0, r0, #15
 800115e:	3001      	adds	r0, #1
 8001160:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001164:	2303      	movs	r3, #3
 8001166:	4302      	orrs	r2, r0
 8001168:	4619      	mov	r1, r3
 800116a:	4630      	mov	r0, r6
 800116c:	f7ff fc6a 	bl	8000a44 <_Unwind_VRS_Pop>
 8001170:	2800      	cmp	r0, #0
 8001172:	f43f aede 	beq.w	8000f32 <__gnu_unwind_execute+0xe>
 8001176:	e717      	b.n	8000fa8 <__gnu_unwind_execute+0x84>
 8001178:	f1b8 0f00 	cmp.w	r8, #0
 800117c:	d02d      	beq.n	80011da <__gnu_unwind_execute+0x2b6>
 800117e:	2000      	movs	r0, #0
 8001180:	e713      	b.n	8000faa <__gnu_unwind_execute+0x86>
 8001182:	4628      	mov	r0, r5
 8001184:	f7ff fea2 	bl	8000ecc <next_unwind_byte>
 8001188:	1e43      	subs	r3, r0, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b0e      	cmp	r3, #14
 800118e:	4602      	mov	r2, r0
 8001190:	f63f af0a 	bhi.w	8000fa8 <__gnu_unwind_execute+0x84>
 8001194:	2300      	movs	r3, #0
 8001196:	2104      	movs	r1, #4
 8001198:	4630      	mov	r0, r6
 800119a:	f7ff fc53 	bl	8000a44 <_Unwind_VRS_Pop>
 800119e:	2800      	cmp	r0, #0
 80011a0:	f43f aec7 	beq.w	8000f32 <__gnu_unwind_execute+0xe>
 80011a4:	e700      	b.n	8000fa8 <__gnu_unwind_execute+0x84>
 80011a6:	f000 020f 	and.w	r2, r0, #15
 80011aa:	3201      	adds	r2, #1
 80011ac:	2303      	movs	r3, #3
 80011ae:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 80011b2:	4619      	mov	r1, r3
 80011b4:	4630      	mov	r0, r6
 80011b6:	f7ff fc45 	bl	8000a44 <_Unwind_VRS_Pop>
 80011ba:	2800      	cmp	r0, #0
 80011bc:	f43f aeb9 	beq.w	8000f32 <__gnu_unwind_execute+0xe>
 80011c0:	e6f2      	b.n	8000fa8 <__gnu_unwind_execute+0x84>
 80011c2:	4628      	mov	r0, r5
 80011c4:	f7ff fe82 	bl	8000ecc <next_unwind_byte>
 80011c8:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 80011cc:	f000 030f 	and.w	r3, r0, #15
 80011d0:	3210      	adds	r2, #16
 80011d2:	3301      	adds	r3, #1
 80011d4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80011d8:	e708      	b.n	8000fec <__gnu_unwind_execute+0xc8>
 80011da:	ac02      	add	r4, sp, #8
 80011dc:	4643      	mov	r3, r8
 80011de:	4641      	mov	r1, r8
 80011e0:	9400      	str	r4, [sp, #0]
 80011e2:	220e      	movs	r2, #14
 80011e4:	4630      	mov	r0, r6
 80011e6:	f7ff fa45 	bl	8000674 <_Unwind_VRS_Get>
 80011ea:	220f      	movs	r2, #15
 80011ec:	9400      	str	r4, [sp, #0]
 80011ee:	4643      	mov	r3, r8
 80011f0:	4641      	mov	r1, r8
 80011f2:	4630      	mov	r0, r6
 80011f4:	f7ff fa66 	bl	80006c4 <_Unwind_VRS_Set>
 80011f8:	e7c1      	b.n	800117e <__gnu_unwind_execute+0x25a>
 80011fa:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 80011fe:	2bb4      	cmp	r3, #180	@ 0xb4
 8001200:	f43f aed2 	beq.w	8000fa8 <__gnu_unwind_execute+0x84>
 8001204:	f000 0207 	and.w	r2, r0, #7
 8001208:	3201      	adds	r2, #1
 800120a:	2301      	movs	r3, #1
 800120c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001210:	4619      	mov	r1, r3
 8001212:	4630      	mov	r0, r6
 8001214:	f7ff fc16 	bl	8000a44 <_Unwind_VRS_Pop>
 8001218:	2800      	cmp	r0, #0
 800121a:	f43f ae8a 	beq.w	8000f32 <__gnu_unwind_execute+0xe>
 800121e:	e6c3      	b.n	8000fa8 <__gnu_unwind_execute+0x84>

08001220 <__gnu_unwind_frame>:
 8001220:	b510      	push	{r4, lr}
 8001222:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001224:	6853      	ldr	r3, [r2, #4]
 8001226:	b084      	sub	sp, #16
 8001228:	f04f 0c03 	mov.w	ip, #3
 800122c:	3208      	adds	r2, #8
 800122e:	021c      	lsls	r4, r3, #8
 8001230:	4608      	mov	r0, r1
 8001232:	0e1b      	lsrs	r3, r3, #24
 8001234:	a901      	add	r1, sp, #4
 8001236:	9401      	str	r4, [sp, #4]
 8001238:	9202      	str	r2, [sp, #8]
 800123a:	f88d c00c 	strb.w	ip, [sp, #12]
 800123e:	f88d 300d 	strb.w	r3, [sp, #13]
 8001242:	f7ff fe6f 	bl	8000f24 <__gnu_unwind_execute>
 8001246:	b004      	add	sp, #16
 8001248:	bd10      	pop	{r4, pc}
 800124a:	bf00      	nop

0800124c <_Unwind_GetRegionStart>:
 800124c:	b508      	push	{r3, lr}
 800124e:	f7ff fe67 	bl	8000f20 <unwind_UCB_from_context>
 8001252:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001254:	bd08      	pop	{r3, pc}
 8001256:	bf00      	nop

08001258 <_Unwind_GetLanguageSpecificData>:
 8001258:	b508      	push	{r3, lr}
 800125a:	f7ff fe61 	bl	8000f20 <unwind_UCB_from_context>
 800125e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8001260:	79c3      	ldrb	r3, [r0, #7]
 8001262:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001266:	3008      	adds	r0, #8
 8001268:	bd08      	pop	{r3, pc}
 800126a:	bf00      	nop

0800126c <clear>:
    HAL_Delay(10);
    HAL_GPIO_WritePin(OLED_RST_Port, OLED_RST_Pin, GPIO_PIN_SET);
    HAL_Delay(100);
}

void clear(void) {
 800126c:	b570      	push	{r4, r5, r6, lr}
 800126e:	2321      	movs	r3, #33	@ 0x21
 8001270:	b082      	sub	sp, #8
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2110      	movs	r1, #16
 8001276:	485d      	ldr	r0, [pc, #372]	@ (80013ec <clear+0x180>)
 8001278:	2400      	movs	r4, #0
 800127a:	f88d 3007 	strb.w	r3, [sp, #7]
 800127e:	f002 fb33 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2104      	movs	r1, #4
 8001286:	4859      	ldr	r0, [pc, #356]	@ (80013ec <clear+0x180>)
 8001288:	f002 fb2e 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800128c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001290:	2201      	movs	r2, #1
 8001292:	f10d 0107 	add.w	r1, sp, #7
 8001296:	4856      	ldr	r0, [pc, #344]	@ (80013f0 <clear+0x184>)
 8001298:	f004 fa34 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	2104      	movs	r1, #4
 80012a0:	4852      	ldr	r0, [pc, #328]	@ (80013ec <clear+0x180>)
 80012a2:	f002 fb21 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80012a6:	4622      	mov	r2, r4
 80012a8:	2110      	movs	r1, #16
 80012aa:	4850      	ldr	r0, [pc, #320]	@ (80013ec <clear+0x180>)
 80012ac:	f88d 4007 	strb.w	r4, [sp, #7]
 80012b0:	f002 fb1a 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80012b4:	4622      	mov	r2, r4
 80012b6:	2104      	movs	r1, #4
 80012b8:	484c      	ldr	r0, [pc, #304]	@ (80013ec <clear+0x180>)
 80012ba:	f002 fb15 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80012be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012c2:	2201      	movs	r2, #1
 80012c4:	f10d 0107 	add.w	r1, sp, #7
 80012c8:	4849      	ldr	r0, [pc, #292]	@ (80013f0 <clear+0x184>)
 80012ca:	f004 fa1b 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2104      	movs	r1, #4
 80012d2:	4846      	ldr	r0, [pc, #280]	@ (80013ec <clear+0x180>)
 80012d4:	f002 fb08 	bl	80038e8 <HAL_GPIO_WritePin>
}

void setCursor(uint8_t column, uint8_t page) {
    writeCommand(0x21); // Set column address
    writeCommand(column);
    writeCommand(127);
 80012d8:	237f      	movs	r3, #127	@ 0x7f
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80012da:	4622      	mov	r2, r4
 80012dc:	2110      	movs	r1, #16
 80012de:	4843      	ldr	r0, [pc, #268]	@ (80013ec <clear+0x180>)
 80012e0:	f88d 3007 	strb.w	r3, [sp, #7]
 80012e4:	f002 fb00 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80012e8:	4622      	mov	r2, r4
 80012ea:	2104      	movs	r1, #4
 80012ec:	483f      	ldr	r0, [pc, #252]	@ (80013ec <clear+0x180>)
 80012ee:	f002 fafb 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012f6:	2201      	movs	r2, #1
 80012f8:	f10d 0107 	add.w	r1, sp, #7
 80012fc:	483c      	ldr	r0, [pc, #240]	@ (80013f0 <clear+0x184>)
 80012fe:	f004 fa01 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	2104      	movs	r1, #4
 8001306:	4839      	ldr	r0, [pc, #228]	@ (80013ec <clear+0x180>)
 8001308:	f002 faee 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0x22); // Set page address
 800130c:	2322      	movs	r3, #34	@ 0x22
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800130e:	4622      	mov	r2, r4
 8001310:	2110      	movs	r1, #16
 8001312:	4836      	ldr	r0, [pc, #216]	@ (80013ec <clear+0x180>)
 8001314:	f88d 3007 	strb.w	r3, [sp, #7]
 8001318:	f002 fae6 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800131c:	4622      	mov	r2, r4
 800131e:	2104      	movs	r1, #4
 8001320:	4832      	ldr	r0, [pc, #200]	@ (80013ec <clear+0x180>)
 8001322:	f002 fae1 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001326:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800132a:	2201      	movs	r2, #1
 800132c:	f10d 0107 	add.w	r1, sp, #7
 8001330:	482f      	ldr	r0, [pc, #188]	@ (80013f0 <clear+0x184>)
 8001332:	f004 f9e7 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	2104      	movs	r1, #4
 800133a:	482c      	ldr	r0, [pc, #176]	@ (80013ec <clear+0x180>)
 800133c:	f002 fad4 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001340:	4622      	mov	r2, r4
 8001342:	2110      	movs	r1, #16
 8001344:	4829      	ldr	r0, [pc, #164]	@ (80013ec <clear+0x180>)
 8001346:	f88d 4007 	strb.w	r4, [sp, #7]
 800134a:	f002 facd 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800134e:	4622      	mov	r2, r4
 8001350:	2104      	movs	r1, #4
 8001352:	4826      	ldr	r0, [pc, #152]	@ (80013ec <clear+0x180>)
 8001354:	f002 fac8 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001358:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800135c:	2201      	movs	r2, #1
 800135e:	f10d 0107 	add.w	r1, sp, #7
 8001362:	4823      	ldr	r0, [pc, #140]	@ (80013f0 <clear+0x184>)
 8001364:	f004 f9ce 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	2104      	movs	r1, #4
 800136c:	481f      	ldr	r0, [pc, #124]	@ (80013ec <clear+0x180>)
 800136e:	f002 fabb 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(page);
    writeCommand(7);
 8001372:	2307      	movs	r3, #7
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001374:	4622      	mov	r2, r4
 8001376:	2110      	movs	r1, #16
 8001378:	481c      	ldr	r0, [pc, #112]	@ (80013ec <clear+0x180>)
 800137a:	f88d 3007 	strb.w	r3, [sp, #7]
 800137e:	f002 fab3 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001382:	4622      	mov	r2, r4
 8001384:	2104      	movs	r1, #4
 8001386:	4819      	ldr	r0, [pc, #100]	@ (80013ec <clear+0x180>)
    writeCommand(7);
 8001388:	f44f 6480 	mov.w	r4, #1024	@ 0x400
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800138c:	f002 faac 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8001390:	4d16      	ldr	r5, [pc, #88]	@ (80013ec <clear+0x180>)
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001392:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001396:	2201      	movs	r2, #1
 8001398:	f10d 0107 	add.w	r1, sp, #7
 800139c:	4814      	ldr	r0, [pc, #80]	@ (80013f0 <clear+0x184>)
 800139e:	f004 f9b1 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80013a2:	2201      	movs	r2, #1
 80013a4:	2104      	movs	r1, #4
 80013a6:	4811      	ldr	r0, [pc, #68]	@ (80013ec <clear+0x180>)
 80013a8:	f002 fa9e 	bl	80038e8 <HAL_GPIO_WritePin>
        uint8_t zero = 0x00;
 80013ac:	2600      	movs	r6, #0
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	2110      	movs	r1, #16
 80013b2:	4628      	mov	r0, r5
    for(uint16_t i = 0; i < 128 * 8; i++) {
 80013b4:	3c01      	subs	r4, #1
        uint8_t zero = 0x00;
 80013b6:	f88d 6007 	strb.w	r6, [sp, #7]
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_SET);
 80013ba:	f002 fa95 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80013be:	4632      	mov	r2, r6
 80013c0:	2104      	movs	r1, #4
 80013c2:	4628      	mov	r0, r5
 80013c4:	f002 fa90 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013cc:	2201      	movs	r2, #1
 80013ce:	f10d 0107 	add.w	r1, sp, #7
 80013d2:	4807      	ldr	r0, [pc, #28]	@ (80013f0 <clear+0x184>)
    for(uint16_t i = 0; i < 128 * 8; i++) {
 80013d4:	b2a4      	uxth	r4, r4
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80013d6:	f004 f995 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	2104      	movs	r1, #4
 80013de:	4628      	mov	r0, r5
 80013e0:	f002 fa82 	bl	80038e8 <HAL_GPIO_WritePin>
    for(uint16_t i = 0; i < 128 * 8; i++) {
 80013e4:	2c00      	cmp	r4, #0
 80013e6:	d1e1      	bne.n	80013ac <clear+0x140>
}
 80013e8:	b002      	add	sp, #8
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
 80013ec:	58020c00 	.word	0x58020c00
 80013f0:	240001e4 	.word	0x240001e4

080013f4 <init>:
void init() {
 80013f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_GPIO_WritePin(OLED_RST_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 80013f8:	4cfc      	ldr	r4, [pc, #1008]	@ (80017ec <init+0x3f8>)
void init() {
 80013fa:	b082      	sub	sp, #8
    HAL_GPIO_WritePin(OLED_RST_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2108      	movs	r1, #8
 8001400:	4620      	mov	r0, r4
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001402:	4efb      	ldr	r6, [pc, #1004]	@ (80017f0 <init+0x3fc>)
    HAL_GPIO_WritePin(OLED_RST_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8001404:	f002 fa70 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001408:	200a      	movs	r0, #10
 800140a:	f000 fea5 	bl	8002158 <HAL_Delay>
    HAL_GPIO_WritePin(OLED_RST_Port, OLED_RST_Pin, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	2108      	movs	r1, #8
 8001412:	4620      	mov	r0, r4
 8001414:	f002 fa68 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001418:	2064      	movs	r0, #100	@ 0x64
 800141a:	f000 fe9d 	bl	8002158 <HAL_Delay>
    writeCommand(0xAE); // Display OFF
 800141e:	23ae      	movs	r3, #174	@ 0xae
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001420:	4620      	mov	r0, r4
 8001422:	2200      	movs	r2, #0
 8001424:	2110      	movs	r1, #16
 8001426:	f88d 3007 	strb.w	r3, [sp, #7]
 800142a:	f002 fa5d 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800142e:	4620      	mov	r0, r4
 8001430:	2200      	movs	r2, #0
 8001432:	2104      	movs	r1, #4
 8001434:	f002 fa58 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001438:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800143c:	f10d 0107 	add.w	r1, sp, #7
 8001440:	2201      	movs	r2, #1
 8001442:	4630      	mov	r0, r6
 8001444:	2500      	movs	r5, #0
 8001446:	f004 f95d 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 800144a:	4620      	mov	r0, r4
 800144c:	2201      	movs	r2, #1
 800144e:	2104      	movs	r1, #4
 8001450:	f002 fa4a 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0xD5); writeCommand(0x80); // Clock div
 8001454:	23d5      	movs	r3, #213	@ 0xd5
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001456:	4620      	mov	r0, r4
 8001458:	2200      	movs	r2, #0
 800145a:	2110      	movs	r1, #16
 800145c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001460:	f002 fa42 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001464:	4620      	mov	r0, r4
 8001466:	2200      	movs	r2, #0
 8001468:	2104      	movs	r1, #4
 800146a:	f002 fa3d 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800146e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001472:	f10d 0107 	add.w	r1, sp, #7
 8001476:	2201      	movs	r2, #1
 8001478:	4630      	mov	r0, r6
 800147a:	f04f 0840 	mov.w	r8, #64	@ 0x40
 800147e:	f004 f941 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001482:	4620      	mov	r0, r4
 8001484:	2201      	movs	r2, #1
 8001486:	2104      	movs	r1, #4
 8001488:	f002 fa2e 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0xD5); writeCommand(0x80); // Clock div
 800148c:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800148e:	4620      	mov	r0, r4
 8001490:	2200      	movs	r2, #0
 8001492:	2110      	movs	r1, #16
 8001494:	f88d 3007 	strb.w	r3, [sp, #7]
 8001498:	f002 fa26 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800149c:	4620      	mov	r0, r4
 800149e:	2200      	movs	r2, #0
 80014a0:	2104      	movs	r1, #4
 80014a2:	f002 fa21 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014aa:	f10d 0107 	add.w	r1, sp, #7
 80014ae:	2201      	movs	r2, #1
 80014b0:	4630      	mov	r0, r6
 80014b2:	2701      	movs	r7, #1
 80014b4:	f004 f926 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80014b8:	4620      	mov	r0, r4
 80014ba:	2201      	movs	r2, #1
 80014bc:	2104      	movs	r1, #4
 80014be:	f002 fa13 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0xA8); writeCommand(0x3F); // Mux ratio 64
 80014c2:	23a8      	movs	r3, #168	@ 0xa8
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80014c4:	4620      	mov	r0, r4
 80014c6:	2200      	movs	r2, #0
 80014c8:	2110      	movs	r1, #16
 80014ca:	f88d 3007 	strb.w	r3, [sp, #7]
 80014ce:	f002 fa0b 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80014d2:	4620      	mov	r0, r4
 80014d4:	2200      	movs	r2, #0
 80014d6:	2104      	movs	r1, #4
 80014d8:	f002 fa06 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014e0:	f10d 0107 	add.w	r1, sp, #7
 80014e4:	2201      	movs	r2, #1
 80014e6:	4630      	mov	r0, r6
 80014e8:	f004 f90c 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80014ec:	4620      	mov	r0, r4
 80014ee:	2201      	movs	r2, #1
 80014f0:	2104      	movs	r1, #4
 80014f2:	f002 f9f9 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0xA8); writeCommand(0x3F); // Mux ratio 64
 80014f6:	233f      	movs	r3, #63	@ 0x3f
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80014f8:	4620      	mov	r0, r4
 80014fa:	2200      	movs	r2, #0
 80014fc:	2110      	movs	r1, #16
 80014fe:	f88d 3007 	strb.w	r3, [sp, #7]
 8001502:	f002 f9f1 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001506:	4620      	mov	r0, r4
 8001508:	2200      	movs	r2, #0
 800150a:	2104      	movs	r1, #4
 800150c:	f002 f9ec 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001510:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001514:	f10d 0107 	add.w	r1, sp, #7
 8001518:	2201      	movs	r2, #1
 800151a:	4630      	mov	r0, r6
 800151c:	f004 f8f2 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001520:	4620      	mov	r0, r4
 8001522:	2201      	movs	r2, #1
 8001524:	2104      	movs	r1, #4
 8001526:	f002 f9df 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0xD3); writeCommand(0x00); // Offset
 800152a:	23d3      	movs	r3, #211	@ 0xd3
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800152c:	4620      	mov	r0, r4
 800152e:	2200      	movs	r2, #0
 8001530:	2110      	movs	r1, #16
 8001532:	f88d 3007 	strb.w	r3, [sp, #7]
 8001536:	f002 f9d7 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800153a:	4620      	mov	r0, r4
 800153c:	2200      	movs	r2, #0
 800153e:	2104      	movs	r1, #4
 8001540:	f002 f9d2 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001544:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001548:	f10d 0107 	add.w	r1, sp, #7
 800154c:	2201      	movs	r2, #1
 800154e:	4630      	mov	r0, r6
 8001550:	f004 f8d8 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001554:	4620      	mov	r0, r4
 8001556:	2201      	movs	r2, #1
 8001558:	2104      	movs	r1, #4
 800155a:	f002 f9c5 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800155e:	462a      	mov	r2, r5
 8001560:	4620      	mov	r0, r4
 8001562:	2110      	movs	r1, #16
 8001564:	f88d 5007 	strb.w	r5, [sp, #7]
 8001568:	f002 f9be 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800156c:	462a      	mov	r2, r5
 800156e:	4620      	mov	r0, r4
 8001570:	2104      	movs	r1, #4
 8001572:	f002 f9b9 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001576:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800157a:	f10d 0107 	add.w	r1, sp, #7
 800157e:	2201      	movs	r2, #1
 8001580:	4630      	mov	r0, r6
 8001582:	f004 f8bf 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001586:	4620      	mov	r0, r4
 8001588:	2201      	movs	r2, #1
 800158a:	2104      	movs	r1, #4
 800158c:	f002 f9ac 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001590:	462a      	mov	r2, r5
 8001592:	4620      	mov	r0, r4
 8001594:	2110      	movs	r1, #16
 8001596:	f88d 8007 	strb.w	r8, [sp, #7]
 800159a:	f002 f9a5 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800159e:	462a      	mov	r2, r5
 80015a0:	4620      	mov	r0, r4
 80015a2:	2104      	movs	r1, #4
 80015a4:	f002 f9a0 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015ac:	f10d 0107 	add.w	r1, sp, #7
 80015b0:	2201      	movs	r2, #1
 80015b2:	4630      	mov	r0, r6
 80015b4:	f004 f8a6 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80015b8:	4620      	mov	r0, r4
 80015ba:	2201      	movs	r2, #1
 80015bc:	2104      	movs	r1, #4
 80015be:	f002 f993 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0x8D); writeCommand(0x14); // Charge pump ON
 80015c2:	238d      	movs	r3, #141	@ 0x8d
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80015c4:	462a      	mov	r2, r5
 80015c6:	4620      	mov	r0, r4
 80015c8:	2110      	movs	r1, #16
 80015ca:	f88d 3007 	strb.w	r3, [sp, #7]
 80015ce:	f002 f98b 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80015d2:	462a      	mov	r2, r5
 80015d4:	4620      	mov	r0, r4
 80015d6:	2104      	movs	r1, #4
 80015d8:	f002 f986 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015e0:	f10d 0107 	add.w	r1, sp, #7
 80015e4:	2201      	movs	r2, #1
 80015e6:	4630      	mov	r0, r6
 80015e8:	f004 f88c 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80015ec:	4620      	mov	r0, r4
 80015ee:	2201      	movs	r2, #1
 80015f0:	2104      	movs	r1, #4
 80015f2:	f002 f979 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0x8D); writeCommand(0x14); // Charge pump ON
 80015f6:	2314      	movs	r3, #20
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80015f8:	462a      	mov	r2, r5
 80015fa:	4620      	mov	r0, r4
 80015fc:	2110      	movs	r1, #16
 80015fe:	f88d 3007 	strb.w	r3, [sp, #7]
 8001602:	f002 f971 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001606:	462a      	mov	r2, r5
 8001608:	4620      	mov	r0, r4
 800160a:	2104      	movs	r1, #4
 800160c:	f002 f96c 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001610:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001614:	f10d 0107 	add.w	r1, sp, #7
 8001618:	2201      	movs	r2, #1
 800161a:	4630      	mov	r0, r6
 800161c:	f004 f872 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001620:	4620      	mov	r0, r4
 8001622:	2201      	movs	r2, #1
 8001624:	2104      	movs	r1, #4
 8001626:	f002 f95f 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0x20); writeCommand(0x00); // Horizontal addressing mode
 800162a:	2320      	movs	r3, #32
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800162c:	462a      	mov	r2, r5
 800162e:	4620      	mov	r0, r4
 8001630:	2110      	movs	r1, #16
 8001632:	f88d 3007 	strb.w	r3, [sp, #7]
 8001636:	f002 f957 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800163a:	462a      	mov	r2, r5
 800163c:	4620      	mov	r0, r4
 800163e:	2104      	movs	r1, #4
 8001640:	f002 f952 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001644:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001648:	f10d 0107 	add.w	r1, sp, #7
 800164c:	2201      	movs	r2, #1
 800164e:	4630      	mov	r0, r6
 8001650:	f004 f858 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001654:	4620      	mov	r0, r4
 8001656:	2201      	movs	r2, #1
 8001658:	2104      	movs	r1, #4
 800165a:	f002 f945 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800165e:	462a      	mov	r2, r5
 8001660:	4620      	mov	r0, r4
 8001662:	2110      	movs	r1, #16
 8001664:	f88d 5007 	strb.w	r5, [sp, #7]
 8001668:	f002 f93e 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800166c:	462a      	mov	r2, r5
 800166e:	4620      	mov	r0, r4
 8001670:	2104      	movs	r1, #4
 8001672:	f002 f939 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800167a:	f10d 0107 	add.w	r1, sp, #7
 800167e:	2201      	movs	r2, #1
 8001680:	4630      	mov	r0, r6
 8001682:	f004 f83f 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001686:	4620      	mov	r0, r4
 8001688:	2201      	movs	r2, #1
 800168a:	2104      	movs	r1, #4
 800168c:	f002 f92c 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0xA1); // Segment remap
 8001690:	23a1      	movs	r3, #161	@ 0xa1
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001692:	462a      	mov	r2, r5
 8001694:	4620      	mov	r0, r4
 8001696:	2110      	movs	r1, #16
 8001698:	f88d 3007 	strb.w	r3, [sp, #7]
 800169c:	f002 f924 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80016a0:	462a      	mov	r2, r5
 80016a2:	4620      	mov	r0, r4
 80016a4:	2104      	movs	r1, #4
 80016a6:	f002 f91f 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ae:	f10d 0107 	add.w	r1, sp, #7
 80016b2:	2201      	movs	r2, #1
 80016b4:	4630      	mov	r0, r6
 80016b6:	f004 f825 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80016ba:	4620      	mov	r0, r4
 80016bc:	2201      	movs	r2, #1
 80016be:	2104      	movs	r1, #4
 80016c0:	f002 f912 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0xC8); // COM scan direction remapped
 80016c4:	23c8      	movs	r3, #200	@ 0xc8
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80016c6:	462a      	mov	r2, r5
 80016c8:	4620      	mov	r0, r4
 80016ca:	2110      	movs	r1, #16
 80016cc:	f88d 3007 	strb.w	r3, [sp, #7]
 80016d0:	f002 f90a 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80016d4:	462a      	mov	r2, r5
 80016d6:	4620      	mov	r0, r4
 80016d8:	2104      	movs	r1, #4
 80016da:	f002 f905 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80016de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016e2:	f10d 0107 	add.w	r1, sp, #7
 80016e6:	2201      	movs	r2, #1
 80016e8:	4630      	mov	r0, r6
 80016ea:	f004 f80b 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80016ee:	4620      	mov	r0, r4
 80016f0:	2201      	movs	r2, #1
 80016f2:	2104      	movs	r1, #4
 80016f4:	f002 f8f8 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0xDA); writeCommand(0x12); // COM pins
 80016f8:	23da      	movs	r3, #218	@ 0xda
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80016fa:	462a      	mov	r2, r5
 80016fc:	4620      	mov	r0, r4
 80016fe:	2110      	movs	r1, #16
 8001700:	f88d 3007 	strb.w	r3, [sp, #7]
 8001704:	f002 f8f0 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001708:	462a      	mov	r2, r5
 800170a:	4620      	mov	r0, r4
 800170c:	2104      	movs	r1, #4
 800170e:	f002 f8eb 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001716:	f10d 0107 	add.w	r1, sp, #7
 800171a:	2201      	movs	r2, #1
 800171c:	4630      	mov	r0, r6
 800171e:	f003 fff1 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001722:	4620      	mov	r0, r4
 8001724:	2201      	movs	r2, #1
 8001726:	2104      	movs	r1, #4
 8001728:	f002 f8de 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0xDA); writeCommand(0x12); // COM pins
 800172c:	2312      	movs	r3, #18
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800172e:	462a      	mov	r2, r5
 8001730:	4620      	mov	r0, r4
 8001732:	2110      	movs	r1, #16
 8001734:	f88d 3007 	strb.w	r3, [sp, #7]
 8001738:	f002 f8d6 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800173c:	462a      	mov	r2, r5
 800173e:	4620      	mov	r0, r4
 8001740:	2104      	movs	r1, #4
 8001742:	f002 f8d1 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001746:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800174a:	f10d 0107 	add.w	r1, sp, #7
 800174e:	2201      	movs	r2, #1
 8001750:	4630      	mov	r0, r6
 8001752:	f003 ffd7 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001756:	4620      	mov	r0, r4
 8001758:	2201      	movs	r2, #1
 800175a:	2104      	movs	r1, #4
 800175c:	f002 f8c4 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0x81); writeCommand(0x01); // Contrast
 8001760:	2381      	movs	r3, #129	@ 0x81
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001762:	462a      	mov	r2, r5
 8001764:	4620      	mov	r0, r4
 8001766:	2110      	movs	r1, #16
 8001768:	f88d 3007 	strb.w	r3, [sp, #7]
 800176c:	f002 f8bc 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001770:	462a      	mov	r2, r5
 8001772:	4620      	mov	r0, r4
 8001774:	2104      	movs	r1, #4
 8001776:	f002 f8b7 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800177a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800177e:	f10d 0107 	add.w	r1, sp, #7
 8001782:	2201      	movs	r2, #1
 8001784:	4630      	mov	r0, r6
 8001786:	f003 ffbd 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 800178a:	4620      	mov	r0, r4
 800178c:	2201      	movs	r2, #1
 800178e:	2104      	movs	r1, #4
 8001790:	f002 f8aa 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001794:	462a      	mov	r2, r5
 8001796:	4620      	mov	r0, r4
 8001798:	2110      	movs	r1, #16
 800179a:	f88d 7007 	strb.w	r7, [sp, #7]
 800179e:	f002 f8a3 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80017a2:	462a      	mov	r2, r5
 80017a4:	4620      	mov	r0, r4
 80017a6:	2104      	movs	r1, #4
 80017a8:	f002 f89e 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017b0:	463a      	mov	r2, r7
 80017b2:	f10d 0107 	add.w	r1, sp, #7
 80017b6:	4630      	mov	r0, r6
 80017b8:	f003 ffa4 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80017bc:	463a      	mov	r2, r7
 80017be:	4620      	mov	r0, r4
 80017c0:	2104      	movs	r1, #4
 80017c2:	f002 f891 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0xD9); writeCommand(0xF1); // Precharge
 80017c6:	23d9      	movs	r3, #217	@ 0xd9
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80017c8:	462a      	mov	r2, r5
 80017ca:	4620      	mov	r0, r4
 80017cc:	2110      	movs	r1, #16
 80017ce:	f88d 3007 	strb.w	r3, [sp, #7]
 80017d2:	f002 f889 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80017d6:	462a      	mov	r2, r5
 80017d8:	4620      	mov	r0, r4
 80017da:	2104      	movs	r1, #4
 80017dc:	f002 f884 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017e4:	463a      	mov	r2, r7
 80017e6:	f10d 0107 	add.w	r1, sp, #7
 80017ea:	e003      	b.n	80017f4 <init+0x400>
 80017ec:	58020c00 	.word	0x58020c00
 80017f0:	240001e4 	.word	0x240001e4
 80017f4:	4630      	mov	r0, r6
 80017f6:	f003 ff85 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80017fa:	463a      	mov	r2, r7
 80017fc:	4620      	mov	r0, r4
 80017fe:	2104      	movs	r1, #4
 8001800:	f002 f872 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0xD9); writeCommand(0xF1); // Precharge
 8001804:	23f1      	movs	r3, #241	@ 0xf1
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001806:	462a      	mov	r2, r5
 8001808:	4620      	mov	r0, r4
 800180a:	2110      	movs	r1, #16
 800180c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001810:	f002 f86a 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001814:	462a      	mov	r2, r5
 8001816:	4620      	mov	r0, r4
 8001818:	2104      	movs	r1, #4
 800181a:	f002 f865 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800181e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001822:	463a      	mov	r2, r7
 8001824:	f10d 0107 	add.w	r1, sp, #7
 8001828:	4630      	mov	r0, r6
 800182a:	f003 ff6b 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 800182e:	463a      	mov	r2, r7
 8001830:	4620      	mov	r0, r4
 8001832:	2104      	movs	r1, #4
 8001834:	f002 f858 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0xDB); writeCommand(0x40); // VCOM deselect level
 8001838:	23db      	movs	r3, #219	@ 0xdb
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800183a:	462a      	mov	r2, r5
 800183c:	4620      	mov	r0, r4
 800183e:	2110      	movs	r1, #16
 8001840:	f88d 3007 	strb.w	r3, [sp, #7]
 8001844:	f002 f850 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001848:	462a      	mov	r2, r5
 800184a:	4620      	mov	r0, r4
 800184c:	2104      	movs	r1, #4
 800184e:	f002 f84b 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001852:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001856:	463a      	mov	r2, r7
 8001858:	f10d 0107 	add.w	r1, sp, #7
 800185c:	4630      	mov	r0, r6
 800185e:	f003 ff51 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001862:	463a      	mov	r2, r7
 8001864:	4620      	mov	r0, r4
 8001866:	2104      	movs	r1, #4
 8001868:	f002 f83e 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800186c:	462a      	mov	r2, r5
 800186e:	4620      	mov	r0, r4
 8001870:	2110      	movs	r1, #16
 8001872:	f88d 8007 	strb.w	r8, [sp, #7]
 8001876:	f002 f837 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800187a:	462a      	mov	r2, r5
 800187c:	4620      	mov	r0, r4
 800187e:	2104      	movs	r1, #4
 8001880:	f002 f832 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001884:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001888:	463a      	mov	r2, r7
 800188a:	f10d 0107 	add.w	r1, sp, #7
 800188e:	4630      	mov	r0, r6
 8001890:	f003 ff38 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001894:	463a      	mov	r2, r7
 8001896:	4620      	mov	r0, r4
 8001898:	2104      	movs	r1, #4
 800189a:	f002 f825 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0xA4); // Resume RAM content display
 800189e:	23a4      	movs	r3, #164	@ 0xa4
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80018a0:	462a      	mov	r2, r5
 80018a2:	4620      	mov	r0, r4
 80018a4:	2110      	movs	r1, #16
 80018a6:	f88d 3007 	strb.w	r3, [sp, #7]
 80018aa:	f002 f81d 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80018ae:	462a      	mov	r2, r5
 80018b0:	4620      	mov	r0, r4
 80018b2:	2104      	movs	r1, #4
 80018b4:	f002 f818 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018bc:	463a      	mov	r2, r7
 80018be:	f10d 0107 	add.w	r1, sp, #7
 80018c2:	4630      	mov	r0, r6
 80018c4:	f003 ff1e 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80018c8:	463a      	mov	r2, r7
 80018ca:	4620      	mov	r0, r4
 80018cc:	2104      	movs	r1, #4
 80018ce:	f002 f80b 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0xA6); // Normal display
 80018d2:	23a6      	movs	r3, #166	@ 0xa6
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80018d4:	462a      	mov	r2, r5
 80018d6:	4620      	mov	r0, r4
 80018d8:	2110      	movs	r1, #16
 80018da:	f88d 3007 	strb.w	r3, [sp, #7]
 80018de:	f002 f803 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80018e2:	462a      	mov	r2, r5
 80018e4:	4620      	mov	r0, r4
 80018e6:	2104      	movs	r1, #4
 80018e8:	f001 fffe 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018f0:	463a      	mov	r2, r7
 80018f2:	f10d 0107 	add.w	r1, sp, #7
 80018f6:	4630      	mov	r0, r6
 80018f8:	f003 ff04 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80018fc:	463a      	mov	r2, r7
 80018fe:	4620      	mov	r0, r4
 8001900:	2104      	movs	r1, #4
 8001902:	f001 fff1 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0x2E); // Deactivate scroll
 8001906:	232e      	movs	r3, #46	@ 0x2e
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001908:	462a      	mov	r2, r5
 800190a:	4620      	mov	r0, r4
 800190c:	2110      	movs	r1, #16
 800190e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001912:	f001 ffe9 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001916:	462a      	mov	r2, r5
 8001918:	4620      	mov	r0, r4
 800191a:	2104      	movs	r1, #4
 800191c:	f001 ffe4 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001924:	463a      	mov	r2, r7
 8001926:	f10d 0107 	add.w	r1, sp, #7
 800192a:	4630      	mov	r0, r6
 800192c:	f003 feea 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001930:	463a      	mov	r2, r7
 8001932:	4620      	mov	r0, r4
 8001934:	2104      	movs	r1, #4
 8001936:	f001 ffd7 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0xAF); // Display ON
 800193a:	23af      	movs	r3, #175	@ 0xaf
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800193c:	462a      	mov	r2, r5
 800193e:	4620      	mov	r0, r4
 8001940:	2110      	movs	r1, #16
 8001942:	f88d 3007 	strb.w	r3, [sp, #7]
 8001946:	f001 ffcf 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800194a:	462a      	mov	r2, r5
 800194c:	4620      	mov	r0, r4
 800194e:	2104      	movs	r1, #4
 8001950:	f001 ffca 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001954:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001958:	f10d 0107 	add.w	r1, sp, #7
 800195c:	463a      	mov	r2, r7
 800195e:	4630      	mov	r0, r6
 8001960:	f003 fed0 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001964:	463a      	mov	r2, r7
 8001966:	2104      	movs	r1, #4
 8001968:	4620      	mov	r0, r4
 800196a:	f001 ffbd 	bl	80038e8 <HAL_GPIO_WritePin>
}
 800196e:	b002      	add	sp, #8
 8001970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001974 <setContrast>:
{
 8001974:	b570      	push	{r4, r5, r6, lr}
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001976:	4c1c      	ldr	r4, [pc, #112]	@ (80019e8 <setContrast+0x74>)
{
 8001978:	b082      	sub	sp, #8
 800197a:	2381      	movs	r3, #129	@ 0x81
 800197c:	4605      	mov	r5, r0
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800197e:	4e1b      	ldr	r6, [pc, #108]	@ (80019ec <setContrast+0x78>)
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001980:	4620      	mov	r0, r4
 8001982:	2200      	movs	r2, #0
 8001984:	2110      	movs	r1, #16
 8001986:	f88d 3007 	strb.w	r3, [sp, #7]
 800198a:	f001 ffad 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800198e:	4620      	mov	r0, r4
 8001990:	2200      	movs	r2, #0
 8001992:	2104      	movs	r1, #4
 8001994:	f001 ffa8 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001998:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800199c:	f10d 0107 	add.w	r1, sp, #7
 80019a0:	2201      	movs	r2, #1
 80019a2:	4630      	mov	r0, r6
 80019a4:	f003 feae 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80019a8:	4620      	mov	r0, r4
 80019aa:	2201      	movs	r2, #1
 80019ac:	2104      	movs	r1, #4
 80019ae:	f001 ff9b 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80019b2:	4620      	mov	r0, r4
 80019b4:	2200      	movs	r2, #0
 80019b6:	2110      	movs	r1, #16
 80019b8:	f88d 5007 	strb.w	r5, [sp, #7]
 80019bc:	f001 ff94 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80019c0:	4620      	mov	r0, r4
 80019c2:	2200      	movs	r2, #0
 80019c4:	2104      	movs	r1, #4
 80019c6:	f001 ff8f 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ce:	f10d 0107 	add.w	r1, sp, #7
 80019d2:	2201      	movs	r2, #1
 80019d4:	4630      	mov	r0, r6
 80019d6:	f003 fe95 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80019da:	2201      	movs	r2, #1
 80019dc:	2104      	movs	r1, #4
 80019de:	4620      	mov	r0, r4
 80019e0:	f001 ff82 	bl	80038e8 <HAL_GPIO_WritePin>
}
 80019e4:	b002      	add	sp, #8
 80019e6:	bd70      	pop	{r4, r5, r6, pc}
 80019e8:	58020c00 	.word	0x58020c00
 80019ec:	240001e4 	.word	0x240001e4

080019f0 <drawBitmap>:
void drawBitmap(const uint8_t* bitmap, uint8_t width, uint8_t height, uint8_t x, uint8_t pageStart) {
    // SSD1309 uses PAGE addressing mode (default after init)
    // Each byte = 8 vertical pixels (MSB at top)

    uint16_t byteIndex = 0;
    uint8_t pagesNeeded = (height + 7) / 8; // Round up for partial pages
 80019f0:	3207      	adds	r2, #7
void drawBitmap(const uint8_t* bitmap, uint8_t width, uint8_t height, uint8_t x, uint8_t pageStart) {
 80019f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019f6:	469b      	mov	fp, r3
 80019f8:	b085      	sub	sp, #20
    uint8_t pagesNeeded = (height + 7) / 8; // Round up for partial pages
 80019fa:	08d3      	lsrs	r3, r2, #3

    for (uint8_t page = 0; page < pagesNeeded; page++) {
 80019fc:	08d2      	lsrs	r2, r2, #3
void drawBitmap(const uint8_t* bitmap, uint8_t width, uint8_t height, uint8_t x, uint8_t pageStart) {
 80019fe:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
    for (uint8_t page = 0; page < pagesNeeded; page++) {
 8001a02:	f000 80c2 	beq.w	8001b8a <drawBitmap+0x19a>
 8001a06:	4433      	add	r3, r6
 8001a08:	4682      	mov	sl, r0
 8001a0a:	4688      	mov	r8, r1
    uint16_t byteIndex = 0;
 8001a0c:	2700      	movs	r7, #0
 8001a0e:	b2db      	uxtb	r3, r3
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001a10:	4c5f      	ldr	r4, [pc, #380]	@ (8001b90 <drawBitmap+0x1a0>)
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001a12:	4d60      	ldr	r5, [pc, #384]	@ (8001b94 <drawBitmap+0x1a4>)
 8001a14:	9301      	str	r3, [sp, #4]
    writeCommand(0x21); // Set column address
 8001a16:	2321      	movs	r3, #33	@ 0x21
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2110      	movs	r1, #16
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f88d 300f 	strb.w	r3, [sp, #15]
 8001a22:	f001 ff61 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2104      	movs	r1, #4
 8001a2a:	4620      	mov	r0, r4
        setCursor(x, pageStart + page);

        // Send one full row (width bytes)
        writeData((uint8_t*)&bitmap[byteIndex], width);
 8001a2c:	eb0a 0907 	add.w	r9, sl, r7
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001a30:	f001 ff5a 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f10d 010f 	add.w	r1, sp, #15
 8001a3e:	4628      	mov	r0, r5
        byteIndex += width;
 8001a40:	4447      	add	r7, r8
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001a42:	f003 fe5f 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001a46:	2201      	movs	r2, #1
 8001a48:	2104      	movs	r1, #4
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f001 ff4c 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2110      	movs	r1, #16
 8001a54:	4620      	mov	r0, r4
 8001a56:	f88d b00f 	strb.w	fp, [sp, #15]
 8001a5a:	f001 ff45 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2104      	movs	r1, #4
 8001a62:	4620      	mov	r0, r4
        byteIndex += width;
 8001a64:	b2bf      	uxth	r7, r7
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001a66:	f001 ff3f 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f10d 010f 	add.w	r1, sp, #15
 8001a74:	4628      	mov	r0, r5
 8001a76:	f003 fe45 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f001 ff32 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(127);
 8001a84:	237f      	movs	r3, #127	@ 0x7f
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2110      	movs	r1, #16
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f88d 300f 	strb.w	r3, [sp, #15]
 8001a90:	f001 ff2a 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2104      	movs	r1, #4
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f001 ff25 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f10d 010f 	add.w	r1, sp, #15
 8001aa8:	4628      	mov	r0, r5
 8001aaa:	f003 fe2b 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f001 ff18 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(0x22); // Set page address
 8001ab8:	2322      	movs	r3, #34	@ 0x22
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2110      	movs	r1, #16
 8001abe:	4620      	mov	r0, r4
 8001ac0:	f88d 300f 	strb.w	r3, [sp, #15]
 8001ac4:	f001 ff10 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2104      	movs	r1, #4
 8001acc:	4620      	mov	r0, r4
 8001ace:	f001 ff0b 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f10d 010f 	add.w	r1, sp, #15
 8001adc:	4628      	mov	r0, r5
 8001ade:	f003 fe11 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f001 fefe 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2110      	movs	r1, #16
 8001af0:	4620      	mov	r0, r4
 8001af2:	f88d 600f 	strb.w	r6, [sp, #15]
 8001af6:	f001 fef7 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2104      	movs	r1, #4
 8001afe:	4620      	mov	r0, r4
    for (uint8_t page = 0; page < pagesNeeded; page++) {
 8001b00:	3601      	adds	r6, #1
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001b02:	f001 fef1 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f10d 010f 	add.w	r1, sp, #15
 8001b10:	4628      	mov	r0, r5
    for (uint8_t page = 0; page < pagesNeeded; page++) {
 8001b12:	b2f6      	uxtb	r6, r6
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001b14:	f003 fdf6 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f001 fee3 	bl	80038e8 <HAL_GPIO_WritePin>
    writeCommand(7);
 8001b22:	2307      	movs	r3, #7
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2110      	movs	r1, #16
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f88d 300f 	strb.w	r3, [sp, #15]
 8001b2e:	f001 fedb 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2104      	movs	r1, #4
 8001b36:	4620      	mov	r0, r4
 8001b38:	f001 fed6 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b40:	2201      	movs	r2, #1
 8001b42:	f10d 010f 	add.w	r1, sp, #15
 8001b46:	4628      	mov	r0, r5
 8001b48:	f003 fddc 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2104      	movs	r1, #4
 8001b50:	4620      	mov	r0, r4
 8001b52:	f001 fec9 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8001b56:	2201      	movs	r2, #1
 8001b58:	2110      	movs	r1, #16
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f001 fec4 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2104      	movs	r1, #4
 8001b64:	4620      	mov	r0, r4
 8001b66:	f001 febf 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b6e:	4642      	mov	r2, r8
 8001b70:	4649      	mov	r1, r9
 8001b72:	4628      	mov	r0, r5
 8001b74:	f003 fdc6 	bl	8005704 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2104      	movs	r1, #4
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f001 feb3 	bl	80038e8 <HAL_GPIO_WritePin>
    for (uint8_t page = 0; page < pagesNeeded; page++) {
 8001b82:	9b01      	ldr	r3, [sp, #4]
 8001b84:	42b3      	cmp	r3, r6
 8001b86:	f47f af46 	bne.w	8001a16 <drawBitmap+0x26>
    }
}
 8001b8a:	b005      	add	sp, #20
 8001b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b90:	58020c00 	.word	0x58020c00
 8001b94:	240001e4 	.word	0x240001e4

08001b98 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration - Simplified for stability
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b98:	b570      	push	{r4, r5, r6, lr}
 8001b9a:	b09c      	sub	sp, #112	@ 0x70
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9c:	224c      	movs	r2, #76	@ 0x4c
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	a809      	add	r0, sp, #36	@ 0x24
 8001ba2:	f003 ffad 	bl	8005b00 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	2100      	movs	r1, #0
 8001baa:	a801      	add	r0, sp, #4
 8001bac:	f003 ffa8 	bl	8005b00 <memset>

    // Configure the power supply
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001bb0:	2002      	movs	r0, #2
 8001bb2:	f001 fe9f 	bl	80038f4 <HAL_PWREx_ConfigSupply>
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0); // Need SCALE0 for 400 MHz
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	4b43      	ldr	r3, [pc, #268]	@ (8001cc8 <_Z18SystemClock_Configv+0x130>)
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001bc2:	619a      	str	r2, [r3, #24]
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8001bca:	9200      	str	r2, [sp, #0]
 8001bcc:	4a3f      	ldr	r2, [pc, #252]	@ (8001ccc <_Z18SystemClock_Configv+0x134>)
 8001bce:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bd0:	f041 0101 	orr.w	r1, r1, #1
 8001bd4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8001bd6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001bd8:	f002 0201 	and.w	r2, r2, #1
 8001bdc:	9200      	str	r2, [sp, #0]
 8001bde:	9a00      	ldr	r2, [sp, #0]
    while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	0495      	lsls	r5, r2, #18
 8001be4:	d5fc      	bpl.n	8001be0 <_Z18SystemClock_Configv+0x48>

    // Configure the main PLL (PLL1)
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE; // Using HSE for better accuracy
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001be6:	2001      	movs	r0, #1
 8001be8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLM = 5;                // HSE 25 MHz / 5 = 5 MHz
    RCC_OscInitStruct.PLL.PLLN = 160;              // 5 MHz * 160 = 800 MHz
 8001bec:	2405      	movs	r4, #5
 8001bee:	22a0      	movs	r2, #160	@ 0xa0
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bf0:	e9cd 0309 	strd	r0, r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLN = 160;              // 5 MHz * 160 = 800 MHz
 8001bf4:	e9cd 4214 	strd	r4, r2, [sp, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf8:	2302      	movs	r3, #2
    RCC_OscInitStruct.PLL.PLLP = 2;                // 800 MHz / 2 = 400 MHz for SYSCLK
    RCC_OscInitStruct.PLL.PLLQ = 4;                // 800 MHz / 4 = 200 MHz for peripherals
 8001bfa:	2404      	movs	r4, #4
    RCC_OscInitStruct.PLL.PLLR = 2;                // 800 MHz / 2 = 400 MHz for peripherals
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1; // 2-4 MHz input range
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE; // Wide VCO range
    RCC_OscInitStruct.PLL.PLLFRACN = 0;

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfc:	a809      	add	r0, sp, #36	@ 0x24
    RCC_OscInitStruct.PLL.PLLP = 2;                // 800 MHz / 2 = 400 MHz for SYSCLK
 8001bfe:	9316      	str	r3, [sp, #88]	@ 0x58
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1; // 2-4 MHz input range
 8001c00:	9419      	str	r4, [sp, #100]	@ 0x64
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c02:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;                // 800 MHz / 2 = 400 MHz for peripherals
 8001c06:	e9cd 4317 	strd	r4, r3, [sp, #92]	@ 0x5c
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE; // Wide VCO range
 8001c0a:	2300      	movs	r3, #0
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c0c:	e9cd 331a 	strd	r3, r3, [sp, #104]	@ 0x68
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c10:	f001 fe94 	bl	800393c <HAL_RCC_OscConfig>
 8001c14:	b108      	cbz	r0, 8001c1a <_Z18SystemClock_Configv+0x82>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c16:	b672      	cpsid	i
  * @retval None
  */
void Error_Handler(void)
{
    __disable_irq();
    while (1)
 8001c18:	e7fe      	b.n	8001c18 <_Z18SystemClock_Configv+0x80>
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1a:	223f      	movs	r2, #63	@ 0x3f
 8001c1c:	2303      	movs	r3, #3
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;   // APB3 at 100 MHz (200/2)
 8001c1e:	2108      	movs	r1, #8
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c20:	9003      	str	r0, [sp, #12]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c22:	a801      	add	r0, sp, #4
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c24:	e9cd 2301 	strd	r2, r3, [sp, #4]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;   // APB3 at 100 MHz (200/2)
 8001c28:	2340      	movs	r3, #64	@ 0x40
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;   // APB2 at 100 MHz (200/2)
 8001c2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;   // APB3 at 100 MHz (200/2)
 8001c2e:	e9cd 1304 	strd	r1, r3, [sp, #16]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c32:	4621      	mov	r1, r4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;   // APB1 at 100 MHz (200/2)
 8001c34:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;   // APB4 at 100 MHz (200/2)
 8001c36:	e9cd 2307 	strd	r2, r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c3a:	f002 f9c9 	bl	8003fd0 <HAL_RCC_ClockConfig>
 8001c3e:	b108      	cbz	r0, 8001c44 <_Z18SystemClock_Configv+0xac>
 8001c40:	b672      	cpsid	i
    while (1)
 8001c42:	e7fe      	b.n	8001c42 <_Z18SystemClock_Configv+0xaa>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001c44:	4b22      	ldr	r3, [pc, #136]	@ (8001cd0 <_Z18SystemClock_Configv+0x138>)
 8001c46:	695a      	ldr	r2, [r3, #20]
 8001c48:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8001c4c:	d111      	bne.n	8001c72 <_Z18SystemClock_Configv+0xda>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c52:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001c56:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001c5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c5e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001c68:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c6e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001c72:	4a17      	ldr	r2, [pc, #92]	@ (8001cd0 <_Z18SystemClock_Configv+0x138>)
 8001c74:	6953      	ldr	r3, [r2, #20]
 8001c76:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8001c7a:	d123      	bne.n	8001cc4 <_Z18SystemClock_Configv+0x12c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001c7c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001c80:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001c84:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c88:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c8c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c90:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001c94:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c96:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c9a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c9c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001ca0:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ca2:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8001ca6:	d2f9      	bcs.n	8001c9c <_Z18SystemClock_Configv+0x104>
    } while(sets-- != 0U);
 8001ca8:	3b20      	subs	r3, #32
 8001caa:	f113 0f20 	cmn.w	r3, #32
 8001cae:	d1f2      	bne.n	8001c96 <_Z18SystemClock_Configv+0xfe>
 8001cb0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001cb4:	6953      	ldr	r3, [r2, #20]
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cba:	6153      	str	r3, [r2, #20]
 8001cbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cc0:	f3bf 8f6f 	isb	sy
}
 8001cc4:	b01c      	add	sp, #112	@ 0x70
 8001cc6:	bd70      	pop	{r4, r5, r6, pc}
 8001cc8:	58024800 	.word	0x58024800
 8001ccc:	58000400 	.word	0x58000400
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <main>:
int main(void) {
 8001cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	2600      	movs	r6, #0
int main(void) {
 8001cda:	b091      	sub	sp, #68	@ 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cdc:	f8df 82b4 	ldr.w	r8, [pc, #692]	@ 8001f94 <main+0x2c0>
    HAL_Init();
 8001ce0:	f000 f9fa 	bl	80020d8 <HAL_Init>
    SystemClock_Config();
 8001ce4:	f7ff ff58 	bl	8001b98 <_Z18SystemClock_Configv>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cec:	271c      	movs	r7, #28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cee:	2505      	movs	r5, #5
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf0:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	a907      	add	r1, sp, #28
 8001cf4:	48a0      	ldr	r0, [pc, #640]	@ (8001f78 <main+0x2a4>)
    hspi1.Init.DataSize 				= SPI_DATASIZE_8BIT;
 8001cf6:	f44f 3a00 	mov.w	sl, #131072	@ 0x20000
    hspi1.Init.BaudRatePrescaler 		= SPI_BAUDRATEPRESCALER_32;
 8001cfa:	f04f 6b80 	mov.w	fp, #67108864	@ 0x4000000
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfe:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d02:	f8d8 30e0 	ldr.w	r3, [r8, #224]	@ 0xe0
 8001d06:	f043 0308 	orr.w	r3, r3, #8
 8001d0a:	f8c8 30e0 	str.w	r3, [r8, #224]	@ 0xe0
 8001d0e:	f8d8 30e0 	ldr.w	r3, [r8, #224]	@ 0xe0
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	9305      	str	r3, [sp, #20]
 8001d18:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	f8d8 30e0 	ldr.w	r3, [r8, #224]	@ 0xe0
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	f8c8 30e0 	str.w	r3, [r8, #224]	@ 0xe0
 8001d26:	f8d8 30e0 	ldr.w	r3, [r8, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d2a:	950b      	str	r5, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	9306      	str	r3, [sp, #24]
 8001d32:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	23a0      	movs	r3, #160	@ 0xa0
 8001d36:	e9cd 3907 	strd	r3, r9, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f001 fced 	bl	8003718 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d3e:	eb0d 0107 	add.w	r1, sp, r7
 8001d42:	488e      	ldr	r0, [pc, #568]	@ (8001f7c <main+0x2a8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d44:	e9cd 6909 	strd	r6, r9, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d4c:	f001 fce4 	bl	8003718 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);   // CS high (inactive)
 8001d50:	4622      	mov	r2, r4
 8001d52:	2104      	movs	r1, #4
 8001d54:	4889      	ldr	r0, [pc, #548]	@ (8001f7c <main+0x2a8>)
 8001d56:	f001 fdc7 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);   // RES high (not reset)
 8001d5a:	4622      	mov	r2, r4
 8001d5c:	2108      	movs	r1, #8
 8001d5e:	4887      	ldr	r0, [pc, #540]	@ (8001f7c <main+0x2a8>)
 8001d60:	f001 fdc2 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); // DC low (command mode)
 8001d64:	4632      	mov	r2, r6
 8001d66:	2110      	movs	r1, #16
 8001d68:	4884      	ldr	r0, [pc, #528]	@ (8001f7c <main+0x2a8>)
 8001d6a:	f001 fdbd 	bl	80038e8 <HAL_GPIO_WritePin>
    hspi1.Init.Mode 					= SPI_MODE_MASTER;
 8001d6e:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 8001f98 <main+0x2c4>
    hspi1.Instance 						= SPI1;
 8001d72:	4883      	ldr	r0, [pc, #524]	@ (8001f80 <main+0x2ac>)
    hspi1.Init.Mode 					= SPI_MODE_MASTER;
 8001d74:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
    hspi1.Init.BaudRatePrescaler 		= SPI_BAUDRATEPRESCALER_32;
 8001d78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
    hspi1.Init.FifoThreshold			= SPI_FIFO_THRESHOLD_01DATA;
 8001d7c:	63c6      	str	r6, [r0, #60]	@ 0x3c
    hspi1.Init.IOSwap 					= SPI_IO_SWAP_DISABLE;
 8001d7e:	6586      	str	r6, [r0, #88]	@ 0x58
    hspi1.Init.Mode 					= SPI_MODE_MASTER;
 8001d80:	e9c0 9300 	strd	r9, r3, [r0]
    hspi1.Init.DataSize 				= SPI_DATASIZE_8BIT;
 8001d84:	2307      	movs	r3, #7
    hspi1.Init.CLKPhase 				= SPI_PHASE_1EDGE;     // CPHA = 0
 8001d86:	e9c0 6604 	strd	r6, r6, [r0, #16]
    hspi1.Init.DataSize 				= SPI_DATASIZE_8BIT;
 8001d8a:	e9c0 a302 	strd	sl, r3, [r0, #8]
    hspi1.Init.BaudRatePrescaler 		= SPI_BAUDRATEPRESCALER_32;
 8001d8e:	e9c0 b206 	strd	fp, r2, [r0, #24]
    hspi1.Init.TIMode 					= SPI_TIMODE_DISABLE;
 8001d92:	e9c0 6608 	strd	r6, r6, [r0, #32]
    hspi1.Init.CRCPolynomial 			= 7;
 8001d96:	e9c0 630a 	strd	r6, r3, [r0, #40]	@ 0x28
    hspi1.Init.NSSPolarity 				= SPI_NSS_POLARITY_LOW;
 8001d9a:	e9c0 660d 	strd	r6, r6, [r0, #52]	@ 0x34
    hspi1.Init.MasterInterDataIdleness 	= SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d9e:	e9c0 6612 	strd	r6, r6, [r0, #72]	@ 0x48
    hspi1.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001da2:	e9c0 6614 	strd	r6, r6, [r0, #80]	@ 0x50
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001da6:	f003 fc09 	bl	80055bc <HAL_SPI_Init>
 8001daa:	4681      	mov	r9, r0
 8001dac:	b108      	cbz	r0, 8001db2 <main+0xde>
  __ASM volatile ("cpsid i" : : : "memory");
 8001dae:	b672      	cpsid	i
    while (1)
 8001db0:	e7fe      	b.n	8001db0 <main+0xdc>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001db2:	463a      	mov	r2, r7
 8001db4:	4601      	mov	r1, r0
 8001db6:	a807      	add	r0, sp, #28
  hadc1.Instance 					= ADC1;
 8001db8:	f8df a1e0 	ldr.w	sl, [pc, #480]	@ 8001f9c <main+0x2c8>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001dbc:	f003 fea0 	bl	8005b00 <memset>
  hadc1.Init.ClockPrescaler 		= ADC_CLOCK_ASYNC_DIV2; // Adjust depending on your ADC clock
 8001dc0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001dc4:	f8df e1d8 	ldr.w	lr, [pc, #472]	@ 8001fa0 <main+0x2cc>
  hadc1.Init.EOCSelection 			= ADC_EOC_SINGLE_CONV;
 8001dc8:	2604      	movs	r6, #4
  hadc1.Init.NbrOfConversion 		= 1;
 8001dca:	f8ca 4018 	str.w	r4, [sl, #24]
  hadc1.Init.LowPowerAutoWait 		= DISABLE;
 8001dce:	f44f 7780 	mov.w	r7, #256	@ 0x100
  hadc1.Init.EOCSelection 			= ADC_EOC_SINGLE_CONV;
 8001dd2:	f8ca 6010 	str.w	r6, [sl, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001dd6:	4650      	mov	r0, sl
  hadc1.Init.LowPowerAutoWait 		= DISABLE;
 8001dd8:	f8aa 7014 	strh.w	r7, [sl, #20]
  hadc1.Init.DiscontinuousConvMode  = DISABLE;
 8001ddc:	f88a 901c 	strb.w	r9, [sl, #28]
  hadc1.Init.OversamplingMode 		= DISABLE;
 8001de0:	f88a 9038 	strb.w	r9, [sl, #56]	@ 0x38
  hadc1.Init.ClockPrescaler 		= ADC_CLOCK_ASYNC_DIV2; // Adjust depending on your ADC clock
 8001de4:	e9ca e200 	strd	lr, r2, [sl]
  hadc1.Init.Overrun 				= ADC_OVR_DATA_OVERWRITTEN;
 8001de8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  hadc1.Init.ScanConvMode 			= DISABLE;
 8001dec:	e9ca 9902 	strd	r9, r9, [sl, #8]
  hadc1.Init.ExternalTrigConvEdge 	= ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001df0:	e9ca 9909 	strd	r9, r9, [sl, #36]	@ 0x24
  hadc1.Init.Overrun 				= ADC_OVR_DATA_OVERWRITTEN;
 8001df4:	f8ca 2030 	str.w	r2, [sl, #48]	@ 0x30
  __HAL_RCC_ADC12_CLK_ENABLE();
 8001df8:	f8d8 20d8 	ldr.w	r2, [r8, #216]	@ 0xd8
 8001dfc:	f042 0220 	orr.w	r2, r2, #32
 8001e00:	f8c8 20d8 	str.w	r2, [r8, #216]	@ 0xd8
 8001e04:	f8d8 20d8 	ldr.w	r2, [r8, #216]	@ 0xd8
 8001e08:	f002 0220 	and.w	r2, r2, #32
 8001e0c:	9204      	str	r2, [sp, #16]
 8001e0e:	9a04      	ldr	r2, [sp, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001e10:	f000 fd7a 	bl	8002908 <HAL_ADC_Init>
 8001e14:	b108      	cbz	r0, 8001e1a <main+0x146>
 8001e16:	b672      	cpsid	i
    while (1)
 8001e18:	e7fe      	b.n	8001e18 <main+0x144>
  sConfig.Rank   		= ADC_REGULAR_RANK_1;
 8001e1a:	2206      	movs	r2, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001e1c:	a907      	add	r1, sp, #28
  sConfig.Offset 		= 0;
 8001e1e:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001e20:	4650      	mov	r0, sl
  sConfig.Channel       = ADC_CHANNEL_0; // PA0
 8001e22:	9407      	str	r4, [sp, #28]
  sConfig.SamplingTime  = ADC_SAMPLETIME_64CYCLES_5;
 8001e24:	e9cd 2508 	strd	r2, r5, [sp, #32]
  sConfig.SingleDiff 	= ADC_SINGLE_ENDED;
 8001e28:	f240 72ff 	movw	r2, #2047	@ 0x7ff
  sConfig.OffsetNumber 	= ADC_OFFSET_NONE;
 8001e2c:	e9cd 260a 	strd	r2, r6, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001e30:	f000 f9fc 	bl	800222c <HAL_ADC_ConfigChannel>
 8001e34:	4601      	mov	r1, r0
 8001e36:	b108      	cbz	r0, 8001e3c <main+0x168>
 8001e38:	b672      	cpsid	i
    while (1)
 8001e3a:	e7fe      	b.n	8001e3a <main+0x166>
  DAC_ChannelConfTypeDef sConfig = {0};
 8001e3c:	2224      	movs	r2, #36	@ 0x24
 8001e3e:	a807      	add	r0, sp, #28
 8001e40:	f003 fe5e 	bl	8005b00 <memset>
  hdac1.Instance = DAC1;
 8001e44:	4d4f      	ldr	r5, [pc, #316]	@ (8001f84 <main+0x2b0>)
 8001e46:	4a50      	ldr	r2, [pc, #320]	@ (8001f88 <main+0x2b4>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8001e48:	4628      	mov	r0, r5
  hdac1.Instance = DAC1;
 8001e4a:	602a      	str	r2, [r5, #0]
  __HAL_RCC_DAC12_CLK_ENABLE();
 8001e4c:	f8d8 20e8 	ldr.w	r2, [r8, #232]	@ 0xe8
 8001e50:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001e54:	f8c8 20e8 	str.w	r2, [r8, #232]	@ 0xe8
 8001e58:	f8d8 20e8 	ldr.w	r2, [r8, #232]	@ 0xe8
 8001e5c:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8001e60:	9203      	str	r2, [sp, #12]
 8001e62:	9a03      	ldr	r2, [sp, #12]
  if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8001e64:	f000 ff09 	bl	8002c7a <HAL_DAC_Init>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	b108      	cbz	r0, 8001e70 <main+0x19c>
 8001e6c:	b672      	cpsid	i
    while (1)
 8001e6e:	e7fe      	b.n	8001e6e <main+0x19a>
  sConfig.DAC_Trigger 				  = DAC_TRIGGER_T6_TRGO; // Timer-driven or DAC_TRIGGER_NONE for software
 8001e70:	2116      	movs	r1, #22
  sConfig.DAC_SampleAndHold 		  = DAC_SAMPLEANDHOLD_DISABLE;
 8001e72:	9007      	str	r0, [sp, #28]
  sConfig.DAC_OutputBuffer 			  = DAC_OUTPUTBUFFER_ENABLE;
 8001e74:	e9cd 1008 	strd	r1, r0, [sp, #32]
  sConfig.DAC_UserTrimming 		      = DAC_TRIMMING_FACTORY;
 8001e78:	e9cd 400a 	strd	r4, r0, [sp, #40]	@ 0x28
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001e7c:	a907      	add	r1, sp, #28
 8001e7e:	4628      	mov	r0, r5
 8001e80:	f000 ff90 	bl	8002da4 <HAL_DAC_ConfigChannel>
 8001e84:	b108      	cbz	r0, 8001e8a <main+0x1b6>
 8001e86:	b672      	cpsid	i
    while (1)
 8001e88:	e7fe      	b.n	8001e88 <main+0x1b4>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e8a:	f8d8 20d8 	ldr.w	r2, [r8, #216]	@ 0xd8
  hdma_adc1.Init.Priority 			 = DMA_PRIORITY_HIGH;
 8001e8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
  hdma_adc1.Init.Request   			 = DMA_REQUEST_ADC1;
 8001e92:	2109      	movs	r1, #9
 8001e94:	f8df c10c 	ldr.w	ip, [pc, #268]	@ 8001fa4 <main+0x2d0>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e98:	f042 0201 	orr.w	r2, r2, #1
  hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e9c:	f44f 6b80 	mov.w	fp, #1024	@ 0x400
 8001ea0:	f44f 6900 	mov.w	r9, #2048	@ 0x800
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ea4:	f8c8 20d8 	str.w	r2, [r8, #216]	@ 0xd8
 8001ea8:	f8d8 20d8 	ldr.w	r2, [r8, #216]	@ 0xd8
  hdma_adc1.Init.MemDataAlignment 	 = DMA_MDATAALIGN_HALFWORD;
 8001eac:	f44f 5800 	mov.w	r8, #8192	@ 0x2000
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eb0:	f002 0201 	and.w	r2, r2, #1
 8001eb4:	9202      	str	r2, [sp, #8]
 8001eb6:	9a02      	ldr	r2, [sp, #8]
  hdma_adc1.Instance 	   			 = DMA1_Stream0;
 8001eb8:	4a34      	ldr	r2, [pc, #208]	@ (8001f8c <main+0x2b8>)
  hdma_adc1.Init.PeriphInc 			 = DMA_PINC_DISABLE;
 8001eba:	e9c2 0002 	strd	r0, r0, [r2, #8]
  hdma_adc1.Init.FIFOMode 			 = DMA_FIFOMODE_DISABLE;
 8001ebe:	e9c2 3008 	strd	r3, r0, [r2, #32]
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 8001ec2:	4610      	mov	r0, r2
  hdma_adc1.Init.Request   			 = DMA_REQUEST_ADC1;
 8001ec4:	e9c2 c100 	strd	ip, r1, [r2]
  hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ec8:	e9c2 b904 	strd	fp, r9, [r2, #16]
  hdma_adc1.Init.Mode 				 = DMA_CIRCULAR;
 8001ecc:	e9c2 8706 	strd	r8, r7, [r2, #24]
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 8001ed0:	f001 f99e 	bl	8003210 <HAL_DMA_Init>
 8001ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8001f8c <main+0x2b8>)
 8001ed6:	4601      	mov	r1, r0
 8001ed8:	b108      	cbz	r0, 8001ede <main+0x20a>
 8001eda:	b672      	cpsid	i
    while (1)
 8001edc:	e7fe      	b.n	8001edc <main+0x208>
  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 8001ede:	f8ca 204c 	str.w	r2, [sl, #76]	@ 0x4c
 8001ee2:	f8c2 a038 	str.w	sl, [r2, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	9001      	str	r0, [sp, #4]
 8001eea:	200b      	movs	r0, #11
 8001eec:	f000 fe26 	bl	8002b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ef0:	200b      	movs	r0, #11
 8001ef2:	f000 fe55 	bl	8002ba0 <HAL_NVIC_EnableIRQ>
  hdma_dac1.Instance 				 = DMA1_Stream5; // Pick an unused stream for DAC
 8001ef6:	f8df a0b0 	ldr.w	sl, [pc, #176]	@ 8001fa8 <main+0x2d4>
  hdma_dac1.Init.Request 			 = DMA_REQUEST_DAC1_CH1;
 8001efa:	4925      	ldr	r1, [pc, #148]	@ (8001f90 <main+0x2bc>)
 8001efc:	2343      	movs	r3, #67	@ 0x43
  if (HAL_DMA_Init(&hdma_dac1) != HAL_OK) {
 8001efe:	4650      	mov	r0, sl
  hdma_dac1.Init.Mode 				 = DMA_CIRCULAR;
 8001f00:	f8ca 701c 	str.w	r7, [sl, #28]
  hdma_dac1.Init.Request 			 = DMA_REQUEST_DAC1_CH1;
 8001f04:	e9ca 1300 	strd	r1, r3, [sl]
  hdma_dac1.Init.Direction 			 = DMA_MEMORY_TO_PERIPH;
 8001f08:	2340      	movs	r3, #64	@ 0x40
  hdma_dac1.Init.PeriphInc 		 	 = DMA_PINC_DISABLE;
 8001f0a:	9901      	ldr	r1, [sp, #4]
  hdma_dac1.Init.Direction 			 = DMA_MEMORY_TO_PERIPH;
 8001f0c:	f8ca 3008 	str.w	r3, [sl, #8]
  hdma_dac1.Init.Priority 			 = DMA_PRIORITY_MEDIUM;
 8001f10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  hdma_dac1.Init.MemInc 			 = DMA_MINC_ENABLE;
 8001f14:	e9ca 1b03 	strd	r1, fp, [sl, #12]
  hdma_dac1.Init.MemDataAlignment 	 = DMA_MDATAALIGN_HALFWORD;
 8001f18:	e9ca 9805 	strd	r9, r8, [sl, #20]
  hdma_dac1.Init.FIFOMode 			 = DMA_FIFOMODE_DISABLE;
 8001f1c:	e9ca 3108 	strd	r3, r1, [sl, #32]
  if (HAL_DMA_Init(&hdma_dac1) != HAL_OK) {
 8001f20:	f001 f976 	bl	8003210 <HAL_DMA_Init>
 8001f24:	4607      	mov	r7, r0
 8001f26:	b108      	cbz	r0, 8001f2c <main+0x258>
 8001f28:	b672      	cpsid	i
    while (1)
 8001f2a:	e7fe      	b.n	8001f2a <main+0x256>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4601      	mov	r1, r0
 8001f30:	2010      	movs	r0, #16
  __HAL_LINKDMA(&hdac1, DMA_Handle1, hdma_dac1);  // Channel 1
 8001f32:	f8c5 a008 	str.w	sl, [r5, #8]
 8001f36:	f8ca 5038 	str.w	r5, [sl, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f3a:	f000 fdff 	bl	8002b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f3e:	2010      	movs	r0, #16
 8001f40:	f000 fe2e 	bl	8002ba0 <HAL_NVIC_EnableIRQ>
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001f44:	4639      	mov	r1, r7
 8001f46:	2210      	movs	r2, #16
 8001f48:	a807      	add	r0, sp, #28
 8001f4a:	f003 fdd9 	bl	8005b00 <memset>
    HAL_MPU_Disable();
 8001f4e:	f000 fe49 	bl	8002be4 <HAL_MPU_Disable>
    MPU_InitStruct.DisableExec 		= MPU_INSTRUCTION_ACCESS_DISABLE;
 8001f52:	f248 721f 	movw	r2, #34591	@ 0x871f
 8001f56:	f240 1301 	movw	r3, #257	@ 0x101
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f5a:	a807      	add	r0, sp, #28
    MPU_InitStruct.Enable 			= MPU_REGION_ENABLE;
 8001f5c:	f8ad 401c 	strh.w	r4, [sp, #28]
    MPU_InitStruct.BaseAddress 		= 0x0;
 8001f60:	9708      	str	r7, [sp, #32]
    MPU_InitStruct.DisableExec 		= MPU_INSTRUCTION_ACCESS_DISABLE;
 8001f62:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f66:	f000 fe5b 	bl	8002c20 <HAL_MPU_ConfigRegion>
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001f6a:	4630      	mov	r0, r6
 8001f6c:	f000 fe48 	bl	8002c00 <HAL_MPU_Enable>
    mainApp();
 8001f70:	f000 f81e 	bl	8001fb0 <mainApp>
    while (1) { /* Should never reach this while */ asm("nop"); }
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <main+0x2a0>
 8001f78:	58020000 	.word	0x58020000
 8001f7c:	58020c00 	.word	0x58020c00
 8001f80:	240001e4 	.word	0x240001e4
 8001f84:	240000f4 	.word	0x240000f4
 8001f88:	40007400 	.word	0x40007400
 8001f8c:	24000108 	.word	0x24000108
 8001f90:	40020088 	.word	0x40020088
 8001f94:	58024400 	.word	0x58024400
 8001f98:	40013000 	.word	0x40013000
 8001f9c:	24000180 	.word	0x24000180
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	40020010 	.word	0x40020010
 8001fa8:	2400007c 	.word	0x2400007c

08001fac <Error_Handler>:
 8001fac:	b672      	cpsid	i
    while (1)
 8001fae:	e7fe      	b.n	8001fae <Error_Handler+0x2>

08001fb0 <mainApp>:

#define BUFFER_SIZE 1024
uint16_t adc_buf[BUFFER_SIZE];
uint16_t dac_buf[BUFFER_SIZE];
void mainApp(void)
{
 8001fb0:	b500      	push	{lr}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, BUFFER_SIZE);
 8001fb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
{
 8001fb6:	b083      	sub	sp, #12
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, BUFFER_SIZE);
 8001fb8:	4918      	ldr	r1, [pc, #96]	@ (800201c <mainApp+0x6c>)
 8001fba:	4819      	ldr	r0, [pc, #100]	@ (8002020 <mainApp+0x70>)
 8001fbc:	f000 fb86 	bl	80026cc <HAL_ADC_Start_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dac_buf, BUFFER_SIZE, DAC_ALIGN_12B_R);
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fc6:	4a17      	ldr	r2, [pc, #92]	@ (8002024 <mainApp+0x74>)
 8001fc8:	9100      	str	r1, [sp, #0]
 8001fca:	4817      	ldr	r0, [pc, #92]	@ (8002028 <mainApp+0x78>)
    Display::setContrast(0x01);
    Display::clear();

    while(1)
    {
    	Display::drawBitmap(bitmap1, 128, 64, 0, 0);
 8001fcc:	4d17      	ldr	r5, [pc, #92]	@ (800202c <mainApp+0x7c>)
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dac_buf, BUFFER_SIZE, DAC_ALIGN_12B_R);
 8001fce:	f000 fe67 	bl	8002ca0 <HAL_DAC_Start_DMA>
    Display::init();
 8001fd2:	f7ff fa0f 	bl	80013f4 <init>
    Display::setContrast(0x01);
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f7ff fccc 	bl	8001974 <setContrast>
    Display::clear();
 8001fdc:	f7ff f946 	bl	800126c <clear>
    	Display::drawBitmap(bitmap1, 128, 64, 0, 0);
 8001fe0:	2400      	movs	r4, #0
 8001fe2:	2240      	movs	r2, #64	@ 0x40
 8001fe4:	2180      	movs	r1, #128	@ 0x80
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	4623      	mov	r3, r4
 8001fea:	9400      	str	r4, [sp, #0]
 8001fec:	f7ff fd00 	bl	80019f0 <drawBitmap>
    	Display::setContrast(0x01);
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f7ff fcbf 	bl	8001974 <setContrast>
    	HAL_Delay(1000);
 8001ff6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ffa:	f000 f8ad 	bl	8002158 <HAL_Delay>
    	Display::drawBitmap(bitmap2, 128, 64, 0, 0);
 8001ffe:	2240      	movs	r2, #64	@ 0x40
 8002000:	4623      	mov	r3, r4
 8002002:	2180      	movs	r1, #128	@ 0x80
 8002004:	480a      	ldr	r0, [pc, #40]	@ (8002030 <mainApp+0x80>)
 8002006:	9400      	str	r4, [sp, #0]
 8002008:	f7ff fcf2 	bl	80019f0 <drawBitmap>
    	Display::setContrast(0x01);
 800200c:	2001      	movs	r0, #1
 800200e:	f7ff fcb1 	bl	8001974 <setContrast>
    	HAL_Delay(2000);
 8002012:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002016:	f000 f89f 	bl	8002158 <HAL_Delay>
    while(1)
 800201a:	e7e1      	b.n	8001fe0 <mainApp+0x30>
 800201c:	24000a6c 	.word	0x24000a6c
 8002020:	24000180 	.word	0x24000180
 8002024:	2400026c 	.word	0x2400026c
 8002028:	240000f4 	.word	0x240000f4
 800202c:	08007c30 	.word	0x08007c30
 8002030:	08005c30 	.word	0x08005c30

08002034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002034:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002070 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002038:	f003 fd56 	bl	8005ae8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800203c:	f003 fcf4 	bl	8005a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002040:	480c      	ldr	r0, [pc, #48]	@ (8002074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002042:	490d      	ldr	r1, [pc, #52]	@ (8002078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002044:	4a0d      	ldr	r2, [pc, #52]	@ (800207c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002048:	e002      	b.n	8002050 <LoopCopyDataInit>

0800204a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800204c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204e:	3304      	adds	r3, #4

08002050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002054:	d3f9      	bcc.n	800204a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002056:	4a0a      	ldr	r2, [pc, #40]	@ (8002080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002058:	4c0a      	ldr	r4, [pc, #40]	@ (8002084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800205c:	e001      	b.n	8002062 <LoopFillZerobss>

0800205e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002060:	3204      	adds	r2, #4

08002062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002064:	d3fb      	bcc.n	800205e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002066:	f003 fd59 	bl	8005b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800206a:	f7ff fe33 	bl	8001cd4 <main>
  bx  lr
 800206e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002070:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002074:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002078:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 800207c:	08009eec 	.word	0x08009eec
  ldr r2, =_sbss
 8002080:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8002084:	240013ac 	.word	0x240013ac

08002088 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002088:	e7fe      	b.n	8002088 <ADC3_IRQHandler>
	...

0800208c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800208c:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800208e:	4b0f      	ldr	r3, [pc, #60]	@ (80020cc <HAL_InitTick+0x40>)
{
 8002090:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	b90a      	cbnz	r2, 800209a <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8002096:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002098:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800209a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800209e:	fbb3 f3f2 	udiv	r3, r3, r2
 80020a2:	4a0b      	ldr	r2, [pc, #44]	@ (80020d0 <HAL_InitTick+0x44>)
 80020a4:	6810      	ldr	r0, [r2, #0]
 80020a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80020aa:	f000 fd87 	bl	8002bbc <HAL_SYSTICK_Config>
 80020ae:	4604      	mov	r4, r0
 80020b0:	2800      	cmp	r0, #0
 80020b2:	d1f0      	bne.n	8002096 <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b4:	2d0f      	cmp	r5, #15
 80020b6:	d8ee      	bhi.n	8002096 <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b8:	4602      	mov	r2, r0
 80020ba:	4629      	mov	r1, r5
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020c0:	f000 fd3c 	bl	8002b3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c4:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <HAL_InitTick+0x48>)
 80020c6:	4620      	mov	r0, r4
 80020c8:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 80020ca:	e7e5      	b.n	8002098 <HAL_InitTick+0xc>
 80020cc:	24000000 	.word	0x24000000
 80020d0:	2400000c 	.word	0x2400000c
 80020d4:	24000004 	.word	0x24000004

080020d8 <HAL_Init>:
{
 80020d8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020da:	2003      	movs	r0, #3
 80020dc:	f000 fd1c 	bl	8002b18 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020e0:	f001 fed4 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 80020e4:	490f      	ldr	r1, [pc, #60]	@ (8002124 <HAL_Init+0x4c>)
 80020e6:	4a10      	ldr	r2, [pc, #64]	@ (8002128 <HAL_Init+0x50>)
 80020e8:	698b      	ldr	r3, [r1, #24]
 80020ea:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020f6:	698b      	ldr	r3, [r1, #24]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	5cd3      	ldrb	r3, [r2, r3]
 80020fe:	4a0b      	ldr	r2, [pc, #44]	@ (800212c <HAL_Init+0x54>)
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	fa20 f303 	lsr.w	r3, r0, r3
 8002108:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800210a:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <HAL_Init+0x58>)
 800210c:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800210e:	200f      	movs	r0, #15
 8002110:	f7ff ffbc 	bl	800208c <HAL_InitTick>
 8002114:	4604      	mov	r4, r0
 8002116:	b918      	cbnz	r0, 8002120 <HAL_Init+0x48>
  HAL_MspInit();
 8002118:	f003 fc10 	bl	800593c <HAL_MspInit>
}
 800211c:	4620      	mov	r0, r4
 800211e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002120:	2401      	movs	r4, #1
 8002122:	e7fb      	b.n	800211c <HAL_Init+0x44>
 8002124:	58024400 	.word	0x58024400
 8002128:	08009c38 	.word	0x08009c38
 800212c:	24000008 	.word	0x24000008
 8002130:	2400000c 	.word	0x2400000c

08002134 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002134:	4a03      	ldr	r2, [pc, #12]	@ (8002144 <HAL_IncTick+0x10>)
 8002136:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <HAL_IncTick+0x14>)
 8002138:	6811      	ldr	r1, [r2, #0]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	440b      	add	r3, r1
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	2400126c 	.word	0x2400126c
 8002148:	24000000 	.word	0x24000000

0800214c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800214c:	4b01      	ldr	r3, [pc, #4]	@ (8002154 <HAL_GetTick+0x8>)
 800214e:	6818      	ldr	r0, [r3, #0]
}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	2400126c 	.word	0x2400126c

08002158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002158:	b538      	push	{r3, r4, r5, lr}
 800215a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff fff6 	bl	800214c <HAL_GetTick>
 8002160:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002162:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002164:	bf1e      	ittt	ne
 8002166:	4b04      	ldrne	r3, [pc, #16]	@ (8002178 <HAL_Delay+0x20>)
 8002168:	781b      	ldrbne	r3, [r3, #0]
 800216a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800216c:	f7ff ffee 	bl	800214c <HAL_GetTick>
 8002170:	1b43      	subs	r3, r0, r5
 8002172:	42a3      	cmp	r3, r4
 8002174:	d3fa      	bcc.n	800216c <HAL_Delay+0x14>
  {
  }
}
 8002176:	bd38      	pop	{r3, r4, r5, pc}
 8002178:	24000000 	.word	0x24000000

0800217c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800217c:	4b01      	ldr	r3, [pc, #4]	@ (8002184 <HAL_GetREVID+0x8>)
 800217e:	6818      	ldr	r0, [r3, #0]
}
 8002180:	0c00      	lsrs	r0, r0, #16
 8002182:	4770      	bx	lr
 8002184:	5c001000 	.word	0x5c001000

08002188 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002188:	6880      	ldr	r0, [r0, #8]
}
 800218a:	f000 0001 	and.w	r0, r0, #1
 800218e:	4770      	bx	lr

08002190 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002190:	6880      	ldr	r0, [r0, #8]
}
 8002192:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002196:	4770      	bx	lr

08002198 <HAL_ADC_MspInit>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 8002198:	4770      	bx	lr

0800219a <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 800219a:	4770      	bx	lr

0800219c <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 800219c:	4770      	bx	lr

0800219e <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800219e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80021a0:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021a2:	f7ff fffb 	bl	800219c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021a6:	bd08      	pop	{r3, pc}

080021a8 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80021a8:	4770      	bx	lr

080021aa <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021aa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80021ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021ae:	f012 0f50 	tst.w	r2, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
{
 80021b4:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80021b6:	d121      	bne.n	80021fc <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021bc:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	6811      	ldr	r1, [r2, #0]
 80021c2:	0708      	lsls	r0, r1, #28
 80021c4:	d516      	bpl.n	80021f4 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021c6:	68d1      	ldr	r1, [r2, #12]
 80021c8:	f411 6f40 	tst.w	r1, #3072	@ 0xc00
 80021cc:	d10e      	bne.n	80021ec <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80021ce:	68d2      	ldr	r2, [r2, #12]
 80021d0:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80021d4:	d10a      	bne.n	80021ec <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021dc:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021e0:	04d1      	lsls	r1, r2, #19
 80021e2:	d403      	bmi.n	80021ec <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ffd4 	bl	800219a <HAL_ADC_ConvCpltCallback>
}
 80021f2:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80021f4:	68d2      	ldr	r2, [r2, #12]
 80021f6:	f012 0f03 	tst.w	r2, #3
 80021fa:	e7eb      	b.n	80021d4 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021fc:	06d2      	lsls	r2, r2, #27
 80021fe:	d503      	bpl.n	8002208 <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ffd1 	bl	80021a8 <HAL_ADC_ErrorCallback>
 8002206:	e7f4      	b.n	80021f2 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800220a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800220e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002210:	4718      	bx	r3

08002212 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002212:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8002214:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002216:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800221c:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800221e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002226:	f7ff ffbf 	bl	80021a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800222a:	bd08      	pop	{r3, pc}

0800222c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 800222c:	2300      	movs	r3, #0
{
 800222e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8002230:	9301      	str	r3, [sp, #4]
{
 8002232:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8002234:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8002238:	2b01      	cmp	r3, #1
 800223a:	f000 81eb 	beq.w	8002614 <HAL_ADC_ConfigChannel+0x3e8>
 800223e:	2401      	movs	r4, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002240:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8002242:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ffa2 	bl	8002190 <LL_ADC_REG_IsConversionOngoing>
 800224c:	2800      	cmp	r0, #0
 800224e:	f040 81db 	bne.w	8002608 <HAL_ADC_ConfigChannel+0x3dc>
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002252:	680a      	ldr	r2, [r1, #0]
 8002254:	2a00      	cmp	r2, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002256:	ea4f 6092 	mov.w	r0, r2, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800225a:	db08      	blt.n	800226e <HAL_ADC_ConfigChannel+0x42>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800225c:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8002260:	2e00      	cmp	r6, #0
 8002262:	f040 80ba 	bne.w	80023da <HAL_ADC_ConfigChannel+0x1ae>
 8002266:	4084      	lsls	r4, r0
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	4322      	orrs	r2, r4
 800226c:	61da      	str	r2, [r3, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800226e:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002270:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
  MODIFY_REG(*preg,
 8002274:	271f      	movs	r7, #31
 8002276:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800227a:	09a6      	lsrs	r6, r4, #6
  MODIFY_REG(*preg,
 800227c:	f004 041f 	and.w	r4, r4, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002280:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8002284:	40a7      	lsls	r7, r4
 8002286:	40a0      	lsls	r0, r4
 8002288:	f85c 2006 	ldr.w	r2, [ip, r6]
 800228c:	ea22 0207 	bic.w	r2, r2, r7
 8002290:	4302      	orrs	r2, r0
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002292:	4618      	mov	r0, r3
 8002294:	f84c 2006 	str.w	r2, [ip, r6]
 8002298:	f7ff ff7a 	bl	8002190 <LL_ADC_REG_IsConversionOngoing>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	f002 0208 	and.w	r2, r2, #8
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022a2:	4302      	orrs	r2, r0
 80022a4:	d14d      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x116>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022a6:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022a8:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 80022ac:	2607      	movs	r6, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022ae:	0dc4      	lsrs	r4, r0, #23
  MODIFY_REG(*preg,
 80022b0:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022b4:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 80022b8:	4086      	lsls	r6, r0
 80022ba:	593a      	ldr	r2, [r7, r4]
 80022bc:	ea22 0206 	bic.w	r2, r2, r6
 80022c0:	688e      	ldr	r6, [r1, #8]
 80022c2:	4086      	lsls	r6, r0
 80022c4:	4332      	orrs	r2, r6
 80022c6:	513a      	str	r2, [r7, r4]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022c8:	4aac      	ldr	r2, [pc, #688]	@ (800257c <HAL_ADC_ConfigChannel+0x350>)
 80022ca:	6948      	ldr	r0, [r1, #20]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80022d2:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	f040 8088 	bne.w	80023ec <HAL_ADC_ConfigChannel+0x1c0>
 80022dc:	f3c2 0282 	ubfx	r2, r2, #2, #3
 80022e0:	0052      	lsls	r2, r2, #1
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022e2:	690f      	ldr	r7, [r1, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022e4:	4090      	lsls	r0, r2
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022e6:	680c      	ldr	r4, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022e8:	2f04      	cmp	r7, #4
 80022ea:	f000 8088 	beq.w	80023fe <HAL_ADC_ConfigChannel+0x1d2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ee:	f103 0660 	add.w	r6, r3, #96	@ 0x60
    MODIFY_REG(*preg,
 80022f2:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 80022f6:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 80022fa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80022fe:	4322      	orrs	r2, r4
 8002300:	4302      	orrs	r2, r0
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002302:	7e48      	ldrb	r0, [r1, #25]
 8002304:	f846 2027 	str.w	r2, [r6, r7, lsl #2]
 8002308:	1e47      	subs	r7, r0, #1
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800230a:	690c      	ldr	r4, [r1, #16]
 800230c:	4278      	negs	r0, r7
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800230e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002312:	4178      	adcs	r0, r7
 8002314:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002318:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
 800231c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002320:	7e0a      	ldrb	r2, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002322:	690c      	ldr	r4, [r1, #16]
 8002324:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 8002328:	6918      	ldr	r0, [r3, #16]
 800232a:	f004 041f 	and.w	r4, r4, #31
 800232e:	f1dc 0200 	rsbs	r2, ip, #0
 8002332:	f420 40f0 	bic.w	r0, r0, #30720	@ 0x7800
 8002336:	eb42 020c 	adc.w	r2, r2, ip
 800233a:	02d2      	lsls	r2, r2, #11
 800233c:	40a2      	lsls	r2, r4
 800233e:	4302      	orrs	r2, r0
 8002340:	611a      	str	r2, [r3, #16]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ff20 	bl	8002188 <LL_ADC_IsEnabled>
 8002348:	2800      	cmp	r0, #0
 800234a:	f040 80fc 	bne.w	8002546 <HAL_ADC_ConfigChannel+0x31a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800234e:	680c      	ldr	r4, [r1, #0]
 8002350:	68c8      	ldr	r0, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8002352:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002356:	f3c4 0113 	ubfx	r1, r4, #0, #20
 800235a:	f000 0618 	and.w	r6, r0, #24
 800235e:	ea22 0201 	bic.w	r2, r2, r1
 8002362:	4987      	ldr	r1, [pc, #540]	@ (8002580 <HAL_ADC_ConfigChannel+0x354>)
 8002364:	40f1      	lsrs	r1, r6
 8002366:	4021      	ands	r1, r4
 8002368:	430a      	orrs	r2, r1
 800236a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800236e:	4a85      	ldr	r2, [pc, #532]	@ (8002584 <HAL_ADC_ConfigChannel+0x358>)
 8002370:	4290      	cmp	r0, r2
 8002372:	f040 809e 	bne.w	80024b2 <HAL_ADC_ConfigChannel+0x286>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002376:	4a84      	ldr	r2, [pc, #528]	@ (8002588 <HAL_ADC_ConfigChannel+0x35c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d168      	bne.n	800244e <HAL_ADC_ConfigChannel+0x222>
 800237c:	4a83      	ldr	r2, [pc, #524]	@ (800258c <HAL_ADC_ConfigChannel+0x360>)
 800237e:	4294      	cmp	r4, r2
 8002380:	f000 80a9 	beq.w	80024d6 <HAL_ADC_ConfigChannel+0x2aa>
 8002384:	4a82      	ldr	r2, [pc, #520]	@ (8002590 <HAL_ADC_ConfigChannel+0x364>)
 8002386:	4294      	cmp	r4, r2
 8002388:	f000 80a7 	beq.w	80024da <HAL_ADC_ConfigChannel+0x2ae>
 800238c:	4a81      	ldr	r2, [pc, #516]	@ (8002594 <HAL_ADC_ConfigChannel+0x368>)
 800238e:	4294      	cmp	r4, r2
 8002390:	f000 80a5 	beq.w	80024de <HAL_ADC_ConfigChannel+0x2b2>
 8002394:	4a80      	ldr	r2, [pc, #512]	@ (8002598 <HAL_ADC_ConfigChannel+0x36c>)
 8002396:	4294      	cmp	r4, r2
 8002398:	f000 80a3 	beq.w	80024e2 <HAL_ADC_ConfigChannel+0x2b6>
 800239c:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 80023a0:	3210      	adds	r2, #16
 80023a2:	4294      	cmp	r4, r2
 80023a4:	f000 809f 	beq.w	80024e6 <HAL_ADC_ConfigChannel+0x2ba>
 80023a8:	4a7c      	ldr	r2, [pc, #496]	@ (800259c <HAL_ADC_ConfigChannel+0x370>)
 80023aa:	4294      	cmp	r4, r2
 80023ac:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 80023b0:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 80023b4:	d071      	beq.n	800249a <HAL_ADC_ConfigChannel+0x26e>
 80023b6:	4294      	cmp	r4, r2
 80023b8:	d06e      	beq.n	8002498 <HAL_ADC_ConfigChannel+0x26c>
 80023ba:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 80023be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023c2:	4294      	cmp	r4, r2
 80023c4:	d066      	beq.n	8002494 <HAL_ADC_ConfigChannel+0x268>
 80023c6:	4a76      	ldr	r2, [pc, #472]	@ (80025a0 <HAL_ADC_ConfigChannel+0x374>)
 80023c8:	4294      	cmp	r4, r2
 80023ca:	f000 8082 	beq.w	80024d2 <HAL_ADC_ConfigChannel+0x2a6>
 80023ce:	4a75      	ldr	r2, [pc, #468]	@ (80025a4 <HAL_ADC_ConfigChannel+0x378>)
 80023d0:	4294      	cmp	r4, r2
 80023d2:	f040 808c 	bne.w	80024ee <HAL_ADC_ConfigChannel+0x2c2>
 80023d6:	4a74      	ldr	r2, [pc, #464]	@ (80025a8 <HAL_ADC_ConfigChannel+0x37c>)
 80023d8:	e05f      	b.n	800249a <HAL_ADC_ConfigChannel+0x26e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80023de:	fab2 f282 	clz	r2, r2
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80023e2:	2401      	movs	r4, #1
 80023e4:	f002 021f 	and.w	r2, r2, #31
 80023e8:	4094      	lsls	r4, r2
 80023ea:	e73d      	b.n	8002268 <HAL_ADC_ConfigChannel+0x3c>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023ec:	f012 0f10 	tst.w	r2, #16
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	f43f af73 	beq.w	80022dc <HAL_ADC_ConfigChannel+0xb0>
 80023f6:	0852      	lsrs	r2, r2, #1
 80023f8:	f002 0208 	and.w	r2, r2, #8
 80023fc:	e771      	b.n	80022e2 <HAL_ADC_ConfigChannel+0xb6>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002400:	06a0      	lsls	r0, r4, #26
 8002402:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8002406:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800240a:	d103      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x1e8>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800240c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800240e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002412:	661a      	str	r2, [r3, #96]	@ 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002414:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002416:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800241a:	4290      	cmp	r0, r2
 800241c:	d103      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x1fa>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800241e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002420:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002424:	665a      	str	r2, [r3, #100]	@ 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002426:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002428:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800242c:	4290      	cmp	r0, r2
 800242e:	d103      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x20c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002430:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002432:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002436:	669a      	str	r2, [r3, #104]	@ 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002438:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800243a:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800243e:	4290      	cmp	r0, r2
 8002440:	f47f af7f 	bne.w	8002342 <HAL_ADC_ConfigChannel+0x116>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002444:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002446:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800244a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800244c:	e779      	b.n	8002342 <HAL_ADC_ConfigChannel+0x116>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800244e:	4a57      	ldr	r2, [pc, #348]	@ (80025ac <HAL_ADC_ConfigChannel+0x380>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d14c      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x2c2>
 8002454:	4a4d      	ldr	r2, [pc, #308]	@ (800258c <HAL_ADC_ConfigChannel+0x360>)
 8002456:	4294      	cmp	r4, r2
 8002458:	d03d      	beq.n	80024d6 <HAL_ADC_ConfigChannel+0x2aa>
 800245a:	4a4d      	ldr	r2, [pc, #308]	@ (8002590 <HAL_ADC_ConfigChannel+0x364>)
 800245c:	4294      	cmp	r4, r2
 800245e:	d03c      	beq.n	80024da <HAL_ADC_ConfigChannel+0x2ae>
 8002460:	4a4c      	ldr	r2, [pc, #304]	@ (8002594 <HAL_ADC_ConfigChannel+0x368>)
 8002462:	4294      	cmp	r4, r2
 8002464:	d03b      	beq.n	80024de <HAL_ADC_ConfigChannel+0x2b2>
 8002466:	4a4c      	ldr	r2, [pc, #304]	@ (8002598 <HAL_ADC_ConfigChannel+0x36c>)
 8002468:	4294      	cmp	r4, r2
 800246a:	d03a      	beq.n	80024e2 <HAL_ADC_ConfigChannel+0x2b6>
 800246c:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8002470:	3210      	adds	r2, #16
 8002472:	4294      	cmp	r4, r2
 8002474:	d037      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x2ba>
 8002476:	4a49      	ldr	r2, [pc, #292]	@ (800259c <HAL_ADC_ConfigChannel+0x370>)
 8002478:	4294      	cmp	r4, r2
 800247a:	d036      	beq.n	80024ea <HAL_ADC_ConfigChannel+0x2be>
 800247c:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 8002480:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 8002484:	4294      	cmp	r4, r2
 8002486:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 800248a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800248e:	d004      	beq.n	800249a <HAL_ADC_ConfigChannel+0x26e>
 8002490:	4294      	cmp	r4, r2
 8002492:	d19c      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x1a2>
 8002494:	4a46      	ldr	r2, [pc, #280]	@ (80025b0 <HAL_ADC_ConfigChannel+0x384>)
 8002496:	e000      	b.n	800249a <HAL_ADC_ConfigChannel+0x26e>
 8002498:	4a46      	ldr	r2, [pc, #280]	@ (80025b4 <HAL_ADC_ConfigChannel+0x388>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800249e:	fab2 f282 	clz	r2, r2
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80024a2:	2101      	movs	r1, #1
 80024a4:	f002 021f 	and.w	r2, r2, #31
 80024a8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ac:	69d9      	ldr	r1, [r3, #28]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	61da      	str	r2, [r3, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024b2:	2c00      	cmp	r4, #0
 80024b4:	da47      	bge.n	8002546 <HAL_ADC_ConfigChannel+0x31a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024b6:	4a34      	ldr	r2, [pc, #208]	@ (8002588 <HAL_ADC_ConfigChannel+0x35c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d11a      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x2c6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024bc:	f8d2 1308 	ldr.w	r1, [r2, #776]	@ 0x308
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024c0:	4831      	ldr	r0, [pc, #196]	@ (8002588 <HAL_ADC_ConfigChannel+0x35c>)
 80024c2:	f7ff fe61 	bl	8002188 <LL_ADC_IsEnabled>
 80024c6:	4602      	mov	r2, r0
 80024c8:	4838      	ldr	r0, [pc, #224]	@ (80025ac <HAL_ADC_ConfigChannel+0x380>)
 80024ca:	f7ff fe5d 	bl	8002188 <LL_ADC_IsEnabled>
 80024ce:	4310      	orrs	r0, r2
 80024d0:	e01a      	b.n	8002508 <HAL_ADC_ConfigChannel+0x2dc>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80024d2:	4a39      	ldr	r2, [pc, #228]	@ (80025b8 <HAL_ADC_ConfigChannel+0x38c>)
 80024d4:	e7e1      	b.n	800249a <HAL_ADC_ConfigChannel+0x26e>
 80024d6:	2201      	movs	r2, #1
 80024d8:	e7df      	b.n	800249a <HAL_ADC_ConfigChannel+0x26e>
 80024da:	4a38      	ldr	r2, [pc, #224]	@ (80025bc <HAL_ADC_ConfigChannel+0x390>)
 80024dc:	e7dd      	b.n	800249a <HAL_ADC_ConfigChannel+0x26e>
 80024de:	4a38      	ldr	r2, [pc, #224]	@ (80025c0 <HAL_ADC_ConfigChannel+0x394>)
 80024e0:	e7db      	b.n	800249a <HAL_ADC_ConfigChannel+0x26e>
 80024e2:	4a38      	ldr	r2, [pc, #224]	@ (80025c4 <HAL_ADC_ConfigChannel+0x398>)
 80024e4:	e7d9      	b.n	800249a <HAL_ADC_ConfigChannel+0x26e>
 80024e6:	4a38      	ldr	r2, [pc, #224]	@ (80025c8 <HAL_ADC_ConfigChannel+0x39c>)
 80024e8:	e7d7      	b.n	800249a <HAL_ADC_ConfigChannel+0x26e>
 80024ea:	4a38      	ldr	r2, [pc, #224]	@ (80025cc <HAL_ADC_ConfigChannel+0x3a0>)
 80024ec:	e7d5      	b.n	800249a <HAL_ADC_ConfigChannel+0x26e>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80024ee:	2201      	movs	r2, #1
 80024f0:	e7dc      	b.n	80024ac <HAL_ADC_ConfigChannel+0x280>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024f2:	4a2e      	ldr	r2, [pc, #184]	@ (80025ac <HAL_ADC_ConfigChannel+0x380>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d102      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x2d2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024f8:	f8d2 1208 	ldr.w	r1, [r2, #520]	@ 0x208
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024fc:	e7e0      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x294>
 80024fe:	4a34      	ldr	r2, [pc, #208]	@ (80025d0 <HAL_ADC_ConfigChannel+0x3a4>)
 8002500:	4834      	ldr	r0, [pc, #208]	@ (80025d4 <HAL_ADC_ConfigChannel+0x3a8>)
 8002502:	6891      	ldr	r1, [r2, #8]
 8002504:	f7ff fe40 	bl	8002188 <LL_ADC_IsEnabled>
 8002508:	2800      	cmp	r0, #0
 800250a:	d17d      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x3dc>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800250c:	4832      	ldr	r0, [pc, #200]	@ (80025d8 <HAL_ADC_ConfigChannel+0x3ac>)
 800250e:	f001 72e0 	and.w	r2, r1, #29360128	@ 0x1c00000
 8002512:	4284      	cmp	r4, r0
 8002514:	d120      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x32c>
 8002516:	020c      	lsls	r4, r1, #8
 8002518:	d415      	bmi.n	8002546 <HAL_ADC_ConfigChannel+0x31a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800251a:	492e      	ldr	r1, [pc, #184]	@ (80025d4 <HAL_ADC_ConfigChannel+0x3a8>)
 800251c:	428b      	cmp	r3, r1
 800251e:	d112      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x31a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002520:	f8d1 3308 	ldr.w	r3, [r1, #776]	@ 0x308
 8002524:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8002528:	4313      	orrs	r3, r2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800252a:	4a2c      	ldr	r2, [pc, #176]	@ (80025dc <HAL_ADC_ConfigChannel+0x3b0>)
 800252c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002530:	f8c1 3308 	str.w	r3, [r1, #776]	@ 0x308
 8002534:	4b2a      	ldr	r3, [pc, #168]	@ (80025e0 <HAL_ADC_ConfigChannel+0x3b4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	fbb3 f3f2 	udiv	r3, r3, r2
 800253c:	3301      	adds	r3, #1
 800253e:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 8002540:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8002542:	9b01      	ldr	r3, [sp, #4]
 8002544:	b92b      	cbnz	r3, 8002552 <HAL_ADC_ConfigChannel+0x326>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002546:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002548:	2300      	movs	r3, #0
 800254a:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
}
 800254e:	b003      	add	sp, #12
 8002550:	bdf0      	pop	{r4, r5, r6, r7, pc}
                wait_loop_index--;
 8002552:	9b01      	ldr	r3, [sp, #4]
 8002554:	3b01      	subs	r3, #1
 8002556:	e7f3      	b.n	8002540 <HAL_ADC_ConfigChannel+0x314>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002558:	4822      	ldr	r0, [pc, #136]	@ (80025e4 <HAL_ADC_ConfigChannel+0x3b8>)
 800255a:	4284      	cmp	r4, r0
 800255c:	d144      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x3bc>
 800255e:	01c8      	lsls	r0, r1, #7
 8002560:	d4f1      	bmi.n	8002546 <HAL_ADC_ConfigChannel+0x31a>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002562:	491c      	ldr	r1, [pc, #112]	@ (80025d4 <HAL_ADC_ConfigChannel+0x3a8>)
 8002564:	428b      	cmp	r3, r1
 8002566:	d1ee      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x31a>
 8002568:	f8d1 3308 	ldr.w	r3, [r1, #776]	@ 0x308
 800256c:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8002570:	4313      	orrs	r3, r2
 8002572:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002576:	f8c1 3308 	str.w	r3, [r1, #776]	@ 0x308
}
 800257a:	e7e4      	b.n	8002546 <HAL_ADC_ConfigChannel+0x31a>
 800257c:	5c001000 	.word	0x5c001000
 8002580:	000fffff 	.word	0x000fffff
 8002584:	47ff0000 	.word	0x47ff0000
 8002588:	40022000 	.word	0x40022000
 800258c:	04300002 	.word	0x04300002
 8002590:	08600004 	.word	0x08600004
 8002594:	0c900008 	.word	0x0c900008
 8002598:	10c00010 	.word	0x10c00010
 800259c:	2a000400 	.word	0x2a000400
 80025a0:	43210000 	.word	0x43210000
 80025a4:	4b840000 	.word	0x4b840000
 80025a8:	4fb80000 	.word	0x4fb80000
 80025ac:	40022100 	.word	0x40022100
 80025b0:	36902000 	.word	0x36902000
 80025b4:	32601000 	.word	0x32601000
 80025b8:	47520000 	.word	0x47520000
 80025bc:	19200040 	.word	0x19200040
 80025c0:	1d500080 	.word	0x1d500080
 80025c4:	21800100 	.word	0x21800100
 80025c8:	25b00200 	.word	0x25b00200
 80025cc:	2e300800 	.word	0x2e300800
 80025d0:	58026300 	.word	0x58026300
 80025d4:	58026000 	.word	0x58026000
 80025d8:	cb840000 	.word	0xcb840000
 80025dc:	00030d40 	.word	0x00030d40
 80025e0:	2400000c 	.word	0x2400000c
 80025e4:	c7520000 	.word	0xc7520000
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025e8:	480b      	ldr	r0, [pc, #44]	@ (8002618 <HAL_ADC_ConfigChannel+0x3ec>)
 80025ea:	4284      	cmp	r4, r0
 80025ec:	d1ab      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x31a>
 80025ee:	0249      	lsls	r1, r1, #9
 80025f0:	d4a9      	bmi.n	8002546 <HAL_ADC_ConfigChannel+0x31a>
            if (ADC_VREFINT_INSTANCE(hadc))
 80025f2:	490a      	ldr	r1, [pc, #40]	@ (800261c <HAL_ADC_ConfigChannel+0x3f0>)
 80025f4:	428b      	cmp	r3, r1
 80025f6:	d1a6      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x31a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025f8:	f8d1 3308 	ldr.w	r3, [r1, #776]	@ 0x308
 80025fc:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8002600:	4313      	orrs	r3, r2
 8002602:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002606:	e7b6      	b.n	8002576 <HAL_ADC_ConfigChannel+0x34a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002608:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
          tmp_hal_status = HAL_ERROR;
 800260a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800260c:	f043 0320 	orr.w	r3, r3, #32
 8002610:	656b      	str	r3, [r5, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8002612:	e799      	b.n	8002548 <HAL_ADC_ConfigChannel+0x31c>
  __HAL_LOCK(hadc);
 8002614:	2002      	movs	r0, #2
 8002616:	e79a      	b.n	800254e <HAL_ADC_ConfigChannel+0x322>
 8002618:	cfb80000 	.word	0xcfb80000
 800261c:	58026000 	.word	0x58026000

08002620 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002620:	6802      	ldr	r2, [r0, #0]
{
 8002622:	b570      	push	{r4, r5, r6, lr}
 8002624:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002626:	4610      	mov	r0, r2
 8002628:	f7ff fdae 	bl	8002188 <LL_ADC_IsEnabled>
 800262c:	b108      	cbz	r0, 8002632 <ADC_Enable+0x12>
  return HAL_OK;
 800262e:	2000      	movs	r0, #0
}
 8002630:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002632:	6891      	ldr	r1, [r2, #8]
 8002634:	4b20      	ldr	r3, [pc, #128]	@ (80026b8 <ADC_Enable+0x98>)
 8002636:	4219      	tst	r1, r3
 8002638:	d009      	beq.n	800264e <ADC_Enable+0x2e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 800263c:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263e:	f043 0310 	orr.w	r3, r3, #16
 8002642:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002644:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	65a3      	str	r3, [r4, #88]	@ 0x58
            return HAL_ERROR;
 800264c:	e7f0      	b.n	8002630 <ADC_Enable+0x10>
  MODIFY_REG(ADCx->CR,
 800264e:	6893      	ldr	r3, [r2, #8]
 8002650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002654:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800265e:	f7ff fd75 	bl	800214c <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	4a15      	ldr	r2, [pc, #84]	@ (80026bc <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8002666:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002668:	4293      	cmp	r3, r2
 800266a:	d00c      	beq.n	8002686 <ADC_Enable+0x66>
 800266c:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002670:	4293      	cmp	r3, r2
 8002672:	d002      	beq.n	800267a <ADC_Enable+0x5a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002674:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <ADC_Enable+0xa0>)
 8002676:	689b      	ldr	r3, [r3, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002678:	e003      	b.n	8002682 <ADC_Enable+0x62>
 800267a:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <ADC_Enable+0xa4>)
 800267c:	689b      	ldr	r3, [r3, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800267e:	06d9      	lsls	r1, r3, #27
 8002680:	d1d5      	bne.n	800262e <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 8002682:	4e11      	ldr	r6, [pc, #68]	@ (80026c8 <ADC_Enable+0xa8>)
 8002684:	e013      	b.n	80026ae <ADC_Enable+0x8e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002686:	4b0f      	ldr	r3, [pc, #60]	@ (80026c4 <ADC_Enable+0xa4>)
 8002688:	e7f5      	b.n	8002676 <ADC_Enable+0x56>
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800268a:	4610      	mov	r0, r2
 800268c:	f7ff fd7c 	bl	8002188 <LL_ADC_IsEnabled>
 8002690:	b920      	cbnz	r0, 800269c <ADC_Enable+0x7c>
  MODIFY_REG(ADCx->CR,
 8002692:	6893      	ldr	r3, [r2, #8]
 8002694:	4033      	ands	r3, r6
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800269c:	f7ff fd56 	bl	800214c <HAL_GetTick>
 80026a0:	1b40      	subs	r0, r0, r5
 80026a2:	2802      	cmp	r0, #2
 80026a4:	d903      	bls.n	80026ae <ADC_Enable+0x8e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	07da      	lsls	r2, r3, #31
 80026ac:	d5c5      	bpl.n	800263a <ADC_Enable+0x1a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ae:	6822      	ldr	r2, [r4, #0]
 80026b0:	6813      	ldr	r3, [r2, #0]
 80026b2:	07db      	lsls	r3, r3, #31
 80026b4:	d5e9      	bpl.n	800268a <ADC_Enable+0x6a>
 80026b6:	e7ba      	b.n	800262e <ADC_Enable+0xe>
 80026b8:	8000003f 	.word	0x8000003f
 80026bc:	40022000 	.word	0x40022000
 80026c0:	58026300 	.word	0x58026300
 80026c4:	40022300 	.word	0x40022300
 80026c8:	7fffffc0 	.word	0x7fffffc0

080026cc <HAL_ADC_Start_DMA>:
{
 80026cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026d0:	4b3b      	ldr	r3, [pc, #236]	@ (80027c0 <HAL_ADC_Start_DMA+0xf4>)
{
 80026d2:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026d4:	6800      	ldr	r0, [r0, #0]
{
 80026d6:	460e      	mov	r6, r1
 80026d8:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026da:	4298      	cmp	r0, r3
 80026dc:	d066      	beq.n	80027ac <HAL_ADC_Start_DMA+0xe0>
 80026de:	4939      	ldr	r1, [pc, #228]	@ (80027c4 <HAL_ADC_Start_DMA+0xf8>)
 80026e0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80026e4:	4a38      	ldr	r2, [pc, #224]	@ (80027c8 <HAL_ADC_Start_DMA+0xfc>)
 80026e6:	4288      	cmp	r0, r1
 80026e8:	bf18      	it	ne
 80026ea:	4613      	movne	r3, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026ec:	689b      	ldr	r3, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ee:	f7ff fd4f 	bl	8002190 <LL_ADC_REG_IsConversionOngoing>
 80026f2:	4605      	mov	r5, r0
 80026f4:	2800      	cmp	r0, #0
 80026f6:	d161      	bne.n	80027bc <HAL_ADC_Start_DMA+0xf0>
    __HAL_LOCK(hadc);
 80026f8:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 80026fc:	2a01      	cmp	r2, #1
 80026fe:	d05d      	beq.n	80027bc <HAL_ADC_Start_DMA+0xf0>
 8002700:	f003 081f 	and.w	r8, r3, #31
 8002704:	f240 2321 	movw	r3, #545	@ 0x221
 8002708:	2001      	movs	r0, #1
 800270a:	fa23 f308 	lsr.w	r3, r3, r8
 800270e:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002712:	4003      	ands	r3, r0
 8002714:	d04f      	beq.n	80027b6 <HAL_ADC_Start_DMA+0xea>
      tmp_hal_status = ADC_Enable(hadc);
 8002716:	4620      	mov	r0, r4
 8002718:	f7ff ff82 	bl	8002620 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800271c:	2800      	cmp	r0, #0
 800271e:	d147      	bne.n	80027b0 <HAL_ADC_Start_DMA+0xe4>
        ADC_STATE_CLR_SET(hadc->State,
 8002720:	6d60      	ldr	r0, [r4, #84]	@ 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002722:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8002724:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002728:	4b26      	ldr	r3, [pc, #152]	@ (80027c4 <HAL_ADC_Start_DMA+0xf8>)
        ADC_STATE_CLR_SET(hadc->State,
 800272a:	f020 0001 	bic.w	r0, r0, #1
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800272e:	4299      	cmp	r1, r3
        ADC_STATE_CLR_SET(hadc->State,
 8002730:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8002734:	6560      	str	r0, [r4, #84]	@ 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002736:	d102      	bne.n	800273e <HAL_ADC_Start_DMA+0x72>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002738:	f1b8 0f00 	cmp.w	r8, #0
 800273c:	d103      	bne.n	8002746 <HAL_ADC_Start_DMA+0x7a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800273e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002740:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002744:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002746:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002748:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800274c:	d002      	beq.n	8002754 <HAL_ADC_Start_DMA+0x88>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800274e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002750:	f023 0306 	bic.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8002754:	65a3      	str	r3, [r4, #88]	@ 0x58
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002756:	3140      	adds	r1, #64	@ 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002758:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800275a:	4b1c      	ldr	r3, [pc, #112]	@ (80027cc <HAL_ADC_Start_DMA+0x100>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800275c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800275e:	63c3      	str	r3, [r0, #60]	@ 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002760:	4b1b      	ldr	r3, [pc, #108]	@ (80027d0 <HAL_ADC_Start_DMA+0x104>)
 8002762:	6403      	str	r3, [r0, #64]	@ 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002764:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <HAL_ADC_Start_DMA+0x108>)
 8002766:	64c3      	str	r3, [r0, #76]	@ 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002768:	231c      	movs	r3, #28
 800276a:	f841 3c40 	str.w	r3, [r1, #-64]
        __HAL_UNLOCK(hadc);
 800276e:	2300      	movs	r3, #0
 8002770:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002774:	f851 3c3c 	ldr.w	r3, [r1, #-60]
 8002778:	f043 0310 	orr.w	r3, r3, #16
 800277c:	f841 3c3c 	str.w	r3, [r1, #-60]
 8002780:	f851 3c34 	ldr.w	r3, [r1, #-52]
 8002784:	f023 0303 	bic.w	r3, r3, #3
 8002788:	4313      	orrs	r3, r2
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800278a:	4632      	mov	r2, r6
 800278c:	f841 3c34 	str.w	r3, [r1, #-52]
 8002790:	463b      	mov	r3, r7
 8002792:	f000 fed5 	bl	8003540 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002796:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002798:	6893      	ldr	r3, [r2, #8]
 800279a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800279e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027a2:	f043 0304 	orr.w	r3, r3, #4
 80027a6:	6093      	str	r3, [r2, #8]
}
 80027a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027ac:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <HAL_ADC_Start_DMA+0x10c>)
 80027ae:	e79d      	b.n	80026ec <HAL_ADC_Start_DMA+0x20>
        __HAL_UNLOCK(hadc);
 80027b0:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 80027b4:	e7f8      	b.n	80027a8 <HAL_ADC_Start_DMA+0xdc>
      __HAL_UNLOCK(hadc);
 80027b6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 80027ba:	e7f5      	b.n	80027a8 <HAL_ADC_Start_DMA+0xdc>
    __HAL_LOCK(hadc);
 80027bc:	2002      	movs	r0, #2
 80027be:	e7f3      	b.n	80027a8 <HAL_ADC_Start_DMA+0xdc>
 80027c0:	40022000 	.word	0x40022000
 80027c4:	40022100 	.word	0x40022100
 80027c8:	58026300 	.word	0x58026300
 80027cc:	080021ab 	.word	0x080021ab
 80027d0:	0800219f 	.word	0x0800219f
 80027d4:	08002213 	.word	0x08002213
 80027d8:	40022300 	.word	0x40022300

080027dc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80027dc:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80027de:	4a43      	ldr	r2, [pc, #268]	@ (80028ec <ADC_ConfigureBoostMode+0x110>)
{
 80027e0:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80027e2:	6803      	ldr	r3, [r0, #0]
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d003      	beq.n	80027f0 <ADC_ConfigureBoostMode+0x14>
 80027e8:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d125      	bne.n	800283c <ADC_ConfigureBoostMode+0x60>
 80027f0:	4b3f      	ldr	r3, [pc, #252]	@ (80028f0 <ADC_ConfigureBoostMode+0x114>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80027f8:	bf14      	ite	ne
 80027fa:	2301      	movne	r3, #1
 80027fc:	2300      	moveq	r3, #0
 80027fe:	b9fb      	cbnz	r3, 8002840 <ADC_ConfigureBoostMode+0x64>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002800:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002804:	2100      	movs	r1, #0
 8002806:	f002 fd1f 	bl	8005248 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800280a:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800280c:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 800280e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002812:	d04a      	beq.n	80028aa <ADC_ConfigureBoostMode+0xce>
 8002814:	d83f      	bhi.n	8002896 <ADC_ConfigureBoostMode+0xba>
 8002816:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800281a:	d044      	beq.n	80028a6 <ADC_ConfigureBoostMode+0xca>
 800281c:	d836      	bhi.n	800288c <ADC_ConfigureBoostMode+0xb0>
 800281e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002822:	d008      	beq.n	8002836 <ADC_ConfigureBoostMode+0x5a>
 8002824:	d82c      	bhi.n	8002880 <ADC_ConfigureBoostMode+0xa4>
 8002826:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800282a:	d004      	beq.n	8002836 <ADC_ConfigureBoostMode+0x5a>
 800282c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002830:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002834:	d116      	bne.n	8002864 <ADC_ConfigureBoostMode+0x88>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002836:	0c9b      	lsrs	r3, r3, #18
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	e00f      	b.n	800285c <ADC_ConfigureBoostMode+0x80>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800283c:	4b2d      	ldr	r3, [pc, #180]	@ (80028f4 <ADC_ConfigureBoostMode+0x118>)
 800283e:	e7d8      	b.n	80027f2 <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 8002840:	f001 fcec 	bl	800421c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002844:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8002846:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8002848:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800284c:	d005      	beq.n	800285a <ADC_ConfigureBoostMode+0x7e>
 800284e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002852:	d006      	beq.n	8002862 <ADC_ConfigureBoostMode+0x86>
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002858:	d104      	bne.n	8002864 <ADC_ConfigureBoostMode+0x88>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800285a:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800285c:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8002860:	e000      	b.n	8002864 <ADC_ConfigureBoostMode+0x88>
        freq /= 4UL;
 8002862:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002864:	f7ff fc8a 	bl	800217c <HAL_GetREVID>
 8002868:	f241 0303 	movw	r3, #4099	@ 0x1003
 800286c:	4298      	cmp	r0, r3
 800286e:	682b      	ldr	r3, [r5, #0]
 8002870:	d823      	bhi.n	80028ba <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8002872:	4a21      	ldr	r2, [pc, #132]	@ (80028f8 <ADC_ConfigureBoostMode+0x11c>)
 8002874:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002876:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 8002878:	d91b      	bls.n	80028b2 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800287a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800287e:	e01a      	b.n	80028b6 <ADC_ConfigureBoostMode+0xda>
    switch (hadc->Init.ClockPrescaler)
 8002880:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002884:	d0d7      	beq.n	8002836 <ADC_ConfigureBoostMode+0x5a>
 8002886:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800288a:	e7d3      	b.n	8002834 <ADC_ConfigureBoostMode+0x58>
 800288c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002890:	d1e8      	bne.n	8002864 <ADC_ConfigureBoostMode+0x88>
        freq /= 32UL;
 8002892:	0944      	lsrs	r4, r0, #5
        break;
 8002894:	e7e6      	b.n	8002864 <ADC_ConfigureBoostMode+0x88>
    switch (hadc->Init.ClockPrescaler)
 8002896:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800289a:	d008      	beq.n	80028ae <ADC_ConfigureBoostMode+0xd2>
 800289c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80028a0:	d1e0      	bne.n	8002864 <ADC_ConfigureBoostMode+0x88>
        freq /= 256UL;
 80028a2:	0a04      	lsrs	r4, r0, #8
        break;
 80028a4:	e7de      	b.n	8002864 <ADC_ConfigureBoostMode+0x88>
        freq /= 16UL;
 80028a6:	0904      	lsrs	r4, r0, #4
        break;
 80028a8:	e7dc      	b.n	8002864 <ADC_ConfigureBoostMode+0x88>
        freq /= 64UL;
 80028aa:	0984      	lsrs	r4, r0, #6
        break;
 80028ac:	e7da      	b.n	8002864 <ADC_ConfigureBoostMode+0x88>
        freq /= 128UL;
 80028ae:	09c4      	lsrs	r4, r0, #7
        break;
 80028b0:	e7d8      	b.n	8002864 <ADC_ConfigureBoostMode+0x88>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80028b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80028b6:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80028b8:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 80028ba:	4a10      	ldr	r2, [pc, #64]	@ (80028fc <ADC_ConfigureBoostMode+0x120>)
 80028bc:	4294      	cmp	r4, r2
 80028be:	d803      	bhi.n	80028c8 <ADC_ConfigureBoostMode+0xec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80028c6:	e7f6      	b.n	80028b6 <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 80028c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002900 <ADC_ConfigureBoostMode+0x124>)
 80028ca:	4294      	cmp	r4, r2
 80028cc:	d803      	bhi.n	80028d6 <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80028d4:	e7d1      	b.n	800287a <ADC_ConfigureBoostMode+0x9e>
    else if (freq <= 25000000UL)
 80028d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002904 <ADC_ConfigureBoostMode+0x128>)
 80028d8:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	bf96      	itet	ls
 80028de:	f422 7240 	bicls.w	r2, r2, #768	@ 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80028e2:	f442 7240 	orrhi.w	r2, r2, #768	@ 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80028e6:	f442 7200 	orrls.w	r2, r2, #512	@ 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80028ea:	e7e4      	b.n	80028b6 <ADC_ConfigureBoostMode+0xda>
 80028ec:	40022000 	.word	0x40022000
 80028f0:	40022300 	.word	0x40022300
 80028f4:	58026300 	.word	0x58026300
 80028f8:	01312d00 	.word	0x01312d00
 80028fc:	00bebc21 	.word	0x00bebc21
 8002900:	017d7841 	.word	0x017d7841
 8002904:	02faf081 	.word	0x02faf081

08002908 <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 8002908:	2300      	movs	r3, #0
{
 800290a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (hadc == NULL)
 800290c:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800290e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8002910:	2800      	cmp	r0, #0
 8002912:	f000 80bb 	beq.w	8002a8c <HAL_ADC_Init+0x184>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002916:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8002918:	b925      	cbnz	r5, 8002924 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 800291a:	f7ff fc3d 	bl	8002198 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800291e:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002920:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002924:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	0090      	lsls	r0, r2, #2
 800292a:	d505      	bpl.n	8002938 <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 8002932:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002936:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	00d1      	lsls	r1, r2, #3
 800293c:	f140 808a 	bpl.w	8002a54 <HAL_ADC_Init+0x14c>
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	00d2      	lsls	r2, r2, #3
 8002944:	f100 809c 	bmi.w	8002a80 <HAL_ADC_Init+0x178>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002948:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 800294a:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294c:	f042 0210 	orr.w	r2, r2, #16
 8002950:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002952:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002954:	f042 0201 	orr.w	r2, r2, #1
 8002958:	65a2      	str	r2, [r4, #88]	@ 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fc18 	bl	8002190 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002960:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002962:	f002 0210 	and.w	r2, r2, #16
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002966:	4302      	orrs	r2, r0
 8002968:	f040 808c 	bne.w	8002a84 <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 800296c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800296e:	4618      	mov	r0, r3
    ADC_STATE_CLR_SET(hadc->State,
 8002970:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8002974:	f042 0202 	orr.w	r2, r2, #2
 8002978:	6562      	str	r2, [r4, #84]	@ 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800297a:	f7ff fc05 	bl	8002188 <LL_ADC_IsEnabled>
 800297e:	2800      	cmp	r0, #0
 8002980:	f000 8088 	beq.w	8002a94 <HAL_ADC_Init+0x18c>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002984:	f7ff fbfa 	bl	800217c <HAL_GetREVID>
 8002988:	f241 0303 	movw	r3, #4099	@ 0x1003
 800298c:	68a2      	ldr	r2, [r4, #8]
 800298e:	4298      	cmp	r0, r3
 8002990:	7f21      	ldrb	r1, [r4, #28]
 8002992:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002994:	7d60      	ldrb	r0, [r4, #21]
 8002996:	d902      	bls.n	800299e <HAL_ADC_Init+0x96>
 8002998:	2a10      	cmp	r2, #16
 800299a:	f000 809c 	beq.w	8002ad6 <HAL_ADC_Init+0x1ce>
                  hadc->Init.Overrun                                                    |
 800299e:	4313      	orrs	r3, r2
 80029a0:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029a4:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029a8:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029aa:	bf02      	ittt	eq
 80029ac:	6a23      	ldreq	r3, [r4, #32]
 80029ae:	f103 33ff 	addeq.w	r3, r3, #4294967295	@ 0xffffffff
 80029b2:	ea42 4243 	orreq.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80029b8:	b123      	cbz	r3, 80029c4 <HAL_ADC_Init+0xbc>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029ba:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80029be:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80029c0:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029c2:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	494b      	ldr	r1, [pc, #300]	@ (8002af4 <HAL_ADC_Init+0x1ec>)
 80029c8:	68d8      	ldr	r0, [r3, #12]
 80029ca:	4001      	ands	r1, r0
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029cc:	4618      	mov	r0, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029ce:	4311      	orrs	r1, r2
 80029d0:	60d9      	str	r1, [r3, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029d2:	f7ff fbdd 	bl	8002190 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	f002 0208 	and.w	r2, r2, #8
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029dc:	4302      	orrs	r2, r0
 80029de:	d127      	bne.n	8002a30 <HAL_ADC_Init+0x128>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029e0:	68da      	ldr	r2, [r3, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029e2:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80029e8:	f022 0203 	bic.w	r2, r2, #3
 80029ec:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 80029f0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80029f2:	430a      	orrs	r2, r1
 80029f4:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80029f6:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80029fa:	2a01      	cmp	r2, #1
 80029fc:	d172      	bne.n	8002ae4 <HAL_ADC_Init+0x1dc>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80029fe:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002a00:	6918      	ldr	r0, [r3, #16]
 8002a02:	1e51      	subs	r1, r2, #1
 8002a04:	e9d4 2610 	ldrd	r2, r6, [r4, #64]	@ 0x40
 8002a08:	4332      	orrs	r2, r6
 8002a0a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002a10:	430a      	orrs	r2, r1
 8002a12:	4939      	ldr	r1, [pc, #228]	@ (8002af8 <HAL_ADC_Init+0x1f0>)
 8002a14:	4001      	ands	r1, r0
 8002a16:	430a      	orrs	r2, r1
 8002a18:	f042 0201 	orr.w	r2, r2, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a1c:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8002a1e:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a24:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8002a2c:	f7ff fed6 	bl	80027dc <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a30:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a32:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d159      	bne.n	8002aec <HAL_ADC_Init+0x1e4>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a38:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002a3a:	69a3      	ldr	r3, [r4, #24]
 8002a3c:	f021 010f 	bic.w	r1, r1, #15
 8002a40:	3b01      	subs	r3, #1
 8002a42:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a46:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002a48:	f023 0303 	bic.w	r3, r3, #3
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6563      	str	r3, [r4, #84]	@ 0x54
 8002a52:	e01c      	b.n	8002a8e <HAL_ADC_Init+0x186>
  MODIFY_REG(ADCx->CR,
 8002a54:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a56:	4929      	ldr	r1, [pc, #164]	@ (8002afc <HAL_ADC_Init+0x1f4>)
 8002a58:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8002a5c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002a60:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	4a26      	ldr	r2, [pc, #152]	@ (8002b00 <HAL_ADC_Init+0x1f8>)
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	fbb2 f2f1 	udiv	r2, r2, r1
 8002a6e:	3201      	adds	r2, #1
      wait_loop_index--;
 8002a70:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8002a72:	9a01      	ldr	r2, [sp, #4]
 8002a74:	2a00      	cmp	r2, #0
 8002a76:	f43f af63 	beq.w	8002940 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8002a7a:	9a01      	ldr	r2, [sp, #4]
 8002a7c:	3a01      	subs	r2, #1
 8002a7e:	e7f7      	b.n	8002a70 <HAL_ADC_Init+0x168>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a80:	2500      	movs	r5, #0
 8002a82:	e76a      	b.n	800295a <HAL_ADC_Init+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a84:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002a86:	f043 0310 	orr.w	r3, r3, #16
 8002a8a:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8002a8c:	2501      	movs	r5, #1
}
 8002a8e:	4628      	mov	r0, r5
 8002a90:	b002      	add	sp, #8
 8002a92:	bd70      	pop	{r4, r5, r6, pc}
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a94:	4a1b      	ldr	r2, [pc, #108]	@ (8002b04 <HAL_ADC_Init+0x1fc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00b      	beq.n	8002ab2 <HAL_ADC_Init+0x1aa>
 8002a9a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d007      	beq.n	8002ab2 <HAL_ADC_Init+0x1aa>
 8002aa2:	4819      	ldr	r0, [pc, #100]	@ (8002b08 <HAL_ADC_Init+0x200>)
 8002aa4:	f7ff fb70 	bl	8002188 <LL_ADC_IsEnabled>
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	f47f af6b 	bne.w	8002984 <HAL_ADC_Init+0x7c>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002aae:	4a17      	ldr	r2, [pc, #92]	@ (8002b0c <HAL_ADC_Init+0x204>)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_ADC_Init+0x1c0>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ab2:	4814      	ldr	r0, [pc, #80]	@ (8002b04 <HAL_ADC_Init+0x1fc>)
 8002ab4:	f7ff fb68 	bl	8002188 <LL_ADC_IsEnabled>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4815      	ldr	r0, [pc, #84]	@ (8002b10 <HAL_ADC_Init+0x208>)
 8002abc:	f7ff fb64 	bl	8002188 <LL_ADC_IsEnabled>
 8002ac0:	4303      	orrs	r3, r0
 8002ac2:	f47f af5f 	bne.w	8002984 <HAL_ADC_Init+0x7c>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ac6:	4a13      	ldr	r2, [pc, #76]	@ (8002b14 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ac8:	6893      	ldr	r3, [r2, #8]
 8002aca:	6861      	ldr	r1, [r4, #4]
 8002acc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6093      	str	r3, [r2, #8]
}
 8002ad4:	e756      	b.n	8002984 <HAL_ADC_Init+0x7c>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ad6:	040a      	lsls	r2, r1, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ad8:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8002adc:	431a      	orrs	r2, r3
 8002ade:	f042 021c 	orr.w	r2, r2, #28
 8002ae2:	e761      	b.n	80029a8 <HAL_ADC_Init+0xa0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	f022 0201 	bic.w	r2, r2, #1
 8002aea:	e797      	b.n	8002a1c <HAL_ADC_Init+0x114>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002aec:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002aee:	f023 030f 	bic.w	r3, r3, #15
 8002af2:	e7a7      	b.n	8002a44 <HAL_ADC_Init+0x13c>
 8002af4:	fff0c003 	.word	0xfff0c003
 8002af8:	fc00f81e 	.word	0xfc00f81e
 8002afc:	00030d40 	.word	0x00030d40
 8002b00:	2400000c 	.word	0x2400000c
 8002b04:	40022000 	.word	0x40022000
 8002b08:	58026000 	.word	0x58026000
 8002b0c:	58026300 	.word	0x58026300
 8002b10:	40022100 	.word	0x40022100
 8002b14:	40022300 	.word	0x40022300

08002b18 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b18:	4907      	ldr	r1, [pc, #28]	@ (8002b38 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b1a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b1e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b26:	0412      	lsls	r2, r2, #16
 8002b28:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002b34:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b3c:	4b16      	ldr	r3, [pc, #88]	@ (8002b98 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b3e:	b530      	push	{r4, r5, lr}
 8002b40:	68dc      	ldr	r4, [r3, #12]
 8002b42:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b46:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	bf28      	it	cs
 8002b50:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b58:	bf8c      	ite	hi
 8002b5a:	3c03      	subhi	r4, #3
 8002b5c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8002b62:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b64:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	fa03 f304 	lsl.w	r3, r3, r4
         );
 8002b74:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b78:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002b7c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002b7e:	db06      	blt.n	8002b8e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b80:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002b84:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002b88:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b8c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8e:	f000 000f 	and.w	r0, r0, #15
 8002b92:	4a02      	ldr	r2, [pc, #8]	@ (8002b9c <HAL_NVIC_SetPriority+0x60>)
 8002b94:	5413      	strb	r3, [r2, r0]
 8002b96:	e7f9      	b.n	8002b8c <HAL_NVIC_SetPriority+0x50>
 8002b98:	e000ed00 	.word	0xe000ed00
 8002b9c:	e000ed14 	.word	0xe000ed14

08002ba0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	db07      	blt.n	8002bb4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	0941      	lsrs	r1, r0, #5
 8002ba8:	f000 001f 	and.w	r0, r0, #31
 8002bac:	4a02      	ldr	r2, [pc, #8]	@ (8002bb8 <HAL_NVIC_EnableIRQ+0x18>)
 8002bae:	4083      	lsls	r3, r0
 8002bb0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000e100 	.word	0xe000e100

08002bbc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bbc:	3801      	subs	r0, #1
 8002bbe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002bc2:	d20b      	bcs.n	8002bdc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bc4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc8:	4a05      	ldr	r2, [pc, #20]	@ (8002be0 <HAL_SYSTICK_Config+0x24>)
 8002bca:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bcc:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bce:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd0:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bda:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002bdc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002bde:	4770      	bx	lr
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002be4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002be8:	4b04      	ldr	r3, [pc, #16]	@ (8002bfc <HAL_MPU_Disable+0x18>)
 8002bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002bf0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002c00:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <HAL_MPU_Enable+0x1c>)
 8002c02:	f040 0001 	orr.w	r0, r0, #1
 8002c06:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c0c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c10:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002c12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c16:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c20:	7843      	ldrb	r3, [r0, #1]
 8002c22:	4a14      	ldr	r2, [pc, #80]	@ (8002c74 <HAL_MPU_ConfigRegion+0x54>)
 8002c24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c28:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c34:	6843      	ldr	r3, [r0, #4]
 8002c36:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c3a:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c3c:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c3e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c40:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002c44:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c46:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c48:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c4a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c4e:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c50:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c54:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c56:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c5a:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c60:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c62:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c66:	7a01      	ldrb	r1, [r0, #8]
 8002c68:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c6c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <HAL_DAC_MspInit>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_MspInit could be implemented in the user file
   */
}
 8002c78:	4770      	bx	lr

08002c7a <HAL_DAC_Init>:
{
 8002c7a:	b510      	push	{r4, lr}
  if (hdac == NULL)
 8002c7c:	4604      	mov	r4, r0
 8002c7e:	b168      	cbz	r0, 8002c9c <HAL_DAC_Init+0x22>
  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c80:	7903      	ldrb	r3, [r0, #4]
 8002c82:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002c86:	b913      	cbnz	r3, 8002c8e <HAL_DAC_Init+0x14>
    hdac->Lock = HAL_UNLOCKED;
 8002c88:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8002c8a:	f7ff fff5 	bl	8002c78 <HAL_DAC_MspInit>
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c8e:	2302      	movs	r3, #2
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c90:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c92:	7123      	strb	r3, [r4, #4]
  hdac->State = HAL_DAC_STATE_READY;
 8002c94:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c96:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002c98:	7123      	strb	r3, [r4, #4]
}
 8002c9a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	e7fc      	b.n	8002c9a <HAL_DAC_Init+0x20>

08002ca0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca2:	460e      	mov	r6, r1
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002ca4:	4605      	mov	r5, r0
{
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	9a06      	ldr	r2, [sp, #24]
  if (hdac == NULL)
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d050      	beq.n	8002d50 <HAL_DAC_Start_DMA+0xb0>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cae:	7940      	ldrb	r0, [r0, #5]
 8002cb0:	2801      	cmp	r0, #1
 8002cb2:	f04f 0002 	mov.w	r0, #2
 8002cb6:	d028      	beq.n	8002d0a <HAL_DAC_Start_DMA+0x6a>
 8002cb8:	2401      	movs	r4, #1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cba:	7128      	strb	r0, [r5, #4]
  __HAL_LOCK(hdac);
 8002cbc:	716c      	strb	r4, [r5, #5]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002cbe:	682c      	ldr	r4, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 8002cc0:	bb3e      	cbnz	r6, 8002d12 <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002cc2:	68a8      	ldr	r0, [r5, #8]
 8002cc4:	4f23      	ldr	r7, [pc, #140]	@ (8002d54 <HAL_DAC_Start_DMA+0xb4>)
 8002cc6:	63c7      	str	r7, [r0, #60]	@ 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002cc8:	4f23      	ldr	r7, [pc, #140]	@ (8002d58 <HAL_DAC_Start_DMA+0xb8>)
 8002cca:	6407      	str	r7, [r0, #64]	@ 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002ccc:	4f23      	ldr	r7, [pc, #140]	@ (8002d5c <HAL_DAC_Start_DMA+0xbc>)
 8002cce:	64c7      	str	r7, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002cd0:	6827      	ldr	r7, [r4, #0]
 8002cd2:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 8002cd6:	6027      	str	r7, [r4, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002cd8:	b122      	cbz	r2, 8002ce4 <HAL_DAC_Start_DMA+0x44>
 8002cda:	2a04      	cmp	r2, #4
 8002cdc:	d016      	beq.n	8002d0c <HAL_DAC_Start_DMA+0x6c>
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
        break;
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002cde:	f104 0210 	add.w	r2, r4, #16
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8002ce2:	e001      	b.n	8002ce8 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002ce4:	f104 0208 	add.w	r2, r4, #8
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002ce8:	6827      	ldr	r7, [r4, #0]
 8002cea:	f447 5700 	orr.w	r7, r7, #8192	@ 0x2000
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002cee:	6027      	str	r7, [r4, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002cf0:	f000 fc26 	bl	8003540 <HAL_DMA_Start_IT>
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	716b      	strb	r3, [r5, #5]

  if (status == HAL_OK)
 8002cf8:	bb28      	cbnz	r0, 8002d46 <HAL_DAC_Start_DMA+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002cfa:	682a      	ldr	r2, [r5, #0]
 8002cfc:	f006 0610 	and.w	r6, r6, #16
 8002d00:	2301      	movs	r3, #1
 8002d02:	6811      	ldr	r1, [r2, #0]
 8002d04:	40b3      	lsls	r3, r6
 8002d06:	430b      	orrs	r3, r1
 8002d08:	6013      	str	r3, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8002d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002d0c:	f104 020c 	add.w	r2, r4, #12
  if (Channel == DAC_CHANNEL_1)
 8002d10:	e7ea      	b.n	8002ce8 <HAL_DAC_Start_DMA+0x48>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002d12:	68e8      	ldr	r0, [r5, #12]
 8002d14:	4f12      	ldr	r7, [pc, #72]	@ (8002d60 <HAL_DAC_Start_DMA+0xc0>)
 8002d16:	63c7      	str	r7, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002d18:	4f12      	ldr	r7, [pc, #72]	@ (8002d64 <HAL_DAC_Start_DMA+0xc4>)
 8002d1a:	6407      	str	r7, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002d1c:	4f12      	ldr	r7, [pc, #72]	@ (8002d68 <HAL_DAC_Start_DMA+0xc8>)
 8002d1e:	64c7      	str	r7, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002d20:	6827      	ldr	r7, [r4, #0]
 8002d22:	f047 5780 	orr.w	r7, r7, #268435456	@ 0x10000000
 8002d26:	6027      	str	r7, [r4, #0]
    switch (Alignment)
 8002d28:	b122      	cbz	r2, 8002d34 <HAL_DAC_Start_DMA+0x94>
 8002d2a:	2a04      	cmp	r2, #4
 8002d2c:	d008      	beq.n	8002d40 <HAL_DAC_Start_DMA+0xa0>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002d2e:	f104 021c 	add.w	r2, r4, #28
  if (Channel == DAC_CHANNEL_1)
 8002d32:	e001      	b.n	8002d38 <HAL_DAC_Start_DMA+0x98>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002d34:	f104 0214 	add.w	r2, r4, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002d38:	6827      	ldr	r7, [r4, #0]
 8002d3a:	f047 5700 	orr.w	r7, r7, #536870912	@ 0x20000000
 8002d3e:	e7d6      	b.n	8002cee <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002d40:	f104 0218 	add.w	r2, r4, #24
  if (Channel == DAC_CHANNEL_1)
 8002d44:	e7f8      	b.n	8002d38 <HAL_DAC_Start_DMA+0x98>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d46:	692b      	ldr	r3, [r5, #16]
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	612b      	str	r3, [r5, #16]
 8002d4e:	e7dc      	b.n	8002d0a <HAL_DAC_Start_DMA+0x6a>
    return HAL_ERROR;
 8002d50:	2001      	movs	r0, #1
 8002d52:	e7da      	b.n	8002d0a <HAL_DAC_Start_DMA+0x6a>
 8002d54:	08002d6f 	.word	0x08002d6f
 8002d58:	08002d81 	.word	0x08002d81
 8002d5c:	08002d8d 	.word	0x08002d8d
 8002d60:	08002eef 	.word	0x08002eef
 8002d64:	08002f01 	.word	0x08002f01
 8002d68:	08002f0d 	.word	0x08002f0d

08002d6c <HAL_DAC_ConvCpltCallbackCh1>:
  * @brief  Conversion complete callback in non-blocking mode for Channel1
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 8002d6c:	4770      	bx	lr

08002d6e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002d6e:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d70:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002d72:	4620      	mov	r0, r4
 8002d74:	f7ff fffa 	bl	8002d6c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	7123      	strb	r3, [r4, #4]
}
 8002d7c:	bd10      	pop	{r4, pc}

08002d7e <HAL_DAC_ConvHalfCpltCallbackCh1>:
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 8002d7e:	4770      	bx	lr

08002d80 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002d80:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8002d82:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002d84:	f7ff fffb 	bl	8002d7e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002d88:	bd08      	pop	{r3, pc}

08002d8a <HAL_DAC_ErrorCallbackCh1>:
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
 8002d8a:	4770      	bx	lr

08002d8c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d8e:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d90:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002d92:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002d9a:	f7ff fff6 	bl	8002d8a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	7123      	strb	r3, [r4, #4]
}
 8002da2:	bd10      	pop	{r4, pc}

08002da4 <HAL_DAC_ConfigChannel>:
{
 8002da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da8:	460d      	mov	r5, r1
 8002daa:	4616      	mov	r6, r2
  if ((hdac == NULL) || (sConfig == NULL))
 8002dac:	4604      	mov	r4, r0
 8002dae:	2800      	cmp	r0, #0
 8002db0:	f000 8098 	beq.w	8002ee4 <HAL_DAC_ConfigChannel+0x140>
 8002db4:	2900      	cmp	r1, #0
 8002db6:	f000 8095 	beq.w	8002ee4 <HAL_DAC_ConfigChannel+0x140>
  __HAL_LOCK(hdac);
 8002dba:	7942      	ldrb	r2, [r0, #5]
 8002dbc:	2002      	movs	r0, #2
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002dbe:	680b      	ldr	r3, [r1, #0]
  __HAL_LOCK(hdac);
 8002dc0:	2a01      	cmp	r2, #1
 8002dc2:	d079      	beq.n	8002eb8 <HAL_DAC_ConfigChannel+0x114>
 8002dc4:	2201      	movs	r2, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002dc6:	2b04      	cmp	r3, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dc8:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 8002dca:	7162      	strb	r2, [r4, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002dcc:	d123      	bne.n	8002e16 <HAL_DAC_ConfigChannel+0x72>
    tickstart = HAL_GetTick();
 8002dce:	f7ff f9bd 	bl	800214c <HAL_GetTick>
 8002dd2:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8002dd4:	2e00      	cmp	r6, #0
 8002dd6:	d17a      	bne.n	8002ece <HAL_DAC_ConfigChannel+0x12a>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002dd8:	f8df 810c 	ldr.w	r8, [pc, #268]	@ 8002ee8 <HAL_DAC_ConfigChannel+0x144>
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002de0:	ea12 0f08 	tst.w	r2, r8
 8002de4:	d157      	bne.n	8002e96 <HAL_DAC_ConfigChannel+0xf2>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002de6:	69aa      	ldr	r2, [r5, #24]
 8002de8:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002dea:	6822      	ldr	r2, [r4, #0]
 8002dec:	f006 0110 	and.w	r1, r6, #16
 8002df0:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8002df4:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 8002df6:	4088      	lsls	r0, r1
 8002df8:	ea23 0300 	bic.w	r3, r3, r0
 8002dfc:	69e8      	ldr	r0, [r5, #28]
 8002dfe:	4088      	lsls	r0, r1
 8002e00:	4303      	orrs	r3, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002e02:	20ff      	movs	r0, #255	@ 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002e04:	6493      	str	r3, [r2, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002e06:	4088      	lsls	r0, r1
 8002e08:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002e0a:	ea23 0300 	bic.w	r3, r3, r0
 8002e0e:	6a28      	ldr	r0, [r5, #32]
 8002e10:	4088      	lsls	r0, r1
 8002e12:	4303      	orrs	r3, r0
 8002e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e16:	6929      	ldr	r1, [r5, #16]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002e18:	f006 0210 	and.w	r2, r6, #16
    tmpreg1 = hdac->Instance->CCR;
 8002e1c:	6823      	ldr	r3, [r4, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e1e:	2901      	cmp	r1, #1
 8002e20:	d108      	bne.n	8002e34 <HAL_DAC_ConfigChannel+0x90>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e22:	211f      	movs	r1, #31
    tmpreg1 = hdac->Instance->CCR;
 8002e24:	6b98      	ldr	r0, [r3, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e26:	4091      	lsls	r1, r2
 8002e28:	ea20 0001 	bic.w	r0, r0, r1
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e2c:	6969      	ldr	r1, [r5, #20]
 8002e2e:	4091      	lsls	r1, r2
 8002e30:	4301      	orrs	r1, r0
    hdac->Instance->CCR = tmpreg1;
 8002e32:	6399      	str	r1, [r3, #56]	@ 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e34:	2107      	movs	r1, #7
  tmpreg1 = hdac->Instance->MCR;
 8002e36:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e38:	4091      	lsls	r1, r2
 8002e3a:	ea26 0601 	bic.w	r6, r6, r1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002e3e:	e9d5 1002 	ldrd	r1, r0, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002e42:	2801      	cmp	r0, #1
 8002e44:	d04a      	beq.n	8002edc <HAL_DAC_ConfigChannel+0x138>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002e46:	2802      	cmp	r0, #2
 8002e48:	d04a      	beq.n	8002ee0 <HAL_DAC_ConfigChannel+0x13c>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002e4a:	fab1 f081 	clz	r0, r1
 8002e4e:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002e50:	682f      	ldr	r7, [r5, #0]
 8002e52:	4339      	orrs	r1, r7
 8002e54:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e56:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e5a:	4091      	lsls	r1, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e5c:	4090      	lsls	r0, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e5e:	4331      	orrs	r1, r6
  hdac->Instance->MCR = tmpreg1;
 8002e60:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	ea21 0100 	bic.w	r1, r1, r0
 8002e68:	6019      	str	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e6a:	f640 71fe 	movw	r1, #4094	@ 0xffe
  tmpreg1 = hdac->Instance->CR;
 8002e6e:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e70:	4091      	lsls	r1, r2
 8002e72:	ea20 0001 	bic.w	r0, r0, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e76:	6869      	ldr	r1, [r5, #4]
 8002e78:	4091      	lsls	r1, r2
 8002e7a:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e7c:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 8002e7e:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e80:	fa00 f202 	lsl.w	r2, r0, r2
 8002e84:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hdac);
 8002e86:	2000      	movs	r0, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e88:	ea21 0202 	bic.w	r2, r1, r2
 8002e8c:	601a      	str	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002e8e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdac);
 8002e90:	7160      	strb	r0, [r4, #5]
  hdac->State = HAL_DAC_STATE_READY;
 8002e92:	7123      	strb	r3, [r4, #4]
  return status;
 8002e94:	e010      	b.n	8002eb8 <HAL_DAC_ConfigChannel+0x114>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e96:	f7ff f959 	bl	800214c <HAL_GetTick>
 8002e9a:	1bc0      	subs	r0, r0, r7
 8002e9c:	2801      	cmp	r0, #1
 8002e9e:	d99d      	bls.n	8002ddc <HAL_DAC_ConfigChannel+0x38>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea4:	ea13 0f08 	tst.w	r3, r8
 8002ea8:	d098      	beq.n	8002ddc <HAL_DAC_ConfigChannel+0x38>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002eaa:	6923      	ldr	r3, [r4, #16]
            return HAL_TIMEOUT;
 8002eac:	2003      	movs	r0, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002eae:	f043 0308 	orr.w	r3, r3, #8
 8002eb2:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	7123      	strb	r3, [r4, #4]
}
 8002eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ebc:	f7ff f946 	bl	800214c <HAL_GetTick>
 8002ec0:	1bc0      	subs	r0, r0, r7
 8002ec2:	2801      	cmp	r0, #1
 8002ec4:	d903      	bls.n	8002ece <HAL_DAC_ConfigChannel+0x12a>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	dbed      	blt.n	8002eaa <HAL_DAC_ConfigChannel+0x106>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ed2:	2a00      	cmp	r2, #0
 8002ed4:	dbf2      	blt.n	8002ebc <HAL_DAC_ConfigChannel+0x118>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ed6:	69aa      	ldr	r2, [r5, #24]
 8002ed8:	645a      	str	r2, [r3, #68]	@ 0x44
 8002eda:	e786      	b.n	8002dea <HAL_DAC_ConfigChannel+0x46>
    connectOnChip = 0x00000000UL;
 8002edc:	2000      	movs	r0, #0
 8002ede:	e7b7      	b.n	8002e50 <HAL_DAC_ConfigChannel+0xac>
    connectOnChip = DAC_MCR_MODE1_0;
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	e7b5      	b.n	8002e50 <HAL_DAC_ConfigChannel+0xac>
    return HAL_ERROR;
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	e7e7      	b.n	8002eb8 <HAL_DAC_ConfigChannel+0x114>
 8002ee8:	20008000 	.word	0x20008000

08002eec <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002eec:	4770      	bx	lr

08002eee <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002eee:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef0:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	f7ff fffa 	bl	8002eec <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	7123      	strb	r3, [r4, #4]
}
 8002efc:	bd10      	pop	{r4, pc}

08002efe <HAL_DACEx_ConvHalfCpltCallbackCh2>:
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
 8002efe:	4770      	bx	lr

08002f00 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002f00:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8002f02:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002f04:	f7ff fffb 	bl	8002efe <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f08:	bd08      	pop	{r3, pc}

08002f0a <HAL_DACEx_ErrorCallbackCh2>:
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
 8002f0a:	4770      	bx	lr

08002f0c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f0e:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f10:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002f12:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f14:	f043 0304 	orr.w	r3, r3, #4
 8002f18:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002f1a:	f7ff fff6 	bl	8002f0a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	7123      	strb	r3, [r4, #4]
}
 8002f22:	bd10      	pop	{r4, pc}

08002f24 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f24:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f26:	f8df c144 	ldr.w	ip, [pc, #324]	@ 800306c <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x148>
 8002f2a:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2c:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f2e:	4564      	cmp	r4, ip
 8002f30:	d045      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f32:	4d4c      	ldr	r5, [pc, #304]	@ (8003064 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x140>)
 8002f34:	42ac      	cmp	r4, r5
 8002f36:	d042      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f38:	3518      	adds	r5, #24
 8002f3a:	42ac      	cmp	r4, r5
 8002f3c:	d03f      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f3e:	3518      	adds	r5, #24
 8002f40:	42ac      	cmp	r4, r5
 8002f42:	d03c      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f44:	3518      	adds	r5, #24
 8002f46:	42ac      	cmp	r4, r5
 8002f48:	d039      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f4a:	3518      	adds	r5, #24
 8002f4c:	42ac      	cmp	r4, r5
 8002f4e:	d036      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f50:	3518      	adds	r5, #24
 8002f52:	42ac      	cmp	r4, r5
 8002f54:	d033      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f56:	3518      	adds	r5, #24
 8002f58:	42ac      	cmp	r4, r5
 8002f5a:	d030      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f5c:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8002f60:	42ac      	cmp	r4, r5
 8002f62:	d02c      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f64:	3518      	adds	r5, #24
 8002f66:	42ac      	cmp	r4, r5
 8002f68:	d029      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f6a:	3518      	adds	r5, #24
 8002f6c:	42ac      	cmp	r4, r5
 8002f6e:	d026      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f70:	3518      	adds	r5, #24
 8002f72:	42ac      	cmp	r4, r5
 8002f74:	d023      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f76:	3518      	adds	r5, #24
 8002f78:	42ac      	cmp	r4, r5
 8002f7a:	d020      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f7c:	3518      	adds	r5, #24
 8002f7e:	42ac      	cmp	r4, r5
 8002f80:	d01d      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f82:	3518      	adds	r5, #24
 8002f84:	42ac      	cmp	r4, r5
 8002f86:	d01a      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f88:	3518      	adds	r5, #24
 8002f8a:	42ac      	cmp	r4, r5
 8002f8c:	d017      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f8e:	4d36      	ldr	r5, [pc, #216]	@ (8003068 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x144>)
 8002f90:	42ac      	cmp	r4, r5
 8002f92:	d014      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f94:	3514      	adds	r5, #20
 8002f96:	42ac      	cmp	r4, r5
 8002f98:	d011      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002f9a:	3514      	adds	r5, #20
 8002f9c:	42ac      	cmp	r4, r5
 8002f9e:	d00e      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002fa0:	3514      	adds	r5, #20
 8002fa2:	42ac      	cmp	r4, r5
 8002fa4:	d00b      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002fa6:	3514      	adds	r5, #20
 8002fa8:	42ac      	cmp	r4, r5
 8002faa:	d008      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002fac:	3514      	adds	r5, #20
 8002fae:	42ac      	cmp	r4, r5
 8002fb0:	d005      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002fb2:	3514      	adds	r5, #20
 8002fb4:	42ac      	cmp	r4, r5
 8002fb6:	d002      	beq.n	8002fbe <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x9a>
 8002fb8:	3514      	adds	r5, #20
 8002fba:	42ac      	cmp	r4, r5
 8002fbc:	d148      	bne.n	8003050 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x12c>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fbe:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	@ 0x64
 8002fc2:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002fc4:	6ec5      	ldr	r5, [r0, #108]	@ 0x6c
 8002fc6:	b115      	cbz	r5, 8002fce <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fc8:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	@ 0x70
 8002fcc:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fce:	4564      	cmp	r4, ip
 8002fd0:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8002fd2:	6886      	ldr	r6, [r0, #8]
 8002fd4:	d02d      	beq.n	8003032 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x10e>
 8002fd6:	4823      	ldr	r0, [pc, #140]	@ (8003064 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x140>)
 8002fd8:	4284      	cmp	r4, r0
 8002fda:	d02a      	beq.n	8003032 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x10e>
 8002fdc:	3018      	adds	r0, #24
 8002fde:	4284      	cmp	r4, r0
 8002fe0:	d027      	beq.n	8003032 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x10e>
 8002fe2:	3018      	adds	r0, #24
 8002fe4:	4284      	cmp	r4, r0
 8002fe6:	d024      	beq.n	8003032 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x10e>
 8002fe8:	3018      	adds	r0, #24
 8002fea:	4284      	cmp	r4, r0
 8002fec:	d021      	beq.n	8003032 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x10e>
 8002fee:	3018      	adds	r0, #24
 8002ff0:	4284      	cmp	r4, r0
 8002ff2:	d01e      	beq.n	8003032 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x10e>
 8002ff4:	3018      	adds	r0, #24
 8002ff6:	4284      	cmp	r4, r0
 8002ff8:	d01b      	beq.n	8003032 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x10e>
 8002ffa:	3018      	adds	r0, #24
 8002ffc:	4284      	cmp	r4, r0
 8002ffe:	d018      	beq.n	8003032 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x10e>
 8003000:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8003004:	4284      	cmp	r4, r0
 8003006:	d014      	beq.n	8003032 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x10e>
 8003008:	3018      	adds	r0, #24
 800300a:	4284      	cmp	r4, r0
 800300c:	d011      	beq.n	8003032 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x10e>
 800300e:	3018      	adds	r0, #24
 8003010:	4284      	cmp	r4, r0
 8003012:	d00e      	beq.n	8003032 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x10e>
 8003014:	3018      	adds	r0, #24
 8003016:	4284      	cmp	r4, r0
 8003018:	d00b      	beq.n	8003032 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x10e>
 800301a:	3018      	adds	r0, #24
 800301c:	4284      	cmp	r4, r0
 800301e:	d008      	beq.n	8003032 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x10e>
 8003020:	3018      	adds	r0, #24
 8003022:	4284      	cmp	r4, r0
 8003024:	d005      	beq.n	8003032 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x10e>
 8003026:	3018      	adds	r0, #24
 8003028:	4284      	cmp	r4, r0
 800302a:	d002      	beq.n	8003032 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x10e>
 800302c:	3018      	adds	r0, #24
 800302e:	4284      	cmp	r4, r0
 8003030:	d10f      	bne.n	8003052 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x12e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003032:	203f      	movs	r0, #63	@ 0x3f
 8003034:	f005 051f 	and.w	r5, r5, #31
 8003038:	fa00 f505 	lsl.w	r5, r0, r5
 800303c:	60bd      	str	r5, [r7, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800303e:	6820      	ldr	r0, [r4, #0]
 8003040:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 8003044:	6020      	str	r0, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003046:	2e40      	cmp	r6, #64	@ 0x40
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003048:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800304a:	d108      	bne.n	800305e <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x13a>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800304c:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800304e:	60e1      	str	r1, [r4, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003050:	bdf0      	pop	{r4, r5, r6, r7, pc}
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003052:	f005 051f 	and.w	r5, r5, #31
 8003056:	2001      	movs	r0, #1
 8003058:	40a8      	lsls	r0, r5
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	e7f3      	b.n	8003046 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x122>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800305e:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003060:	60e2      	str	r2, [r4, #12]
}
 8003062:	e7f5      	b.n	8003050 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x12c>
 8003064:	40020028 	.word	0x40020028
 8003068:	58025408 	.word	0x58025408
 800306c:	40020010 	.word	0x40020010

08003070 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003070:	6803      	ldr	r3, [r0, #0]
{
 8003072:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003074:	4923      	ldr	r1, [pc, #140]	@ (8003104 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x94>)
 8003076:	428b      	cmp	r3, r1
{
 8003078:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800307a:	d031      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
 800307c:	3118      	adds	r1, #24
 800307e:	428b      	cmp	r3, r1
 8003080:	d02e      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
 8003082:	3118      	adds	r1, #24
 8003084:	428b      	cmp	r3, r1
 8003086:	d02b      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
 8003088:	3118      	adds	r1, #24
 800308a:	428b      	cmp	r3, r1
 800308c:	d028      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
 800308e:	3118      	adds	r1, #24
 8003090:	428b      	cmp	r3, r1
 8003092:	d025      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
 8003094:	3118      	adds	r1, #24
 8003096:	428b      	cmp	r3, r1
 8003098:	d022      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
 800309a:	3118      	adds	r1, #24
 800309c:	428b      	cmp	r3, r1
 800309e:	d01f      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
 80030a0:	3118      	adds	r1, #24
 80030a2:	428b      	cmp	r3, r1
 80030a4:	d01c      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
 80030a6:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80030aa:	428b      	cmp	r3, r1
 80030ac:	d018      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
 80030ae:	3118      	adds	r1, #24
 80030b0:	428b      	cmp	r3, r1
 80030b2:	d015      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
 80030b4:	3118      	adds	r1, #24
 80030b6:	428b      	cmp	r3, r1
 80030b8:	d012      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
 80030ba:	3118      	adds	r1, #24
 80030bc:	428b      	cmp	r3, r1
 80030be:	d00f      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
 80030c0:	3118      	adds	r1, #24
 80030c2:	428b      	cmp	r3, r1
 80030c4:	d00c      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
 80030c6:	3118      	adds	r1, #24
 80030c8:	428b      	cmp	r3, r1
 80030ca:	d009      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
 80030cc:	3118      	adds	r1, #24
 80030ce:	428b      	cmp	r3, r1
 80030d0:	d006      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
 80030d2:	3118      	adds	r1, #24
 80030d4:	428b      	cmp	r3, r1
 80030d6:	d003      	beq.n	80030e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80030d8:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80030dc:	6590      	str	r0, [r2, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 80030de:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80030e0:	b2dc      	uxtb	r4, r3
 80030e2:	2118      	movs	r1, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80030e4:	4808      	ldr	r0, [pc, #32]	@ (8003108 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x98>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80030e6:	3c10      	subs	r4, #16
 80030e8:	fbb4 f1f1 	udiv	r1, r4, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80030ec:	f001 0107 	and.w	r1, r1, #7
    if (stream_number > 3U)
 80030f0:	2c5f      	cmp	r4, #95	@ 0x5f
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80030f2:	5c41      	ldrb	r1, [r0, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80030f4:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 80030f8:	f020 0003 	bic.w	r0, r0, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80030fc:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80030fe:	bf88      	it	hi
 8003100:	3004      	addhi	r0, #4
 8003102:	e7eb      	b.n	80030dc <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x6c>
 8003104:	40020010 	.word	0x40020010
 8003108:	08009c30 	.word	0x08009c30

0800310c <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800310c:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800310e:	4920      	ldr	r1, [pc, #128]	@ (8003190 <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef+0x84>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003110:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003112:	428a      	cmp	r2, r1
 8003114:	d028      	beq.n	8003168 <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef+0x5c>
 8003116:	3114      	adds	r1, #20
 8003118:	428a      	cmp	r2, r1
 800311a:	d025      	beq.n	8003168 <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef+0x5c>
 800311c:	3114      	adds	r1, #20
 800311e:	428a      	cmp	r2, r1
 8003120:	d022      	beq.n	8003168 <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef+0x5c>
 8003122:	3114      	adds	r1, #20
 8003124:	428a      	cmp	r2, r1
 8003126:	d01f      	beq.n	8003168 <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef+0x5c>
 8003128:	3114      	adds	r1, #20
 800312a:	428a      	cmp	r2, r1
 800312c:	d01c      	beq.n	8003168 <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef+0x5c>
 800312e:	3114      	adds	r1, #20
 8003130:	428a      	cmp	r2, r1
 8003132:	d019      	beq.n	8003168 <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef+0x5c>
 8003134:	3114      	adds	r1, #20
 8003136:	428a      	cmp	r2, r1
 8003138:	d016      	beq.n	8003168 <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef+0x5c>
 800313a:	3114      	adds	r1, #20
 800313c:	428a      	cmp	r2, r1
 800313e:	d013      	beq.n	8003168 <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef+0x5c>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003140:	2118      	movs	r1, #24
 8003142:	3b10      	subs	r3, #16
 8003144:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003148:	4912      	ldr	r1, [pc, #72]	@ (8003194 <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef+0x88>)
 800314a:	4411      	add	r1, r2
 800314c:	29a8      	cmp	r1, #168	@ 0xa8
 800314e:	d91c      	bls.n	800318a <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef+0x7e>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003150:	f103 5280 	add.w	r2, r3, #268435456	@ 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003154:	2101      	movs	r1, #1
 8003156:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800315a:	f502 4202 	add.w	r2, r2, #33280	@ 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	490d      	ldr	r1, [pc, #52]	@ (8003198 <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef+0x8c>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003164:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003166:	e00c      	b.n	8003182 <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef+0x76>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003168:	2214      	movs	r2, #20
 800316a:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800316c:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800316e:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003172:	f103 52b0 	add.w	r2, r3, #369098752	@ 0x16000000
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	4908      	ldr	r1, [pc, #32]	@ (800319c <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef+0x90>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800317c:	f502 4216 	add.w	r2, r2, #38400	@ 0x9600
 8003180:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003182:	6683      	str	r3, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003184:	e9c0 2118 	strd	r2, r1, [r0, #96]	@ 0x60
  }
}
 8003188:	4770      	bx	lr
      stream_number += 8U;
 800318a:	3308      	adds	r3, #8
 800318c:	e7e0      	b.n	8003150 <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef+0x44>
 800318e:	bf00      	nop
 8003190:	58025408 	.word	0x58025408
 8003194:	bffdfbf0 	.word	0xbffdfbf0
 8003198:	40020880 	.word	0x40020880
 800319c:	58025880 	.word	0x58025880

080031a0 <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80031a0:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80031a2:	1e51      	subs	r1, r2, #1
 80031a4:	2907      	cmp	r1, #7
{
 80031a6:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80031a8:	d821      	bhi.n	80031ee <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031aa:	6803      	ldr	r3, [r0, #0]
 80031ac:	4c13      	ldr	r4, [pc, #76]	@ (80031fc <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef+0x5c>)
 80031ae:	42a3      	cmp	r3, r4
 80031b0:	d01e      	beq.n	80031f0 <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef+0x50>
 80031b2:	3414      	adds	r4, #20
 80031b4:	42a3      	cmp	r3, r4
 80031b6:	d01b      	beq.n	80031f0 <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef+0x50>
 80031b8:	3414      	adds	r4, #20
 80031ba:	42a3      	cmp	r3, r4
 80031bc:	d018      	beq.n	80031f0 <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef+0x50>
 80031be:	3414      	adds	r4, #20
 80031c0:	42a3      	cmp	r3, r4
 80031c2:	d015      	beq.n	80031f0 <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef+0x50>
 80031c4:	3414      	adds	r4, #20
 80031c6:	42a3      	cmp	r3, r4
 80031c8:	d012      	beq.n	80031f0 <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef+0x50>
 80031ca:	3414      	adds	r4, #20
 80031cc:	42a3      	cmp	r3, r4
 80031ce:	d00f      	beq.n	80031f0 <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef+0x50>
 80031d0:	3414      	adds	r4, #20
 80031d2:	42a3      	cmp	r3, r4
 80031d4:	d00c      	beq.n	80031f0 <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef+0x50>
 80031d6:	3414      	adds	r4, #20
 80031d8:	42a3      	cmp	r3, r4
 80031da:	d009      	beq.n	80031f0 <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031dc:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef+0x60>)
 80031de:	4413      	add	r3, r2
 80031e0:	4a08      	ldr	r2, [pc, #32]	@ (8003204 <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef+0x64>)
 80031e2:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80031e4:	e9c0 321b 	strd	r3, r2, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80031e8:	2301      	movs	r3, #1
 80031ea:	408b      	lsls	r3, r1
 80031ec:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 80031ee:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80031f0:	4b05      	ldr	r3, [pc, #20]	@ (8003208 <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef+0x68>)
 80031f2:	4413      	add	r3, r2
 80031f4:	4a05      	ldr	r2, [pc, #20]	@ (800320c <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef+0x6c>)
 80031f6:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80031f8:	e7f4      	b.n	80031e4 <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef+0x44>
 80031fa:	bf00      	nop
 80031fc:	58025408 	.word	0x58025408
 8003200:	1000823f 	.word	0x1000823f
 8003204:	40020940 	.word	0x40020940
 8003208:	1600963f 	.word	0x1600963f
 800320c:	58025940 	.word	0x58025940

08003210 <HAL_DMA_Init>:
{
 8003210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003212:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003214:	f7fe ff9a 	bl	800214c <HAL_GetTick>
 8003218:	4606      	mov	r6, r0
  if(hdma == NULL)
 800321a:	2c00      	cmp	r4, #0
 800321c:	f000 80a9 	beq.w	8003372 <HAL_DMA_Init+0x162>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	4d6f      	ldr	r5, [pc, #444]	@ (80033e0 <HAL_DMA_Init+0x1d0>)
 8003224:	42ab      	cmp	r3, r5
 8003226:	d064      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
 8003228:	4a6e      	ldr	r2, [pc, #440]	@ (80033e4 <HAL_DMA_Init+0x1d4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d061      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
 800322e:	3218      	adds	r2, #24
 8003230:	4293      	cmp	r3, r2
 8003232:	d05e      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
 8003234:	3218      	adds	r2, #24
 8003236:	4293      	cmp	r3, r2
 8003238:	d05b      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
 800323a:	3218      	adds	r2, #24
 800323c:	4293      	cmp	r3, r2
 800323e:	d058      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
 8003240:	3218      	adds	r2, #24
 8003242:	4293      	cmp	r3, r2
 8003244:	d055      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
 8003246:	3218      	adds	r2, #24
 8003248:	4293      	cmp	r3, r2
 800324a:	d052      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
 800324c:	3218      	adds	r2, #24
 800324e:	4293      	cmp	r3, r2
 8003250:	d04f      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
 8003252:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8003256:	4293      	cmp	r3, r2
 8003258:	d04b      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
 800325a:	3218      	adds	r2, #24
 800325c:	4293      	cmp	r3, r2
 800325e:	d048      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
 8003260:	3218      	adds	r2, #24
 8003262:	4293      	cmp	r3, r2
 8003264:	d045      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
 8003266:	3218      	adds	r2, #24
 8003268:	4293      	cmp	r3, r2
 800326a:	d042      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
 800326c:	3218      	adds	r2, #24
 800326e:	4293      	cmp	r3, r2
 8003270:	d03f      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
 8003272:	3218      	adds	r2, #24
 8003274:	4293      	cmp	r3, r2
 8003276:	d03c      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
 8003278:	3218      	adds	r2, #24
 800327a:	4293      	cmp	r3, r2
 800327c:	d039      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
 800327e:	3218      	adds	r2, #24
 8003280:	4293      	cmp	r3, r2
 8003282:	d036      	beq.n	80032f2 <HAL_DMA_Init+0xe2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003284:	4a58      	ldr	r2, [pc, #352]	@ (80033e8 <HAL_DMA_Init+0x1d8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	f040 812f 	bne.w	80034ea <HAL_DMA_Init+0x2da>
    hdma->State = HAL_DMA_STATE_BUSY;
 800328c:	2202      	movs	r2, #2
 800328e:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8003292:	2200      	movs	r2, #0
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003294:	6818      	ldr	r0, [r3, #0]
    __HAL_UNLOCK(hdma);
 8003296:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800329a:	68a2      	ldr	r2, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800329c:	f36f 1010 	bfc	r0, #4, #13
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032a0:	2a40      	cmp	r2, #64	@ 0x40
 80032a2:	f000 8140 	beq.w	8003526 <HAL_DMA_Init+0x316>
 80032a6:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80032aa:	424a      	negs	r2, r1
 80032ac:	414a      	adcs	r2, r1
 80032ae:	0392      	lsls	r2, r2, #14
 80032b0:	e9d4 1603 	ldrd	r1, r6, [r4, #12]
 80032b4:	4331      	orrs	r1, r6
 80032b6:	6966      	ldr	r6, [r4, #20]
 80032b8:	4331      	orrs	r1, r6
 80032ba:	69a6      	ldr	r6, [r4, #24]
 80032bc:	4331      	orrs	r1, r6
 80032be:	69e6      	ldr	r6, [r4, #28]
 80032c0:	4331      	orrs	r1, r6
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80032c2:	6a26      	ldr	r6, [r4, #32]
 80032c4:	ea40 1016 	orr.w	r0, r0, r6, lsr #4
 80032c8:	ea40 01d1 	orr.w	r1, r0, r1, lsr #3
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032cc:	4620      	mov	r0, r4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032ce:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80032d0:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80032d2:	4a46      	ldr	r2, [pc, #280]	@ (80033ec <HAL_DMA_Init+0x1dc>)
 80032d4:	441a      	add	r2, r3
 80032d6:	2314      	movs	r3, #20
 80032d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032dc:	0092      	lsls	r2, r2, #2
 80032de:	65e2      	str	r2, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032e0:	f7ff fec6 	bl	8003070 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032e4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80032e6:	f003 021f 	and.w	r2, r3, #31
 80032ea:	2301      	movs	r3, #1
 80032ec:	4093      	lsls	r3, r2
 80032ee:	6043      	str	r3, [r0, #4]
 80032f0:	e092      	b.n	8003418 <HAL_DMA_Init+0x208>
    hdma->State = HAL_DMA_STATE_BUSY;
 80032f2:	2202      	movs	r2, #2
 80032f4:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80032f8:	2200      	movs	r2, #0
 80032fa:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003306:	6822      	ldr	r2, [r4, #0]
 8003308:	6813      	ldr	r3, [r2, #0]
 800330a:	07db      	lsls	r3, r3, #31
 800330c:	d427      	bmi.n	800335e <HAL_DMA_Init+0x14e>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800330e:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003310:	4837      	ldr	r0, [pc, #220]	@ (80033f0 <HAL_DMA_Init+0x1e0>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003312:	69a1      	ldr	r1, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003314:	4018      	ands	r0, r3
    registerValue |=  hdma->Init.Direction           |
 8003316:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 800331a:	4333      	orrs	r3, r6
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331c:	6926      	ldr	r6, [r4, #16]
 800331e:	4333      	orrs	r3, r6
 8003320:	6966      	ldr	r6, [r4, #20]
 8003322:	4333      	orrs	r3, r6
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003324:	69e6      	ldr	r6, [r4, #28]
 8003326:	430b      	orrs	r3, r1
 8003328:	4333      	orrs	r3, r6
            hdma->Init.Mode                | hdma->Init.Priority;
 800332a:	6a26      	ldr	r6, [r4, #32]
 800332c:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800332e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8003330:	2e04      	cmp	r6, #4
    registerValue |=  hdma->Init.Direction           |
 8003332:	ea43 0300 	orr.w	r3, r3, r0
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003336:	bf02      	ittt	eq
 8003338:	e9d4 070b 	ldrdeq	r0, r7, [r4, #44]	@ 0x2c
 800333c:	4338      	orreq	r0, r7
 800333e:	4303      	orreq	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003340:	482c      	ldr	r0, [pc, #176]	@ (80033f4 <HAL_DMA_Init+0x1e4>)
 8003342:	6800      	ldr	r0, [r0, #0]
 8003344:	f36f 000f 	bfc	r0, #0, #16
 8003348:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 800334c:	d31b      	bcc.n	8003386 <HAL_DMA_Init+0x176>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800334e:	6860      	ldr	r0, [r4, #4]
 8003350:	282e      	cmp	r0, #46	@ 0x2e
 8003352:	d810      	bhi.n	8003376 <HAL_DMA_Init+0x166>
 8003354:	2828      	cmp	r0, #40	@ 0x28
 8003356:	d916      	bls.n	8003386 <HAL_DMA_Init+0x176>
        registerValue |= DMA_SxCR_TRBUFF;
 8003358:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800335c:	e013      	b.n	8003386 <HAL_DMA_Init+0x176>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800335e:	f7fe fef5 	bl	800214c <HAL_GetTick>
 8003362:	1b80      	subs	r0, r0, r6
 8003364:	2805      	cmp	r0, #5
 8003366:	d9ce      	bls.n	8003306 <HAL_DMA_Init+0xf6>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003368:	2320      	movs	r3, #32
 800336a:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800336c:	2303      	movs	r3, #3
 800336e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8003372:	2001      	movs	r0, #1
}
 8003374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003376:	383f      	subs	r0, #63	@ 0x3f
 8003378:	2813      	cmp	r0, #19
 800337a:	d804      	bhi.n	8003386 <HAL_DMA_Init+0x176>
 800337c:	4f1e      	ldr	r7, [pc, #120]	@ (80033f8 <HAL_DMA_Init+0x1e8>)
 800337e:	fa27 f000 	lsr.w	r0, r7, r0
 8003382:	07c7      	lsls	r7, r0, #31
 8003384:	d4e8      	bmi.n	8003358 <HAL_DMA_Init+0x148>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003386:	6013      	str	r3, [r2, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003388:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800338a:	6953      	ldr	r3, [r2, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800338c:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8003390:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003394:	d136      	bne.n	8003404 <HAL_DMA_Init+0x1f4>
      registerValue |= hdma->Init.FIFOThreshold;
 8003396:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003398:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800339a:	4303      	orrs	r3, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800339c:	b396      	cbz	r6, 8003404 <HAL_DMA_Init+0x1f4>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800339e:	b939      	cbnz	r1, 80033b0 <HAL_DMA_Init+0x1a0>
    switch (hdma->Init.FIFOThreshold)
 80033a0:	2801      	cmp	r0, #1
 80033a2:	d015      	beq.n	80033d0 <HAL_DMA_Init+0x1c0>
 80033a4:	f030 0102 	bics.w	r1, r0, #2
 80033a8:	d12c      	bne.n	8003404 <HAL_DMA_Init+0x1f4>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033aa:	01f0      	lsls	r0, r6, #7
 80033ac:	d52a      	bpl.n	8003404 <HAL_DMA_Init+0x1f4>
 80033ae:	e012      	b.n	80033d6 <HAL_DMA_Init+0x1c6>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033b0:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80033b4:	d122      	bne.n	80033fc <HAL_DMA_Init+0x1ec>
    switch (hdma->Init.FIFOThreshold)
 80033b6:	2803      	cmp	r0, #3
 80033b8:	d824      	bhi.n	8003404 <HAL_DMA_Init+0x1f4>
 80033ba:	a101      	add	r1, pc, #4	@ (adr r1, 80033c0 <HAL_DMA_Init+0x1b0>)
 80033bc:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 80033c0:	080033d7 	.word	0x080033d7
 80033c4:	080033ab 	.word	0x080033ab
 80033c8:	080033d7 	.word	0x080033d7
 80033cc:	080033d1 	.word	0x080033d1
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033d0:	f1b6 7fc0 	cmp.w	r6, #25165824	@ 0x1800000
 80033d4:	d116      	bne.n	8003404 <HAL_DMA_Init+0x1f4>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033d6:	2340      	movs	r3, #64	@ 0x40
 80033d8:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80033da:	2301      	movs	r3, #1
 80033dc:	e7c7      	b.n	800336e <HAL_DMA_Init+0x15e>
 80033de:	bf00      	nop
 80033e0:	40020010 	.word	0x40020010
 80033e4:	40020028 	.word	0x40020028
 80033e8:	58025408 	.word	0x58025408
 80033ec:	a7fdabf8 	.word	0xa7fdabf8
 80033f0:	fe10803f 	.word	0xfe10803f
 80033f4:	5c001000 	.word	0x5c001000
 80033f8:	000f030f 	.word	0x000f030f
    switch (hdma->Init.FIFOThreshold)
 80033fc:	2802      	cmp	r0, #2
 80033fe:	d9ea      	bls.n	80033d6 <HAL_DMA_Init+0x1c6>
 8003400:	2803      	cmp	r0, #3
 8003402:	d0d2      	beq.n	80033aa <HAL_DMA_Init+0x19a>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003404:	6153      	str	r3, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003406:	4620      	mov	r0, r4
 8003408:	f7ff fe32 	bl	8003070 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800340c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800340e:	f003 021f 	and.w	r2, r3, #31
 8003412:	233f      	movs	r3, #63	@ 0x3f
 8003414:	4093      	lsls	r3, r2
 8003416:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003418:	6823      	ldr	r3, [r4, #0]
 800341a:	42ab      	cmp	r3, r5
 800341c:	d045      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 800341e:	4a45      	ldr	r2, [pc, #276]	@ (8003534 <HAL_DMA_Init+0x324>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d042      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 8003424:	3218      	adds	r2, #24
 8003426:	4293      	cmp	r3, r2
 8003428:	d03f      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 800342a:	3218      	adds	r2, #24
 800342c:	4293      	cmp	r3, r2
 800342e:	d03c      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 8003430:	3218      	adds	r2, #24
 8003432:	4293      	cmp	r3, r2
 8003434:	d039      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 8003436:	3218      	adds	r2, #24
 8003438:	4293      	cmp	r3, r2
 800343a:	d036      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 800343c:	3218      	adds	r2, #24
 800343e:	4293      	cmp	r3, r2
 8003440:	d033      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 8003442:	3218      	adds	r2, #24
 8003444:	4293      	cmp	r3, r2
 8003446:	d030      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 8003448:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800344c:	4293      	cmp	r3, r2
 800344e:	d02c      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 8003450:	3218      	adds	r2, #24
 8003452:	4293      	cmp	r3, r2
 8003454:	d029      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 8003456:	3218      	adds	r2, #24
 8003458:	4293      	cmp	r3, r2
 800345a:	d026      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 800345c:	3218      	adds	r2, #24
 800345e:	4293      	cmp	r3, r2
 8003460:	d023      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 8003462:	3218      	adds	r2, #24
 8003464:	4293      	cmp	r3, r2
 8003466:	d020      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 8003468:	3218      	adds	r2, #24
 800346a:	4293      	cmp	r3, r2
 800346c:	d01d      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 800346e:	3218      	adds	r2, #24
 8003470:	4293      	cmp	r3, r2
 8003472:	d01a      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 8003474:	3218      	adds	r2, #24
 8003476:	4293      	cmp	r3, r2
 8003478:	d017      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 800347a:	4a2f      	ldr	r2, [pc, #188]	@ (8003538 <HAL_DMA_Init+0x328>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d014      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 8003480:	3214      	adds	r2, #20
 8003482:	4293      	cmp	r3, r2
 8003484:	d011      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 8003486:	3214      	adds	r2, #20
 8003488:	4293      	cmp	r3, r2
 800348a:	d00e      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 800348c:	3214      	adds	r2, #20
 800348e:	4293      	cmp	r3, r2
 8003490:	d00b      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 8003492:	3214      	adds	r2, #20
 8003494:	4293      	cmp	r3, r2
 8003496:	d008      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 8003498:	3214      	adds	r2, #20
 800349a:	4293      	cmp	r3, r2
 800349c:	d005      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 800349e:	3214      	adds	r2, #20
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d002      	beq.n	80034aa <HAL_DMA_Init+0x29a>
 80034a4:	3214      	adds	r2, #20
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d119      	bne.n	80034de <HAL_DMA_Init+0x2ce>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034aa:	4620      	mov	r0, r4
 80034ac:	2500      	movs	r5, #0
 80034ae:	f7ff fe2d 	bl	800310c <_ZL32DMA_CalcDMAMUXChannelBaseAndMaskP19__DMA_HandleTypeDef>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034b2:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034b4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034b6:	2b80      	cmp	r3, #128	@ 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034b8:	bf04      	itt	eq
 80034ba:	2300      	moveq	r3, #0
 80034bc:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034be:	6863      	ldr	r3, [r4, #4]
 80034c0:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80034c2:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034c4:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80034c6:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034c8:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	@ 0x64
 80034cc:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80034ce:	d82c      	bhi.n	800352a <HAL_DMA_Init+0x31a>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034d0:	f7ff fe66 	bl	80031a0 <_ZL35DMA_CalcDMAMUXRequestGenBaseAndMaskP19__DMA_HandleTypeDef>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80034d4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80034d6:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034d8:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	@ 0x70
 80034dc:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034de:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80034e0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034e2:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80034e4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80034e8:	e744      	b.n	8003374 <HAL_DMA_Init+0x164>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034ea:	4a14      	ldr	r2, [pc, #80]	@ (800353c <HAL_DMA_Init+0x32c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	f43f aecd 	beq.w	800328c <HAL_DMA_Init+0x7c>
 80034f2:	3214      	adds	r2, #20
 80034f4:	4293      	cmp	r3, r2
 80034f6:	f43f aec9 	beq.w	800328c <HAL_DMA_Init+0x7c>
 80034fa:	3214      	adds	r2, #20
 80034fc:	4293      	cmp	r3, r2
 80034fe:	f43f aec5 	beq.w	800328c <HAL_DMA_Init+0x7c>
 8003502:	3214      	adds	r2, #20
 8003504:	4293      	cmp	r3, r2
 8003506:	f43f aec1 	beq.w	800328c <HAL_DMA_Init+0x7c>
 800350a:	3214      	adds	r2, #20
 800350c:	4293      	cmp	r3, r2
 800350e:	f43f aebd 	beq.w	800328c <HAL_DMA_Init+0x7c>
 8003512:	3214      	adds	r2, #20
 8003514:	4293      	cmp	r3, r2
 8003516:	f43f aeb9 	beq.w	800328c <HAL_DMA_Init+0x7c>
 800351a:	3214      	adds	r2, #20
 800351c:	4293      	cmp	r3, r2
 800351e:	f43f aeb5 	beq.w	800328c <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003522:	2340      	movs	r3, #64	@ 0x40
 8003524:	e721      	b.n	800336a <HAL_DMA_Init+0x15a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003526:	2210      	movs	r2, #16
 8003528:	e6c2      	b.n	80032b0 <HAL_DMA_Init+0xa0>
      hdma->DMAmuxRequestGenStatus = 0U;
 800352a:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800352e:	6765      	str	r5, [r4, #116]	@ 0x74
 8003530:	e7d5      	b.n	80034de <HAL_DMA_Init+0x2ce>
 8003532:	bf00      	nop
 8003534:	40020028 	.word	0x40020028
 8003538:	58025408 	.word	0x58025408
 800353c:	5802541c 	.word	0x5802541c

08003540 <HAL_DMA_Start_IT>:
{
 8003540:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 8003542:	4605      	mov	r5, r0
 8003544:	2800      	cmp	r0, #0
 8003546:	f000 80da 	beq.w	80036fe <HAL_DMA_Start_IT+0x1be>
  __HAL_LOCK(hdma);
 800354a:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 800354e:	2801      	cmp	r0, #1
 8003550:	f000 80d7 	beq.w	8003702 <HAL_DMA_Start_IT+0x1c2>
 8003554:	2001      	movs	r0, #1
 8003556:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800355a:	f895 0035 	ldrb.w	r0, [r5, #53]	@ 0x35
 800355e:	2801      	cmp	r0, #1
 8003560:	f04f 0000 	mov.w	r0, #0
 8003564:	f040 80c6 	bne.w	80036f4 <HAL_DMA_Start_IT+0x1b4>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003568:	2402      	movs	r4, #2
    __HAL_DMA_DISABLE(hdma);
 800356a:	4e67      	ldr	r6, [pc, #412]	@ (8003708 <HAL_DMA_Start_IT+0x1c8>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800356c:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8003570:	682c      	ldr	r4, [r5, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003572:	6568      	str	r0, [r5, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 8003574:	42b4      	cmp	r4, r6
 8003576:	d01e      	beq.n	80035b6 <HAL_DMA_Start_IT+0x76>
 8003578:	4864      	ldr	r0, [pc, #400]	@ (800370c <HAL_DMA_Start_IT+0x1cc>)
 800357a:	4284      	cmp	r4, r0
 800357c:	d01b      	beq.n	80035b6 <HAL_DMA_Start_IT+0x76>
 800357e:	3018      	adds	r0, #24
 8003580:	4284      	cmp	r4, r0
 8003582:	d018      	beq.n	80035b6 <HAL_DMA_Start_IT+0x76>
 8003584:	3018      	adds	r0, #24
 8003586:	4284      	cmp	r4, r0
 8003588:	d015      	beq.n	80035b6 <HAL_DMA_Start_IT+0x76>
 800358a:	3018      	adds	r0, #24
 800358c:	4284      	cmp	r4, r0
 800358e:	d012      	beq.n	80035b6 <HAL_DMA_Start_IT+0x76>
 8003590:	3018      	adds	r0, #24
 8003592:	4284      	cmp	r4, r0
 8003594:	d00f      	beq.n	80035b6 <HAL_DMA_Start_IT+0x76>
 8003596:	3018      	adds	r0, #24
 8003598:	4284      	cmp	r4, r0
 800359a:	d00c      	beq.n	80035b6 <HAL_DMA_Start_IT+0x76>
 800359c:	3018      	adds	r0, #24
 800359e:	4284      	cmp	r4, r0
 80035a0:	d009      	beq.n	80035b6 <HAL_DMA_Start_IT+0x76>
 80035a2:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 80035a6:	4284      	cmp	r4, r0
 80035a8:	d005      	beq.n	80035b6 <HAL_DMA_Start_IT+0x76>
 80035aa:	3018      	adds	r0, #24
 80035ac:	4284      	cmp	r4, r0
 80035ae:	d002      	beq.n	80035b6 <HAL_DMA_Start_IT+0x76>
 80035b0:	3018      	adds	r0, #24
 80035b2:	4284      	cmp	r4, r0
 80035b4:	d0ff      	beq.n	80035b6 <HAL_DMA_Start_IT+0x76>
 80035b6:	6820      	ldr	r0, [r4, #0]
 80035b8:	f020 0001 	bic.w	r0, r0, #1
 80035bc:	6020      	str	r0, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035be:	4628      	mov	r0, r5
 80035c0:	f7ff fcb0 	bl	8002f24 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035c4:	42b4      	cmp	r4, r6
 80035c6:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80035c8:	d053      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
 80035ca:	4b50      	ldr	r3, [pc, #320]	@ (800370c <HAL_DMA_Start_IT+0x1cc>)
 80035cc:	429c      	cmp	r4, r3
 80035ce:	d050      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
 80035d0:	3318      	adds	r3, #24
 80035d2:	429c      	cmp	r4, r3
 80035d4:	d04d      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
 80035d6:	3318      	adds	r3, #24
 80035d8:	429c      	cmp	r4, r3
 80035da:	d04a      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
 80035dc:	3318      	adds	r3, #24
 80035de:	429c      	cmp	r4, r3
 80035e0:	d047      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
 80035e2:	3318      	adds	r3, #24
 80035e4:	429c      	cmp	r4, r3
 80035e6:	d044      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
 80035e8:	3318      	adds	r3, #24
 80035ea:	429c      	cmp	r4, r3
 80035ec:	d041      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
 80035ee:	3318      	adds	r3, #24
 80035f0:	429c      	cmp	r4, r3
 80035f2:	d03e      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
 80035f4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80035f8:	429c      	cmp	r4, r3
 80035fa:	d03a      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
 80035fc:	3318      	adds	r3, #24
 80035fe:	429c      	cmp	r4, r3
 8003600:	d037      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
 8003602:	3318      	adds	r3, #24
 8003604:	429c      	cmp	r4, r3
 8003606:	d034      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
 8003608:	3318      	adds	r3, #24
 800360a:	429c      	cmp	r4, r3
 800360c:	d031      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
 800360e:	3318      	adds	r3, #24
 8003610:	429c      	cmp	r4, r3
 8003612:	d02e      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
 8003614:	3318      	adds	r3, #24
 8003616:	429c      	cmp	r4, r3
 8003618:	d02b      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
 800361a:	3318      	adds	r3, #24
 800361c:	429c      	cmp	r4, r3
 800361e:	d028      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
 8003620:	3318      	adds	r3, #24
 8003622:	429c      	cmp	r4, r3
 8003624:	d025      	beq.n	8003672 <HAL_DMA_Start_IT+0x132>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	f023 030e 	bic.w	r3, r3, #14
 800362c:	f043 030a 	orr.w	r3, r3, #10
 8003630:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003632:	2a00      	cmp	r2, #0
 8003634:	d154      	bne.n	80036e0 <HAL_DMA_Start_IT+0x1a0>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003636:	4b36      	ldr	r3, [pc, #216]	@ (8003710 <HAL_DMA_Start_IT+0x1d0>)
 8003638:	429c      	cmp	r4, r3
 800363a:	d025      	beq.n	8003688 <HAL_DMA_Start_IT+0x148>
 800363c:	4b35      	ldr	r3, [pc, #212]	@ (8003714 <HAL_DMA_Start_IT+0x1d4>)
 800363e:	429c      	cmp	r4, r3
 8003640:	d022      	beq.n	8003688 <HAL_DMA_Start_IT+0x148>
 8003642:	3314      	adds	r3, #20
 8003644:	429c      	cmp	r4, r3
 8003646:	d01f      	beq.n	8003688 <HAL_DMA_Start_IT+0x148>
 8003648:	3314      	adds	r3, #20
 800364a:	429c      	cmp	r4, r3
 800364c:	d01c      	beq.n	8003688 <HAL_DMA_Start_IT+0x148>
 800364e:	3314      	adds	r3, #20
 8003650:	429c      	cmp	r4, r3
 8003652:	d019      	beq.n	8003688 <HAL_DMA_Start_IT+0x148>
 8003654:	3314      	adds	r3, #20
 8003656:	429c      	cmp	r4, r3
 8003658:	d016      	beq.n	8003688 <HAL_DMA_Start_IT+0x148>
 800365a:	3314      	adds	r3, #20
 800365c:	429c      	cmp	r4, r3
 800365e:	d013      	beq.n	8003688 <HAL_DMA_Start_IT+0x148>
 8003660:	3314      	adds	r3, #20
 8003662:	429c      	cmp	r4, r3
 8003664:	d010      	beq.n	8003688 <HAL_DMA_Start_IT+0x148>
    __HAL_DMA_ENABLE(hdma);
 8003666:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003668:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6023      	str	r3, [r4, #0]
}
 8003670:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	f023 031e 	bic.w	r3, r3, #30
 8003678:	f043 0316 	orr.w	r3, r3, #22
 800367c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800367e:	b11a      	cbz	r2, 8003688 <HAL_DMA_Start_IT+0x148>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	f043 0308 	orr.w	r3, r3, #8
 8003686:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003688:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	03d2      	lsls	r2, r2, #15
 800368e:	d42c      	bmi.n	80036ea <HAL_DMA_Start_IT+0x1aa>
      if(hdma->DMAmuxRequestGen != 0U)
 8003690:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8003692:	b11b      	cbz	r3, 800369c <HAL_DMA_Start_IT+0x15c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800369a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800369c:	42b4      	cmp	r4, r6
 800369e:	d0e2      	beq.n	8003666 <HAL_DMA_Start_IT+0x126>
 80036a0:	4b1a      	ldr	r3, [pc, #104]	@ (800370c <HAL_DMA_Start_IT+0x1cc>)
 80036a2:	429c      	cmp	r4, r3
 80036a4:	d0df      	beq.n	8003666 <HAL_DMA_Start_IT+0x126>
 80036a6:	3318      	adds	r3, #24
 80036a8:	429c      	cmp	r4, r3
 80036aa:	d0dc      	beq.n	8003666 <HAL_DMA_Start_IT+0x126>
 80036ac:	3318      	adds	r3, #24
 80036ae:	429c      	cmp	r4, r3
 80036b0:	d0d9      	beq.n	8003666 <HAL_DMA_Start_IT+0x126>
 80036b2:	3318      	adds	r3, #24
 80036b4:	429c      	cmp	r4, r3
 80036b6:	d0d6      	beq.n	8003666 <HAL_DMA_Start_IT+0x126>
 80036b8:	3318      	adds	r3, #24
 80036ba:	429c      	cmp	r4, r3
 80036bc:	d0d3      	beq.n	8003666 <HAL_DMA_Start_IT+0x126>
 80036be:	3318      	adds	r3, #24
 80036c0:	429c      	cmp	r4, r3
 80036c2:	d0d0      	beq.n	8003666 <HAL_DMA_Start_IT+0x126>
 80036c4:	3318      	adds	r3, #24
 80036c6:	429c      	cmp	r4, r3
 80036c8:	d0cd      	beq.n	8003666 <HAL_DMA_Start_IT+0x126>
 80036ca:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80036ce:	429c      	cmp	r4, r3
 80036d0:	d0c9      	beq.n	8003666 <HAL_DMA_Start_IT+0x126>
 80036d2:	3318      	adds	r3, #24
 80036d4:	429c      	cmp	r4, r3
 80036d6:	d0c6      	beq.n	8003666 <HAL_DMA_Start_IT+0x126>
 80036d8:	3318      	adds	r3, #24
 80036da:	429c      	cmp	r4, r3
 80036dc:	d0c3      	beq.n	8003666 <HAL_DMA_Start_IT+0x126>
 80036de:	e7c2      	b.n	8003666 <HAL_DMA_Start_IT+0x126>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	f043 0304 	orr.w	r3, r3, #4
 80036e6:	6023      	str	r3, [r4, #0]
 80036e8:	e7a5      	b.n	8003636 <HAL_DMA_Start_IT+0xf6>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e7cd      	b.n	8003690 <HAL_DMA_Start_IT+0x150>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80036f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 80036f8:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80036fc:	656b      	str	r3, [r5, #84]	@ 0x54
    return HAL_ERROR;
 80036fe:	2001      	movs	r0, #1
 8003700:	e7b6      	b.n	8003670 <HAL_DMA_Start_IT+0x130>
  __HAL_LOCK(hdma);
 8003702:	2002      	movs	r0, #2
 8003704:	e7b4      	b.n	8003670 <HAL_DMA_Start_IT+0x130>
 8003706:	bf00      	nop
 8003708:	40020010 	.word	0x40020010
 800370c:	40020028 	.word	0x40020028
 8003710:	58025408 	.word	0x58025408
 8003714:	5802541c 	.word	0x5802541c

08003718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800371c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371e:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 80038e4 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003722:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003726:	680a      	ldr	r2, [r1, #0]
 8003728:	fa32 f503 	lsrs.w	r5, r2, r3
 800372c:	d102      	bne.n	8003734 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800372e:	b003      	add	sp, #12
 8003730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003734:	2501      	movs	r5, #1
 8003736:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 800373a:	ea18 0202 	ands.w	r2, r8, r2
 800373e:	f000 80bb 	beq.w	80038b8 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003742:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003744:	2703      	movs	r7, #3
 8003746:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800374a:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800374e:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003752:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003754:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003758:	2f01      	cmp	r7, #1
 800375a:	d834      	bhi.n	80037c6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 800375c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800375e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003762:	68cf      	ldr	r7, [r1, #12]
 8003764:	fa07 f70e 	lsl.w	r7, r7, lr
 8003768:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800376c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800376e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003770:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003774:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8003778:	409f      	lsls	r7, r3
 800377a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800377e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003780:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003782:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003784:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003788:	688f      	ldr	r7, [r1, #8]
 800378a:	fa07 f70e 	lsl.w	r7, r7, lr
 800378e:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8003792:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003794:	d119      	bne.n	80037ca <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8003796:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800379a:	f003 0a07 	and.w	sl, r3, #7
 800379e:	f04f 0b0f 	mov.w	fp, #15
 80037a2:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80037a6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80037aa:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037ae:	fa0b fb0a 	lsl.w	fp, fp, sl
 80037b2:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037b6:	690f      	ldr	r7, [r1, #16]
 80037b8:	fa07 f70a 	lsl.w	r7, r7, sl
 80037bc:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 80037c0:	f8c8 7020 	str.w	r7, [r8, #32]
 80037c4:	e001      	b.n	80037ca <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c6:	2d03      	cmp	r5, #3
 80037c8:	d1da      	bne.n	8003780 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 80037ca:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037cc:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037d0:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037d4:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037d8:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 80037dc:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037de:	d06b      	beq.n	80038b8 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e0:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 80037e4:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037e8:	f003 0c03 	and.w	ip, r3, #3
 80037ec:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f0:	f045 0502 	orr.w	r5, r5, #2
 80037f4:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037f8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037fc:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8003800:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8003804:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003808:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380c:	f005 0502 	and.w	r5, r5, #2
 8003810:	9501      	str	r5, [sp, #4]
 8003812:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003814:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003816:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800381a:	4d31      	ldr	r5, [pc, #196]	@ (80038e0 <HAL_GPIO_Init+0x1c8>)
 800381c:	42a8      	cmp	r0, r5
 800381e:	d04d      	beq.n	80038bc <HAL_GPIO_Init+0x1a4>
 8003820:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003824:	42a8      	cmp	r0, r5
 8003826:	d04b      	beq.n	80038c0 <HAL_GPIO_Init+0x1a8>
 8003828:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800382c:	42a8      	cmp	r0, r5
 800382e:	d049      	beq.n	80038c4 <HAL_GPIO_Init+0x1ac>
 8003830:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003834:	42a8      	cmp	r0, r5
 8003836:	d047      	beq.n	80038c8 <HAL_GPIO_Init+0x1b0>
 8003838:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800383c:	42a8      	cmp	r0, r5
 800383e:	d045      	beq.n	80038cc <HAL_GPIO_Init+0x1b4>
 8003840:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003844:	42a8      	cmp	r0, r5
 8003846:	d043      	beq.n	80038d0 <HAL_GPIO_Init+0x1b8>
 8003848:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800384c:	42a8      	cmp	r0, r5
 800384e:	d041      	beq.n	80038d4 <HAL_GPIO_Init+0x1bc>
 8003850:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003854:	42a8      	cmp	r0, r5
 8003856:	d03f      	beq.n	80038d8 <HAL_GPIO_Init+0x1c0>
 8003858:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800385c:	42a8      	cmp	r0, r5
 800385e:	d03d      	beq.n	80038dc <HAL_GPIO_Init+0x1c4>
 8003860:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003864:	42a8      	cmp	r0, r5
 8003866:	bf14      	ite	ne
 8003868:	250a      	movne	r5, #10
 800386a:	2509      	moveq	r5, #9
 800386c:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003870:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003874:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003878:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800387a:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800387e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003880:	bf0c      	ite	eq
 8003882:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003884:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003886:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 800388a:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800388c:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800388e:	bf0c      	ite	eq
 8003890:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003892:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003894:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8003898:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800389a:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 800389e:	bf0c      	ite	eq
 80038a0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80038a2:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038a4:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80038a6:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80038aa:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 80038ae:	bf54      	ite	pl
 80038b0:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80038b2:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80038b4:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 80038b8:	3301      	adds	r3, #1
 80038ba:	e734      	b.n	8003726 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038bc:	2500      	movs	r5, #0
 80038be:	e7d5      	b.n	800386c <HAL_GPIO_Init+0x154>
 80038c0:	2501      	movs	r5, #1
 80038c2:	e7d3      	b.n	800386c <HAL_GPIO_Init+0x154>
 80038c4:	2502      	movs	r5, #2
 80038c6:	e7d1      	b.n	800386c <HAL_GPIO_Init+0x154>
 80038c8:	2503      	movs	r5, #3
 80038ca:	e7cf      	b.n	800386c <HAL_GPIO_Init+0x154>
 80038cc:	2504      	movs	r5, #4
 80038ce:	e7cd      	b.n	800386c <HAL_GPIO_Init+0x154>
 80038d0:	2505      	movs	r5, #5
 80038d2:	e7cb      	b.n	800386c <HAL_GPIO_Init+0x154>
 80038d4:	2506      	movs	r5, #6
 80038d6:	e7c9      	b.n	800386c <HAL_GPIO_Init+0x154>
 80038d8:	2507      	movs	r5, #7
 80038da:	e7c7      	b.n	800386c <HAL_GPIO_Init+0x154>
 80038dc:	2508      	movs	r5, #8
 80038de:	e7c5      	b.n	800386c <HAL_GPIO_Init+0x154>
 80038e0:	58020000 	.word	0x58020000
 80038e4:	58024400 	.word	0x58024400

080038e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038e8:	b10a      	cbz	r2, 80038ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038ea:	6181      	str	r1, [r0, #24]
  }
}
 80038ec:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038ee:	0409      	lsls	r1, r1, #16
 80038f0:	e7fb      	b.n	80038ea <HAL_GPIO_WritePin+0x2>
	...

080038f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038f4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80038f6:	4c10      	ldr	r4, [pc, #64]	@ (8003938 <HAL_PWREx_ConfigSupply+0x44>)
 80038f8:	68e3      	ldr	r3, [r4, #12]
 80038fa:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038fe:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003900:	d105      	bne.n	800390e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	1a18      	subs	r0, r3, r0
 8003908:	bf18      	it	ne
 800390a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800390c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800390e:	f023 0307 	bic.w	r3, r3, #7
 8003912:	4318      	orrs	r0, r3
 8003914:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8003916:	f7fe fc19 	bl	800214c <HAL_GetTick>
 800391a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	049b      	lsls	r3, r3, #18
 8003920:	d501      	bpl.n	8003926 <HAL_PWREx_ConfigSupply+0x32>
      return HAL_OK;
 8003922:	2000      	movs	r0, #0
 8003924:	e7f2      	b.n	800390c <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003926:	f7fe fc11 	bl	800214c <HAL_GetTick>
 800392a:	1b40      	subs	r0, r0, r5
 800392c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003930:	d9f4      	bls.n	800391c <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8003932:	2001      	movs	r0, #1
 8003934:	e7ea      	b.n	800390c <HAL_PWREx_ConfigSupply+0x18>
 8003936:	bf00      	nop
 8003938:	58024800 	.word	0x58024800

0800393c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800393e:	4604      	mov	r4, r0
 8003940:	2800      	cmp	r0, #0
 8003942:	d074      	beq.n	8003a2e <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003944:	6803      	ldr	r3, [r0, #0]
 8003946:	07d8      	lsls	r0, r3, #31
 8003948:	d45e      	bmi.n	8003a08 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	0799      	lsls	r1, r3, #30
 800394e:	f100 80ad 	bmi.w	8003aac <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	06da      	lsls	r2, r3, #27
 8003956:	d527      	bpl.n	80039a8 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003958:	4a9c      	ldr	r2, [pc, #624]	@ (8003bcc <HAL_RCC_OscConfig+0x290>)
 800395a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800395c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800395e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003962:	2b08      	cmp	r3, #8
 8003964:	d007      	beq.n	8003976 <HAL_RCC_OscConfig+0x3a>
 8003966:	2b18      	cmp	r3, #24
 8003968:	f040 8103 	bne.w	8003b72 <HAL_RCC_OscConfig+0x236>
 800396c:	f001 0303 	and.w	r3, r1, #3
 8003970:	2b01      	cmp	r3, #1
 8003972:	f040 80fe 	bne.w	8003b72 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003976:	6813      	ldr	r3, [r2, #0]
 8003978:	05db      	lsls	r3, r3, #23
 800397a:	d502      	bpl.n	8003982 <HAL_RCC_OscConfig+0x46>
 800397c:	69e3      	ldr	r3, [r4, #28]
 800397e:	2b80      	cmp	r3, #128	@ 0x80
 8003980:	d155      	bne.n	8003a2e <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003982:	f7fe fbfb 	bl	800217c <HAL_GetREVID>
 8003986:	f241 0303 	movw	r3, #4099	@ 0x1003
 800398a:	6a21      	ldr	r1, [r4, #32]
 800398c:	4298      	cmp	r0, r3
 800398e:	4b8f      	ldr	r3, [pc, #572]	@ (8003bcc <HAL_RCC_OscConfig+0x290>)
 8003990:	f200 80e8 	bhi.w	8003b64 <HAL_RCC_OscConfig+0x228>
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	2920      	cmp	r1, #32
 8003998:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800399c:	bf0c      	ite	eq
 800399e:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 80039a2:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 80039a6:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	0719      	lsls	r1, r3, #28
 80039ac:	f100 8123 	bmi.w	8003bf6 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	069a      	lsls	r2, r3, #26
 80039b4:	f100 8144 	bmi.w	8003c40 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	075d      	lsls	r5, r3, #29
 80039bc:	d51e      	bpl.n	80039fc <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039be:	4d84      	ldr	r5, [pc, #528]	@ (8003bd0 <HAL_RCC_OscConfig+0x294>)
 80039c0:	682b      	ldr	r3, [r5, #0]
 80039c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c6:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039c8:	f7fe fbc0 	bl	800214c <HAL_GetTick>
 80039cc:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039ce:	682b      	ldr	r3, [r5, #0]
 80039d0:	05da      	lsls	r2, r3, #23
 80039d2:	f140 815a 	bpl.w	8003c8a <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d6:	68a3      	ldr	r3, [r4, #8]
 80039d8:	4d7c      	ldr	r5, [pc, #496]	@ (8003bcc <HAL_RCC_OscConfig+0x290>)
 80039da:	2b01      	cmp	r3, #1
 80039dc:	f040 815c 	bne.w	8003c98 <HAL_RCC_OscConfig+0x35c>
 80039e0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e8:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80039ec:	f7fe fbae 	bl	800214c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039f0:	4e76      	ldr	r6, [pc, #472]	@ (8003bcc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80039f2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039f4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80039f6:	079b      	lsls	r3, r3, #30
 80039f8:	f140 8174 	bpl.w	8003ce4 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039fc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80039fe:	2900      	cmp	r1, #0
 8003a00:	f040 8177 	bne.w	8003cf2 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8003a04:	2000      	movs	r0, #0
 8003a06:	e02b      	b.n	8003a60 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a08:	4a70      	ldr	r2, [pc, #448]	@ (8003bcc <HAL_RCC_OscConfig+0x290>)
 8003a0a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a0c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d005      	beq.n	8003a22 <HAL_RCC_OscConfig+0xe6>
 8003a16:	2b18      	cmp	r3, #24
 8003a18:	d10b      	bne.n	8003a32 <HAL_RCC_OscConfig+0xf6>
 8003a1a:	f001 0303 	and.w	r3, r1, #3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d107      	bne.n	8003a32 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a22:	6813      	ldr	r3, [r2, #0]
 8003a24:	039a      	lsls	r2, r3, #14
 8003a26:	d590      	bpl.n	800394a <HAL_RCC_OscConfig+0xe>
 8003a28:	6863      	ldr	r3, [r4, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d18d      	bne.n	800394a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8003a2e:	2001      	movs	r0, #1
 8003a30:	e016      	b.n	8003a60 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a32:	6863      	ldr	r3, [r4, #4]
 8003a34:	4d65      	ldr	r5, [pc, #404]	@ (8003bcc <HAL_RCC_OscConfig+0x290>)
 8003a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a3a:	d112      	bne.n	8003a62 <HAL_RCC_OscConfig+0x126>
 8003a3c:	682b      	ldr	r3, [r5, #0]
 8003a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a42:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a44:	f7fe fb82 	bl	800214c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a48:	4e60      	ldr	r6, [pc, #384]	@ (8003bcc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8003a4a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a4c:	6833      	ldr	r3, [r6, #0]
 8003a4e:	039b      	lsls	r3, r3, #14
 8003a50:	f53f af7b 	bmi.w	800394a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fe fb7a 	bl	800214c <HAL_GetTick>
 8003a58:	1b40      	subs	r0, r0, r5
 8003a5a:	2864      	cmp	r0, #100	@ 0x64
 8003a5c:	d9f6      	bls.n	8003a4c <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8003a5e:	2003      	movs	r0, #3
}
 8003a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a62:	b9a3      	cbnz	r3, 8003a8e <HAL_RCC_OscConfig+0x152>
 8003a64:	682b      	ldr	r3, [r5, #0]
 8003a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a6a:	602b      	str	r3, [r5, #0]
 8003a6c:	682b      	ldr	r3, [r5, #0]
 8003a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a72:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a74:	f7fe fb6a 	bl	800214c <HAL_GetTick>
 8003a78:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a7a:	682b      	ldr	r3, [r5, #0]
 8003a7c:	039f      	lsls	r7, r3, #14
 8003a7e:	f57f af64 	bpl.w	800394a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a82:	f7fe fb63 	bl	800214c <HAL_GetTick>
 8003a86:	1b80      	subs	r0, r0, r6
 8003a88:	2864      	cmp	r0, #100	@ 0x64
 8003a8a:	d9f6      	bls.n	8003a7a <HAL_RCC_OscConfig+0x13e>
 8003a8c:	e7e7      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a92:	682b      	ldr	r3, [r5, #0]
 8003a94:	d103      	bne.n	8003a9e <HAL_RCC_OscConfig+0x162>
 8003a96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a9a:	602b      	str	r3, [r5, #0]
 8003a9c:	e7ce      	b.n	8003a3c <HAL_RCC_OscConfig+0x100>
 8003a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa2:	602b      	str	r3, [r5, #0]
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aaa:	e7ca      	b.n	8003a42 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aac:	4947      	ldr	r1, [pc, #284]	@ (8003bcc <HAL_RCC_OscConfig+0x290>)
 8003aae:	68e2      	ldr	r2, [r4, #12]
 8003ab0:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ab2:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ab4:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x186>
 8003aba:	2b18      	cmp	r3, #24
 8003abc:	d12a      	bne.n	8003b14 <HAL_RCC_OscConfig+0x1d8>
 8003abe:	0780      	lsls	r0, r0, #30
 8003ac0:	d128      	bne.n	8003b14 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac2:	680b      	ldr	r3, [r1, #0]
 8003ac4:	075b      	lsls	r3, r3, #29
 8003ac6:	d501      	bpl.n	8003acc <HAL_RCC_OscConfig+0x190>
 8003ac8:	2a00      	cmp	r2, #0
 8003aca:	d0b0      	beq.n	8003a2e <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003acc:	4d3f      	ldr	r5, [pc, #252]	@ (8003bcc <HAL_RCC_OscConfig+0x290>)
 8003ace:	682b      	ldr	r3, [r5, #0]
 8003ad0:	f023 0319 	bic.w	r3, r3, #25
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ad8:	f7fe fb38 	bl	800214c <HAL_GetTick>
 8003adc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ade:	682b      	ldr	r3, [r5, #0]
 8003ae0:	075f      	lsls	r7, r3, #29
 8003ae2:	d511      	bpl.n	8003b08 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae4:	f7fe fb4a 	bl	800217c <HAL_GetREVID>
 8003ae8:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003aec:	6922      	ldr	r2, [r4, #16]
 8003aee:	4298      	cmp	r0, r3
 8003af0:	686b      	ldr	r3, [r5, #4]
 8003af2:	d822      	bhi.n	8003b3a <HAL_RCC_OscConfig+0x1fe>
 8003af4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003af8:	2a40      	cmp	r2, #64	@ 0x40
 8003afa:	bf0c      	ite	eq
 8003afc:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8003b00:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8003b04:	606b      	str	r3, [r5, #4]
 8003b06:	e724      	b.n	8003952 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b08:	f7fe fb20 	bl	800214c <HAL_GetTick>
 8003b0c:	1b80      	subs	r0, r0, r6
 8003b0e:	2802      	cmp	r0, #2
 8003b10:	d9e5      	bls.n	8003ade <HAL_RCC_OscConfig+0x1a2>
 8003b12:	e7a4      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b14:	4d2d      	ldr	r5, [pc, #180]	@ (8003bcc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b16:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b18:	b1a2      	cbz	r2, 8003b44 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b1a:	f023 0319 	bic.w	r3, r3, #25
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b22:	f7fe fb13 	bl	800214c <HAL_GetTick>
 8003b26:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	0758      	lsls	r0, r3, #29
 8003b2c:	d4da      	bmi.n	8003ae4 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2e:	f7fe fb0d 	bl	800214c <HAL_GetTick>
 8003b32:	1b80      	subs	r0, r0, r6
 8003b34:	2802      	cmp	r0, #2
 8003b36:	d9f7      	bls.n	8003b28 <HAL_RCC_OscConfig+0x1ec>
 8003b38:	e791      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003b3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003b42:	e7df      	b.n	8003b04 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b4a:	f7fe faff 	bl	800214c <HAL_GetTick>
 8003b4e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	0759      	lsls	r1, r3, #29
 8003b54:	f57f aefd 	bpl.w	8003952 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b58:	f7fe faf8 	bl	800214c <HAL_GetTick>
 8003b5c:	1b80      	subs	r0, r0, r6
 8003b5e:	2802      	cmp	r0, #2
 8003b60:	d9f6      	bls.n	8003b50 <HAL_RCC_OscConfig+0x214>
 8003b62:	e77c      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8003b6a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	e71a      	b.n	80039a8 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b72:	69e3      	ldr	r3, [r4, #28]
 8003b74:	4d15      	ldr	r5, [pc, #84]	@ (8003bcc <HAL_RCC_OscConfig+0x290>)
 8003b76:	b36b      	cbz	r3, 8003bd4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8003b78:	682b      	ldr	r3, [r5, #0]
 8003b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b7e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b80:	f7fe fae4 	bl	800214c <HAL_GetTick>
 8003b84:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b86:	682b      	ldr	r3, [r5, #0]
 8003b88:	05df      	lsls	r7, r3, #23
 8003b8a:	d511      	bpl.n	8003bb0 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b8c:	f7fe faf6 	bl	800217c <HAL_GetREVID>
 8003b90:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003b94:	6a22      	ldr	r2, [r4, #32]
 8003b96:	4298      	cmp	r0, r3
 8003b98:	d810      	bhi.n	8003bbc <HAL_RCC_OscConfig+0x280>
 8003b9a:	686b      	ldr	r3, [r5, #4]
 8003b9c:	2a20      	cmp	r2, #32
 8003b9e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003ba2:	bf0c      	ite	eq
 8003ba4:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8003ba8:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8003bac:	606b      	str	r3, [r5, #4]
 8003bae:	e6fb      	b.n	80039a8 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bb0:	f7fe facc 	bl	800214c <HAL_GetTick>
 8003bb4:	1b80      	subs	r0, r0, r6
 8003bb6:	2802      	cmp	r0, #2
 8003bb8:	d9e5      	bls.n	8003b86 <HAL_RCC_OscConfig+0x24a>
 8003bba:	e750      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bbc:	68eb      	ldr	r3, [r5, #12]
 8003bbe:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003bc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003bc6:	60eb      	str	r3, [r5, #12]
 8003bc8:	e6ee      	b.n	80039a8 <HAL_RCC_OscConfig+0x6c>
 8003bca:	bf00      	nop
 8003bcc:	58024400 	.word	0x58024400
 8003bd0:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8003bd4:	682b      	ldr	r3, [r5, #0]
 8003bd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003bdc:	f7fe fab6 	bl	800214c <HAL_GetTick>
 8003be0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003be2:	682b      	ldr	r3, [r5, #0]
 8003be4:	05d8      	lsls	r0, r3, #23
 8003be6:	f57f aedf 	bpl.w	80039a8 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bea:	f7fe faaf 	bl	800214c <HAL_GetTick>
 8003bee:	1b80      	subs	r0, r0, r6
 8003bf0:	2802      	cmp	r0, #2
 8003bf2:	d9f6      	bls.n	8003be2 <HAL_RCC_OscConfig+0x2a6>
 8003bf4:	e733      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bf6:	6963      	ldr	r3, [r4, #20]
 8003bf8:	4da3      	ldr	r5, [pc, #652]	@ (8003e88 <HAL_RCC_OscConfig+0x54c>)
 8003bfa:	b183      	cbz	r3, 8003c1e <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8003bfc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003c04:	f7fe faa2 	bl	800214c <HAL_GetTick>
 8003c08:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c0a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003c0c:	079b      	lsls	r3, r3, #30
 8003c0e:	f53f aecf 	bmi.w	80039b0 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c12:	f7fe fa9b 	bl	800214c <HAL_GetTick>
 8003c16:	1b80      	subs	r0, r0, r6
 8003c18:	2802      	cmp	r0, #2
 8003c1a:	d9f6      	bls.n	8003c0a <HAL_RCC_OscConfig+0x2ce>
 8003c1c:	e71f      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8003c1e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003c26:	f7fe fa91 	bl	800214c <HAL_GetTick>
 8003c2a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c2c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003c2e:	079f      	lsls	r7, r3, #30
 8003c30:	f57f aebe 	bpl.w	80039b0 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c34:	f7fe fa8a 	bl	800214c <HAL_GetTick>
 8003c38:	1b80      	subs	r0, r0, r6
 8003c3a:	2802      	cmp	r0, #2
 8003c3c:	d9f6      	bls.n	8003c2c <HAL_RCC_OscConfig+0x2f0>
 8003c3e:	e70e      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c40:	69a3      	ldr	r3, [r4, #24]
 8003c42:	4d91      	ldr	r5, [pc, #580]	@ (8003e88 <HAL_RCC_OscConfig+0x54c>)
 8003c44:	b183      	cbz	r3, 8003c68 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 8003c46:	682b      	ldr	r3, [r5, #0]
 8003c48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c4c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003c4e:	f7fe fa7d 	bl	800214c <HAL_GetTick>
 8003c52:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	0498      	lsls	r0, r3, #18
 8003c58:	f53f aeae 	bmi.w	80039b8 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c5c:	f7fe fa76 	bl	800214c <HAL_GetTick>
 8003c60:	1b80      	subs	r0, r0, r6
 8003c62:	2802      	cmp	r0, #2
 8003c64:	d9f6      	bls.n	8003c54 <HAL_RCC_OscConfig+0x318>
 8003c66:	e6fa      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8003c68:	682b      	ldr	r3, [r5, #0]
 8003c6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c6e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003c70:	f7fe fa6c 	bl	800214c <HAL_GetTick>
 8003c74:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c76:	682b      	ldr	r3, [r5, #0]
 8003c78:	0499      	lsls	r1, r3, #18
 8003c7a:	f57f ae9d 	bpl.w	80039b8 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c7e:	f7fe fa65 	bl	800214c <HAL_GetTick>
 8003c82:	1b80      	subs	r0, r0, r6
 8003c84:	2802      	cmp	r0, #2
 8003c86:	d9f6      	bls.n	8003c76 <HAL_RCC_OscConfig+0x33a>
 8003c88:	e6e9      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8a:	f7fe fa5f 	bl	800214c <HAL_GetTick>
 8003c8e:	1b80      	subs	r0, r0, r6
 8003c90:	2864      	cmp	r0, #100	@ 0x64
 8003c92:	f67f ae9c 	bls.w	80039ce <HAL_RCC_OscConfig+0x92>
 8003c96:	e6e2      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c98:	b9b3      	cbnz	r3, 8003cc8 <HAL_RCC_OscConfig+0x38c>
 8003c9a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	672b      	str	r3, [r5, #112]	@ 0x70
 8003ca6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003ca8:	f023 0304 	bic.w	r3, r3, #4
 8003cac:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003cae:	f7fe fa4d 	bl	800214c <HAL_GetTick>
 8003cb2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cb4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003cb6:	0798      	lsls	r0, r3, #30
 8003cb8:	f57f aea0 	bpl.w	80039fc <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbc:	f7fe fa46 	bl	800214c <HAL_GetTick>
 8003cc0:	1b80      	subs	r0, r0, r6
 8003cc2:	42b8      	cmp	r0, r7
 8003cc4:	d9f6      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x378>
 8003cc6:	e6ca      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc8:	2b05      	cmp	r3, #5
 8003cca:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003ccc:	d103      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x39a>
 8003cce:	f043 0304 	orr.w	r3, r3, #4
 8003cd2:	672b      	str	r3, [r5, #112]	@ 0x70
 8003cd4:	e684      	b.n	80039e0 <HAL_RCC_OscConfig+0xa4>
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	672b      	str	r3, [r5, #112]	@ 0x70
 8003cdc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003cde:	f023 0304 	bic.w	r3, r3, #4
 8003ce2:	e680      	b.n	80039e6 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce4:	f7fe fa32 	bl	800214c <HAL_GetTick>
 8003ce8:	1b40      	subs	r0, r0, r5
 8003cea:	42b8      	cmp	r0, r7
 8003cec:	f67f ae82 	bls.w	80039f4 <HAL_RCC_OscConfig+0xb8>
 8003cf0:	e6b5      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003cf2:	4d65      	ldr	r5, [pc, #404]	@ (8003e88 <HAL_RCC_OscConfig+0x54c>)
 8003cf4:	692b      	ldr	r3, [r5, #16]
 8003cf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cfa:	2b18      	cmp	r3, #24
 8003cfc:	d078      	beq.n	8003df0 <HAL_RCC_OscConfig+0x4b4>
        __HAL_RCC_PLL_DISABLE();
 8003cfe:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d00:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8003d02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d06:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d08:	d165      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x49a>
        tickstart = HAL_GetTick();
 8003d0a:	f7fe fa1f 	bl	800214c <HAL_GetTick>
 8003d0e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	0199      	lsls	r1, r3, #6
 8003d14:	d459      	bmi.n	8003dca <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d16:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003d18:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003d1a:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 8003d1e:	f023 0303 	bic.w	r3, r3, #3
 8003d22:	4313      	orrs	r3, r2
 8003d24:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003d26:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003d2a:	62ab      	str	r3, [r5, #40]	@ 0x28
 8003d2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003d2e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003d30:	3b01      	subs	r3, #1
 8003d32:	3a01      	subs	r2, #1
 8003d34:	025b      	lsls	r3, r3, #9
 8003d36:	0412      	lsls	r2, r2, #16
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003d42:	3a01      	subs	r2, #1
 8003d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003d4c:	3a01      	subs	r2, #1
 8003d4e:	0612      	lsls	r2, r2, #24
 8003d50:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003d54:	4313      	orrs	r3, r2
 8003d56:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003d58:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d60:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003d62:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003d64:	f36f 03cf 	bfc	r3, #3, #13
 8003d68:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003d6c:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d6e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003d70:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003d72:	f023 030c 	bic.w	r3, r3, #12
 8003d76:	4313      	orrs	r3, r2
 8003d78:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d7a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003d7c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003d7e:	f023 0302 	bic.w	r3, r3, #2
 8003d82:	4313      	orrs	r3, r2
 8003d84:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d86:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d8c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d8e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d94:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d96:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d9c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d9e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003da6:	682b      	ldr	r3, [r5, #0]
 8003da8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003dae:	f7fe f9cd 	bl	800214c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003db2:	4d35      	ldr	r5, [pc, #212]	@ (8003e88 <HAL_RCC_OscConfig+0x54c>)
        tickstart = HAL_GetTick();
 8003db4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003db6:	682b      	ldr	r3, [r5, #0]
 8003db8:	019a      	lsls	r2, r3, #6
 8003dba:	f53f ae23 	bmi.w	8003a04 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fe f9c5 	bl	800214c <HAL_GetTick>
 8003dc2:	1b00      	subs	r0, r0, r4
 8003dc4:	2802      	cmp	r0, #2
 8003dc6:	d9f6      	bls.n	8003db6 <HAL_RCC_OscConfig+0x47a>
 8003dc8:	e649      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dca:	f7fe f9bf 	bl	800214c <HAL_GetTick>
 8003dce:	1b80      	subs	r0, r0, r6
 8003dd0:	2802      	cmp	r0, #2
 8003dd2:	d99d      	bls.n	8003d10 <HAL_RCC_OscConfig+0x3d4>
 8003dd4:	e643      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8003dd6:	f7fe f9b9 	bl	800214c <HAL_GetTick>
 8003dda:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	019b      	lsls	r3, r3, #6
 8003de0:	f57f ae10 	bpl.w	8003a04 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fe f9b2 	bl	800214c <HAL_GetTick>
 8003de8:	1b00      	subs	r0, r0, r4
 8003dea:	2802      	cmp	r0, #2
 8003dec:	d9f6      	bls.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
 8003dee:	e636      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df0:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003df2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003df4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df6:	f43f ae1a 	beq.w	8003a2e <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfa:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003e00:	4281      	cmp	r1, r0
 8003e02:	f47f ae14 	bne.w	8003a2e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e06:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003e0c:	428a      	cmp	r2, r1
 8003e0e:	f47f ae0e 	bne.w	8003a2e <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e12:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003e14:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8003e18:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e1a:	4291      	cmp	r1, r2
 8003e1c:	f47f ae07 	bne.w	8003a2e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e20:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003e22:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8003e26:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e28:	4291      	cmp	r1, r2
 8003e2a:	f47f ae00 	bne.w	8003a2e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e2e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003e30:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8003e34:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e36:	4291      	cmp	r1, r2
 8003e38:	f47f adf9 	bne.w	8003a2e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e3c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003e3e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003e42:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e44:	4293      	cmp	r3, r2
 8003e46:	f47f adf2 	bne.w	8003a2e <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e4a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e4c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e4e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e52:	429a      	cmp	r2, r3
 8003e54:	f43f add6 	beq.w	8003a04 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e58:	4d0b      	ldr	r5, [pc, #44]	@ (8003e88 <HAL_RCC_OscConfig+0x54c>)
 8003e5a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8003e62:	f7fe f973 	bl	800214c <HAL_GetTick>
 8003e66:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e68:	f7fe f970 	bl	800214c <HAL_GetTick>
 8003e6c:	4286      	cmp	r6, r0
 8003e6e:	d0fb      	beq.n	8003e68 <HAL_RCC_OscConfig+0x52c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e70:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003e72:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003e74:	f36f 03cf 	bfc	r3, #3, #13
 8003e78:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003e7c:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e7e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8003e86:	e5bd      	b.n	8003a04 <HAL_RCC_OscConfig+0xc8>
 8003e88:	58024400 	.word	0x58024400

08003e8c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e8c:	4b49      	ldr	r3, [pc, #292]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x128>)
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003e94:	2a10      	cmp	r2, #16
{
 8003e96:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e98:	f000 8088 	beq.w	8003fac <HAL_RCC_GetSysClockFreq+0x120>
 8003e9c:	2a18      	cmp	r2, #24
 8003e9e:	d00c      	beq.n	8003eba <HAL_RCC_GetSysClockFreq+0x2e>
 8003ea0:	2a00      	cmp	r2, #0
 8003ea2:	f040 8085 	bne.w	8003fb0 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4843      	ldr	r0, [pc, #268]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003eaa:	f012 0f20 	tst.w	r2, #32
 8003eae:	d003      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003eb6:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8003eb8:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003eba:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ebc:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ebe:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 8003ec0:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ec4:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 8003eca:	d0f5      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ecc:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ed0:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ed4:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ed8:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003edc:	4362      	muls	r2, r4
 8003ede:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
        switch (pllsource)
 8003ee2:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ee8:	ee06 2a90 	vmov	s13, r2
 8003eec:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8003ef0:	d04e      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x104>
 8003ef2:	2902      	cmp	r1, #2
 8003ef4:	d03e      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0xe8>
 8003ef6:	2900      	cmp	r1, #0
 8003ef8:	d14a      	bne.n	8003f90 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	0692      	lsls	r2, r2, #26
 8003efe:	d527      	bpl.n	8003f50 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f00:	6819      	ldr	r1, [r3, #0]
 8003f02:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003f04:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f0a:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f10:	ee07 2a90 	vmov	s15, r2
 8003f14:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8003f18:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8003f1c:	ee07 3a10 	vmov	s14, r3
 8003f20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003f24:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003f28:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003f30:	4b20      	ldr	r3, [pc, #128]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x128>)
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003f38:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003f3a:	ee07 3a10 	vmov	s14, r3
 8003f3e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8003f42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003f46:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8003f4a:	ee17 0a90 	vmov	r0, s15
 8003f4e:	e7b3      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f62:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003f66:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8003fbc <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f6a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003f6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 8003f72:	e7dd      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f86:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003f8a:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8003fc0 <HAL_RCC_GetSysClockFreq+0x134>
 8003f8e:	e7ec      	b.n	8003f6a <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003fa6:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8003fc4 <HAL_RCC_GetSysClockFreq+0x138>
 8003faa:	e7de      	b.n	8003f6a <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fac:	4806      	ldr	r0, [pc, #24]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003fae:	e783      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8003fb0:	4806      	ldr	r0, [pc, #24]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x140>)
 8003fb2:	e781      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x2c>
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	03d09000 	.word	0x03d09000
 8003fbc:	4c742400 	.word	0x4c742400
 8003fc0:	4bbebc20 	.word	0x4bbebc20
 8003fc4:	4a742400 	.word	0x4a742400
 8003fc8:	017d7840 	.word	0x017d7840
 8003fcc:	003d0900 	.word	0x003d0900

08003fd0 <HAL_RCC_ClockConfig>:
{
 8003fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	b910      	cbnz	r0, 8003fe0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003fda:	2001      	movs	r0, #1
}
 8003fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe0:	4a88      	ldr	r2, [pc, #544]	@ (8004204 <HAL_RCC_ClockConfig+0x234>)
 8003fe2:	6813      	ldr	r3, [r2, #0]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	428b      	cmp	r3, r1
 8003fea:	f0c0 8093 	bcc.w	8004114 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	075f      	lsls	r7, r3, #29
 8003ff2:	f100 809b 	bmi.w	800412c <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff6:	071e      	lsls	r6, r3, #28
 8003ff8:	d50b      	bpl.n	8004012 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ffa:	4983      	ldr	r1, [pc, #524]	@ (8004208 <HAL_RCC_ClockConfig+0x238>)
 8003ffc:	6960      	ldr	r0, [r4, #20]
 8003ffe:	69ca      	ldr	r2, [r1, #28]
 8004000:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004004:	4290      	cmp	r0, r2
 8004006:	d904      	bls.n	8004012 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004008:	69ca      	ldr	r2, [r1, #28]
 800400a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800400e:	4302      	orrs	r2, r0
 8004010:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004012:	06d8      	lsls	r0, r3, #27
 8004014:	d50b      	bpl.n	800402e <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004016:	497c      	ldr	r1, [pc, #496]	@ (8004208 <HAL_RCC_ClockConfig+0x238>)
 8004018:	69a0      	ldr	r0, [r4, #24]
 800401a:	69ca      	ldr	r2, [r1, #28]
 800401c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004020:	4290      	cmp	r0, r2
 8004022:	d904      	bls.n	800402e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004024:	69ca      	ldr	r2, [r1, #28]
 8004026:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800402a:	4302      	orrs	r2, r0
 800402c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800402e:	0699      	lsls	r1, r3, #26
 8004030:	d50b      	bpl.n	800404a <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004032:	4975      	ldr	r1, [pc, #468]	@ (8004208 <HAL_RCC_ClockConfig+0x238>)
 8004034:	69e0      	ldr	r0, [r4, #28]
 8004036:	6a0a      	ldr	r2, [r1, #32]
 8004038:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800403c:	4290      	cmp	r0, r2
 800403e:	d904      	bls.n	800404a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004040:	6a0a      	ldr	r2, [r1, #32]
 8004042:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004046:	4302      	orrs	r2, r0
 8004048:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800404a:	079a      	lsls	r2, r3, #30
 800404c:	d50b      	bpl.n	8004066 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800404e:	496e      	ldr	r1, [pc, #440]	@ (8004208 <HAL_RCC_ClockConfig+0x238>)
 8004050:	68e0      	ldr	r0, [r4, #12]
 8004052:	698a      	ldr	r2, [r1, #24]
 8004054:	f002 020f 	and.w	r2, r2, #15
 8004058:	4290      	cmp	r0, r2
 800405a:	d904      	bls.n	8004066 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800405c:	698a      	ldr	r2, [r1, #24]
 800405e:	f022 020f 	bic.w	r2, r2, #15
 8004062:	4302      	orrs	r2, r0
 8004064:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004066:	07df      	lsls	r7, r3, #31
 8004068:	d46e      	bmi.n	8004148 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	079e      	lsls	r6, r3, #30
 800406e:	f100 80a1 	bmi.w	80041b4 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004072:	4964      	ldr	r1, [pc, #400]	@ (8004204 <HAL_RCC_ClockConfig+0x234>)
 8004074:	680a      	ldr	r2, [r1, #0]
 8004076:	f002 020f 	and.w	r2, r2, #15
 800407a:	42aa      	cmp	r2, r5
 800407c:	f200 80a8 	bhi.w	80041d0 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004080:	0758      	lsls	r0, r3, #29
 8004082:	f100 80b1 	bmi.w	80041e8 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004086:	0719      	lsls	r1, r3, #28
 8004088:	d50b      	bpl.n	80040a2 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800408a:	495f      	ldr	r1, [pc, #380]	@ (8004208 <HAL_RCC_ClockConfig+0x238>)
 800408c:	6960      	ldr	r0, [r4, #20]
 800408e:	69ca      	ldr	r2, [r1, #28]
 8004090:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004094:	4290      	cmp	r0, r2
 8004096:	d204      	bcs.n	80040a2 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004098:	69ca      	ldr	r2, [r1, #28]
 800409a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800409e:	4302      	orrs	r2, r0
 80040a0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a2:	06da      	lsls	r2, r3, #27
 80040a4:	d50b      	bpl.n	80040be <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040a6:	4958      	ldr	r1, [pc, #352]	@ (8004208 <HAL_RCC_ClockConfig+0x238>)
 80040a8:	69a0      	ldr	r0, [r4, #24]
 80040aa:	69ca      	ldr	r2, [r1, #28]
 80040ac:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80040b0:	4290      	cmp	r0, r2
 80040b2:	d204      	bcs.n	80040be <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040b4:	69ca      	ldr	r2, [r1, #28]
 80040b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040ba:	4302      	orrs	r2, r0
 80040bc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040be:	069b      	lsls	r3, r3, #26
 80040c0:	d50b      	bpl.n	80040da <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040c2:	4a51      	ldr	r2, [pc, #324]	@ (8004208 <HAL_RCC_ClockConfig+0x238>)
 80040c4:	69e1      	ldr	r1, [r4, #28]
 80040c6:	6a13      	ldr	r3, [r2, #32]
 80040c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040cc:	4299      	cmp	r1, r3
 80040ce:	d204      	bcs.n	80040da <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040d0:	6a13      	ldr	r3, [r2, #32]
 80040d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040d6:	430b      	orrs	r3, r1
 80040d8:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040da:	f7ff fed7 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 80040de:	494a      	ldr	r1, [pc, #296]	@ (8004208 <HAL_RCC_ClockConfig+0x238>)
 80040e0:	4a4a      	ldr	r2, [pc, #296]	@ (800420c <HAL_RCC_ClockConfig+0x23c>)
 80040e2:	698b      	ldr	r3, [r1, #24]
 80040e4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80040e8:	5cd3      	ldrb	r3, [r2, r3]
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040f0:	698b      	ldr	r3, [r1, #24]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	5cd3      	ldrb	r3, [r2, r3]
 80040f8:	4a45      	ldr	r2, [pc, #276]	@ (8004210 <HAL_RCC_ClockConfig+0x240>)
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	fa20 f303 	lsr.w	r3, r0, r3
 8004102:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8004104:	4b43      	ldr	r3, [pc, #268]	@ (8004214 <HAL_RCC_ClockConfig+0x244>)
 8004106:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8004108:	4b43      	ldr	r3, [pc, #268]	@ (8004218 <HAL_RCC_ClockConfig+0x248>)
}
 800410a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	f7fd bfbc 	b.w	800208c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004114:	6813      	ldr	r3, [r2, #0]
 8004116:	f023 030f 	bic.w	r3, r3, #15
 800411a:	430b      	orrs	r3, r1
 800411c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411e:	6813      	ldr	r3, [r2, #0]
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	428b      	cmp	r3, r1
 8004126:	f47f af58 	bne.w	8003fda <HAL_RCC_ClockConfig+0xa>
 800412a:	e760      	b.n	8003fee <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800412c:	4936      	ldr	r1, [pc, #216]	@ (8004208 <HAL_RCC_ClockConfig+0x238>)
 800412e:	6920      	ldr	r0, [r4, #16]
 8004130:	698a      	ldr	r2, [r1, #24]
 8004132:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004136:	4290      	cmp	r0, r2
 8004138:	f67f af5d 	bls.w	8003ff6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800413c:	698a      	ldr	r2, [r1, #24]
 800413e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004142:	4302      	orrs	r2, r0
 8004144:	618a      	str	r2, [r1, #24]
 8004146:	e756      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004148:	4b2f      	ldr	r3, [pc, #188]	@ (8004208 <HAL_RCC_ClockConfig+0x238>)
 800414a:	68a1      	ldr	r1, [r4, #8]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 8004152:	430a      	orrs	r2, r1
 8004154:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004156:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004158:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415a:	2902      	cmp	r1, #2
 800415c:	d11d      	bne.n	800419a <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800415e:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004162:	f43f af3a 	beq.w	8003fda <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004166:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004168:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416c:	4f26      	ldr	r7, [pc, #152]	@ (8004208 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800416e:	f022 0207 	bic.w	r2, r2, #7
 8004172:	430a      	orrs	r2, r1
 8004174:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 8004176:	f7fd ffe9 	bl	800214c <HAL_GetTick>
 800417a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	6862      	ldr	r2, [r4, #4]
 8004180:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004184:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004188:	f43f af6f 	beq.w	800406a <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418c:	f7fd ffde 	bl	800214c <HAL_GetTick>
 8004190:	1b80      	subs	r0, r0, r6
 8004192:	4540      	cmp	r0, r8
 8004194:	d9f2      	bls.n	800417c <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8004196:	2003      	movs	r0, #3
 8004198:	e720      	b.n	8003fdc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800419a:	2903      	cmp	r1, #3
 800419c:	d102      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800419e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80041a2:	e7de      	b.n	8004162 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041a4:	2901      	cmp	r1, #1
 80041a6:	d102      	bne.n	80041ae <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041a8:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80041ac:	e7d9      	b.n	8004162 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041ae:	f012 0f04 	tst.w	r2, #4
 80041b2:	e7d6      	b.n	8004162 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041b4:	4914      	ldr	r1, [pc, #80]	@ (8004208 <HAL_RCC_ClockConfig+0x238>)
 80041b6:	68e0      	ldr	r0, [r4, #12]
 80041b8:	698a      	ldr	r2, [r1, #24]
 80041ba:	f002 020f 	and.w	r2, r2, #15
 80041be:	4290      	cmp	r0, r2
 80041c0:	f4bf af57 	bcs.w	8004072 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c4:	698a      	ldr	r2, [r1, #24]
 80041c6:	f022 020f 	bic.w	r2, r2, #15
 80041ca:	4302      	orrs	r2, r0
 80041cc:	618a      	str	r2, [r1, #24]
 80041ce:	e750      	b.n	8004072 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d0:	680a      	ldr	r2, [r1, #0]
 80041d2:	f022 020f 	bic.w	r2, r2, #15
 80041d6:	432a      	orrs	r2, r5
 80041d8:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041da:	680a      	ldr	r2, [r1, #0]
 80041dc:	f002 020f 	and.w	r2, r2, #15
 80041e0:	42aa      	cmp	r2, r5
 80041e2:	f47f aefa 	bne.w	8003fda <HAL_RCC_ClockConfig+0xa>
 80041e6:	e74b      	b.n	8004080 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041e8:	4907      	ldr	r1, [pc, #28]	@ (8004208 <HAL_RCC_ClockConfig+0x238>)
 80041ea:	6920      	ldr	r0, [r4, #16]
 80041ec:	698a      	ldr	r2, [r1, #24]
 80041ee:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80041f2:	4290      	cmp	r0, r2
 80041f4:	f4bf af47 	bcs.w	8004086 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041f8:	698a      	ldr	r2, [r1, #24]
 80041fa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80041fe:	4302      	orrs	r2, r0
 8004200:	618a      	str	r2, [r1, #24]
 8004202:	e740      	b.n	8004086 <HAL_RCC_ClockConfig+0xb6>
 8004204:	52002000 	.word	0x52002000
 8004208:	58024400 	.word	0x58024400
 800420c:	08009c38 	.word	0x08009c38
 8004210:	24000008 	.word	0x24000008
 8004214:	2400000c 	.word	0x2400000c
 8004218:	24000004 	.word	0x24000004

0800421c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800421c:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800421e:	f7ff fe35 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8004222:	4a0b      	ldr	r2, [pc, #44]	@ (8004250 <HAL_RCC_GetHCLKFreq+0x34>)
 8004224:	490b      	ldr	r1, [pc, #44]	@ (8004254 <HAL_RCC_GetHCLKFreq+0x38>)
 8004226:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004228:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800422a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800422e:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004232:	5ccb      	ldrb	r3, [r1, r3]
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800423c:	5c88      	ldrb	r0, [r1, r2]
 800423e:	4a06      	ldr	r2, [pc, #24]	@ (8004258 <HAL_RCC_GetHCLKFreq+0x3c>)
 8004240:	f000 001f 	and.w	r0, r0, #31
 8004244:	fa23 f000 	lsr.w	r0, r3, r0
 8004248:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800424a:	4a04      	ldr	r2, [pc, #16]	@ (800425c <HAL_RCC_GetHCLKFreq+0x40>)
 800424c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800424e:	bd08      	pop	{r3, pc}
 8004250:	58024400 	.word	0x58024400
 8004254:	08009c38 	.word	0x08009c38
 8004258:	24000008 	.word	0x24000008
 800425c:	2400000c 	.word	0x2400000c

08004260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004260:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004262:	f7ff ffdb 	bl	800421c <HAL_RCC_GetHCLKFreq>
 8004266:	4b05      	ldr	r3, [pc, #20]	@ (800427c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004268:	4a05      	ldr	r2, [pc, #20]	@ (8004280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004270:	5cd3      	ldrb	r3, [r2, r3]
 8004272:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004276:	40d8      	lsrs	r0, r3
 8004278:	bd08      	pop	{r3, pc}
 800427a:	bf00      	nop
 800427c:	58024400 	.word	0x58024400
 8004280:	08009c38 	.word	0x08009c38

08004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004286:	4c39      	ldr	r4, [pc, #228]	@ (800436c <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm+0xe8>)
{
 8004288:	4606      	mov	r6, r0
 800428a:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800428c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	2b03      	cmp	r3, #3
 8004294:	d067      	beq.n	8004366 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800429c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429e:	f7fd ff55 	bl	800214c <HAL_GetTick>
 80042a2:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	011a      	lsls	r2, r3, #4
 80042a8:	d449      	bmi.n	800433e <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80042ac:	6832      	ldr	r2, [r6, #0]
 80042ae:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80042b2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80042b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042b8:	68b3      	ldr	r3, [r6, #8]
 80042ba:	68f2      	ldr	r2, [r6, #12]
 80042bc:	3b01      	subs	r3, #1
 80042be:	3a01      	subs	r2, #1
 80042c0:	025b      	lsls	r3, r3, #9
 80042c2:	0412      	lsls	r2, r2, #16
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80042ca:	4313      	orrs	r3, r2
 80042cc:	6872      	ldr	r2, [r6, #4]
 80042ce:	3a01      	subs	r2, #1
 80042d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d4:	4313      	orrs	r3, r2
 80042d6:	6932      	ldr	r2, [r6, #16]
 80042d8:	3a01      	subs	r2, #1
 80042da:	0612      	lsls	r2, r2, #24
 80042dc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80042e0:	4313      	orrs	r3, r2
 80042e2:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80042e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80042e6:	6972      	ldr	r2, [r6, #20]
 80042e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80042ec:	4313      	orrs	r3, r2
 80042ee:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80042f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80042f2:	69b2      	ldr	r2, [r6, #24]
 80042f4:	f023 0320 	bic.w	r3, r3, #32
 80042f8:	4313      	orrs	r3, r2
 80042fa:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80042fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80042fe:	f023 0310 	bic.w	r3, r3, #16
 8004302:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004304:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004306:	69f2      	ldr	r2, [r6, #28]
 8004308:	f36f 03cf 	bfc	r3, #3, #13
 800430c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004310:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004312:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004314:	f043 0310 	orr.w	r3, r3, #16
 8004318:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800431a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800431c:	b9b5      	cbnz	r5, 800434c <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm+0xc8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800431e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004322:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004324:	4c11      	ldr	r4, [pc, #68]	@ (800436c <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm+0xe8>)
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800432c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800432e:	f7fd ff0d 	bl	800214c <HAL_GetTick>
 8004332:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	d50f      	bpl.n	800435a <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm+0xd6>
    }

  }


  return status;
 800433a:	2000      	movs	r0, #0
 800433c:	e005      	b.n	800434a <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800433e:	f7fd ff05 	bl	800214c <HAL_GetTick>
 8004342:	1bc0      	subs	r0, r0, r7
 8004344:	2802      	cmp	r0, #2
 8004346:	d9ad      	bls.n	80042a4 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm+0x20>
        return HAL_TIMEOUT;
 8004348:	2003      	movs	r0, #3
}
 800434a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800434c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800434e:	bf0c      	ite	eq
 8004350:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004354:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8004358:	e7e3      	b.n	8004322 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800435a:	f7fd fef7 	bl	800214c <HAL_GetTick>
 800435e:	1b40      	subs	r0, r0, r5
 8004360:	2802      	cmp	r0, #2
 8004362:	d9e7      	bls.n	8004334 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm+0xb0>
 8004364:	e7f0      	b.n	8004348 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm+0xc4>
    return HAL_ERROR;
 8004366:	2001      	movs	r0, #1
 8004368:	e7ef      	b.n	800434a <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm+0xc6>
 800436a:	bf00      	nop
 800436c:	58024400 	.word	0x58024400

08004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004372:	4c39      	ldr	r4, [pc, #228]	@ (8004458 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm+0xe8>)
{
 8004374:	4606      	mov	r6, r0
 8004376:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004378:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	2b03      	cmp	r3, #3
 8004380:	d067      	beq.n	8004452 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004388:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800438a:	f7fd fedf 	bl	800214c <HAL_GetTick>
 800438e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	009a      	lsls	r2, r3, #2
 8004394:	d449      	bmi.n	800442a <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004396:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004398:	6832      	ldr	r2, [r6, #0]
 800439a:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800439e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80043a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043a4:	68b3      	ldr	r3, [r6, #8]
 80043a6:	68f2      	ldr	r2, [r6, #12]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	3a01      	subs	r2, #1
 80043ac:	025b      	lsls	r3, r3, #9
 80043ae:	0412      	lsls	r2, r2, #16
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80043b6:	4313      	orrs	r3, r2
 80043b8:	6872      	ldr	r2, [r6, #4]
 80043ba:	3a01      	subs	r2, #1
 80043bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c0:	4313      	orrs	r3, r2
 80043c2:	6932      	ldr	r2, [r6, #16]
 80043c4:	3a01      	subs	r2, #1
 80043c6:	0612      	lsls	r2, r2, #24
 80043c8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80043cc:	4313      	orrs	r3, r2
 80043ce:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80043d2:	6972      	ldr	r2, [r6, #20]
 80043d4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80043d8:	4313      	orrs	r3, r2
 80043da:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80043de:	69b2      	ldr	r2, [r6, #24]
 80043e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043e4:	4313      	orrs	r3, r2
 80043e6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80043ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043ee:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043f0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80043f2:	69f2      	ldr	r2, [r6, #28]
 80043f4:	f36f 03cf 	bfc	r3, #3, #13
 80043f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80043fc:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043fe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004404:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004406:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004408:	b9b5      	cbnz	r5, 8004438 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm+0xc8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800440a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800440e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004410:	4c11      	ldr	r4, [pc, #68]	@ (8004458 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm+0xe8>)
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004418:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800441a:	f7fd fe97 	bl	800214c <HAL_GetTick>
 800441e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	d50f      	bpl.n	8004446 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm+0xd6>
    }

  }


  return status;
 8004426:	2000      	movs	r0, #0
 8004428:	e005      	b.n	8004436 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800442a:	f7fd fe8f 	bl	800214c <HAL_GetTick>
 800442e:	1bc0      	subs	r0, r0, r7
 8004430:	2802      	cmp	r0, #2
 8004432:	d9ad      	bls.n	8004390 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm+0x20>
        return HAL_TIMEOUT;
 8004434:	2003      	movs	r0, #3
}
 8004436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8004438:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800443a:	bf0c      	ite	eq
 800443c:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004440:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8004444:	e7e3      	b.n	800440e <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004446:	f7fd fe81 	bl	800214c <HAL_GetTick>
 800444a:	1b40      	subs	r0, r0, r5
 800444c:	2802      	cmp	r0, #2
 800444e:	d9e7      	bls.n	8004420 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm+0xb0>
 8004450:	e7f0      	b.n	8004434 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm+0xc4>
    return HAL_ERROR;
 8004452:	2001      	movs	r0, #1
 8004454:	e7ef      	b.n	8004436 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm+0xc6>
 8004456:	bf00      	nop
 8004458:	58024400 	.word	0x58024400

0800445c <HAL_RCCEx_PeriphCLKConfig>:
{
 800445c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004460:	6803      	ldr	r3, [r0, #0]
{
 8004462:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004464:	0118      	lsls	r0, r3, #4
 8004466:	d51e      	bpl.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004468:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800446a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800446e:	d02b      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004470:	d80f      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8004472:	b1d3      	cbz	r3, 80044aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004474:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004478:	d01d      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800447a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	05d9      	lsls	r1, r3, #23
 8004480:	d551      	bpl.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004482:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004484:	2b04      	cmp	r3, #4
 8004486:	d84d      	bhi.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8004488:	e8df f003 	tbb	[pc, r3]
 800448c:	29463f24 	.word	0x29463f24
 8004490:	29          	.byte	0x29
 8004491:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004492:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004496:	d1f0      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004498:	4a85      	ldr	r2, [pc, #532]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800449a:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800449c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800449e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80044a2:	430b      	orrs	r3, r1
 80044a4:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044a6:	2600      	movs	r6, #0
 80044a8:	e7e8      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044aa:	4a81      	ldr	r2, [pc, #516]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044ac:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80044ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80044b4:	e7f0      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044b6:	2102      	movs	r1, #2
 80044b8:	f105 0008 	add.w	r0, r5, #8
 80044bc:	f7ff fee2 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044c0:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d1da      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x20>
 80044c6:	e7e7      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044c8:	2102      	movs	r1, #2
 80044ca:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80044ce:	f7ff ff4f 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 80044d2:	e7f5      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d4:	4a76      	ldr	r2, [pc, #472]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044d6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80044d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 80044de:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 80044e0:	bb1c      	cbnz	r4, 800452a <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044e2:	4a73      	ldr	r2, [pc, #460]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044e4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80044e6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80044e8:	f023 0307 	bic.w	r3, r3, #7
 80044ec:	430b      	orrs	r3, r1
 80044ee:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80044f0:	682b      	ldr	r3, [r5, #0]
 80044f2:	059a      	lsls	r2, r3, #22
 80044f4:	d528      	bpl.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai23ClockSelection)
 80044f6:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80044f8:	2b80      	cmp	r3, #128	@ 0x80
 80044fa:	d043      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80044fc:	d817      	bhi.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xd2>
 80044fe:	b3a3      	cbz	r3, 800456a <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8004500:	2b40      	cmp	r3, #64	@ 0x40
 8004502:	d038      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8004504:	2601      	movs	r6, #1
 8004506:	4634      	mov	r4, r6
 8004508:	e01e      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xec>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800450a:	2100      	movs	r1, #0
 800450c:	f105 0008 	add.w	r0, r5, #8
 8004510:	f7ff feb8 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004514:	4604      	mov	r4, r0
        break;
 8004516:	e7e3      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004518:	2100      	movs	r1, #0
 800451a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800451e:	f7ff ff27 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 8004522:	e7f7      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004524:	2601      	movs	r6, #1
 8004526:	4634      	mov	r4, r6
 8004528:	e7e2      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
      status = ret;
 800452a:	4626      	mov	r6, r4
 800452c:	e7e0      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai23ClockSelection)
 800452e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004530:	d002      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004536:	d1e5      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if (ret == HAL_OK)
 8004538:	bb54      	cbnz	r4, 8004590 <HAL_RCCEx_PeriphCLKConfig+0x134>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800453a:	4a5d      	ldr	r2, [pc, #372]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800453c:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800453e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004540:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8004544:	430b      	orrs	r3, r1
 8004546:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	055b      	lsls	r3, r3, #21
 800454c:	d531      	bpl.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4AClockSelection)
 800454e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 8004552:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004556:	d049      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004558:	d81c      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800455a:	2b00      	cmp	r3, #0
 800455c:	d039      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x176>
 800455e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004562:	d03c      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004564:	2601      	movs	r6, #1
 8004566:	4634      	mov	r4, r6
 8004568:	e023      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800456a:	4a51      	ldr	r2, [pc, #324]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800456c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800456e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004572:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004574:	e7e0      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004576:	2100      	movs	r1, #0
 8004578:	f105 0008 	add.w	r0, r5, #8
 800457c:	f7ff fe82 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004580:	4604      	mov	r4, r0
        break;
 8004582:	e7d9      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004584:	2100      	movs	r1, #0
 8004586:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800458a:	f7ff fef1 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 800458e:	e7f7      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x124>
      status = ret;
 8004590:	4626      	mov	r6, r4
 8004592:	e7d9      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004594:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004598:	d002      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
 800459a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800459e:	d1e1      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x108>
    if (ret == HAL_OK)
 80045a0:	bb54      	cbnz	r4, 80045f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80045a2:	4a43      	ldr	r2, [pc, #268]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045a4:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 80045a8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80045aa:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 80045ae:	430b      	orrs	r3, r1
 80045b0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80045b2:	682b      	ldr	r3, [r5, #0]
 80045b4:	051f      	lsls	r7, r3, #20
 80045b6:	d530      	bpl.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->Sai4BClockSelection)
 80045b8:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 80045bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045c0:	d045      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80045c2:	d81b      	bhi.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 80045c4:	b3b3      	cbz	r3, 8004634 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80045c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045ca:	d039      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80045cc:	2601      	movs	r6, #1
 80045ce:	4634      	mov	r4, r6
 80045d0:	e023      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d2:	4a37      	ldr	r2, [pc, #220]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045d4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80045d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045da:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80045dc:	e7e0      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045de:	2100      	movs	r1, #0
 80045e0:	f105 0008 	add.w	r0, r5, #8
 80045e4:	f7ff fe4e 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045e8:	4604      	mov	r4, r0
        break;
 80045ea:	e7d9      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045ec:	2100      	movs	r1, #0
 80045ee:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80045f2:	f7ff febd 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 80045f6:	e7f7      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      status = ret;
 80045f8:	4626      	mov	r6, r4
 80045fa:	e7da      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4BClockSelection)
 80045fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004600:	d002      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8004602:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004606:	d1e1      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x170>
    if (ret == HAL_OK)
 8004608:	bb3c      	cbnz	r4, 800465a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800460a:	4a29      	ldr	r2, [pc, #164]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800460c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8004610:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004612:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004616:	430b      	orrs	r3, r1
 8004618:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800461a:	682b      	ldr	r3, [r5, #0]
 800461c:	0198      	lsls	r0, r3, #6
 800461e:	d528      	bpl.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch (PeriphClkInit->QspiClockSelection)
 8004620:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8004622:	2b20      	cmp	r3, #32
 8004624:	d03b      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004626:	d81a      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004628:	b1db      	cbz	r3, 8004662 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800462a:	2b10      	cmp	r3, #16
 800462c:	d031      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800462e:	2601      	movs	r6, #1
 8004630:	4634      	mov	r4, r6
 8004632:	e01e      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x216>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004634:	4a1e      	ldr	r2, [pc, #120]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004636:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800463c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800463e:	e7e3      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004640:	2100      	movs	r1, #0
 8004642:	f105 0008 	add.w	r0, r5, #8
 8004646:	f7ff fe1d 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800464a:	4604      	mov	r4, r0
        break;
 800464c:	e7dc      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800464e:	2100      	movs	r1, #0
 8004650:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004654:	f7ff fe8c 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 8004658:	e7f7      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      status = ret;
 800465a:	4626      	mov	r6, r4
 800465c:	e7dd      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->QspiClockSelection)
 800465e:	2b30      	cmp	r3, #48	@ 0x30
 8004660:	d1e5      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if (ret == HAL_OK)
 8004662:	bb1c      	cbnz	r4, 80046ac <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004664:	4a12      	ldr	r2, [pc, #72]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004666:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8004668:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800466a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800466e:	430b      	orrs	r3, r1
 8004670:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004672:	682b      	ldr	r3, [r5, #0]
 8004674:	04d9      	lsls	r1, r3, #19
 8004676:	d52c      	bpl.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004678:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800467a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800467e:	d074      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8004680:	d818      	bhi.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d064      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468a:	d067      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800468c:	2601      	movs	r6, #1
 800468e:	4634      	mov	r4, r6
 8004690:	e01f      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004692:	4a07      	ldr	r2, [pc, #28]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004694:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800469a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800469c:	e7e1      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800469e:	2102      	movs	r1, #2
 80046a0:	f105 0008 	add.w	r0, r5, #8
 80046a4:	f7ff fdee 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
 80046a8:	4604      	mov	r4, r0
        break;
 80046aa:	e7da      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x206>
      status = ret;
 80046ac:	4626      	mov	r6, r4
 80046ae:	e7e0      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x216>
 80046b0:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 80046b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80046b8:	d002      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80046ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046be:	d1e5      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x230>
    if (ret == HAL_OK)
 80046c0:	2c00      	cmp	r4, #0
 80046c2:	d158      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80046c4:	4a9d      	ldr	r2, [pc, #628]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80046c6:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80046c8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80046ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ce:	430b      	orrs	r3, r1
 80046d0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80046d2:	682b      	ldr	r3, [r5, #0]
 80046d4:	049a      	lsls	r2, r3, #18
 80046d6:	d50b      	bpl.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi45ClockSelection)
 80046d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046de:	d064      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80046e0:	d84b      	bhi.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x31e>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d051      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80046e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ea:	d057      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x340>
 80046ec:	2601      	movs	r6, #1
 80046ee:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80046f0:	682b      	ldr	r3, [r5, #0]
 80046f2:	045b      	lsls	r3, r3, #17
 80046f4:	d50c      	bpl.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    switch (PeriphClkInit->Spi6ClockSelection)
 80046f6:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 80046fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046fe:	d075      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x390>
 8004700:	d85b      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004702:	2b00      	cmp	r3, #0
 8004704:	d061      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800470a:	d068      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x382>
 800470c:	2601      	movs	r6, #1
 800470e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004710:	682b      	ldr	r3, [r5, #0]
 8004712:	041f      	lsls	r7, r3, #16
 8004714:	d511      	bpl.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FdcanClockSelection)
 8004716:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004718:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800471c:	d06e      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800471e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004722:	d071      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d176      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    if (ret == HAL_OK)
 8004728:	2c00      	cmp	r4, #0
 800472a:	d177      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800472c:	4a83      	ldr	r2, [pc, #524]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800472e:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8004730:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004732:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8004736:	430b      	orrs	r3, r1
 8004738:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800473a:	682b      	ldr	r3, [r5, #0]
 800473c:	01d8      	lsls	r0, r3, #7
 800473e:	d57d      	bpl.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    switch (PeriphClkInit->FmcClockSelection)
 8004740:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8004742:	2b03      	cmp	r3, #3
 8004744:	f200 80bf 	bhi.w	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8004748:	e8df f003 	tbb	[pc, r3]
 800474c:	6fb66a6f 	.word	0x6fb66a6f
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004750:	4a7a      	ldr	r2, [pc, #488]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004752:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004758:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800475a:	e7b1      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800475c:	2100      	movs	r1, #0
 800475e:	f105 0008 	add.w	r0, r5, #8
 8004762:	f7ff fd8f 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004766:	4604      	mov	r4, r0
        break;
 8004768:	e7aa      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800476a:	2100      	movs	r1, #0
 800476c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004770:	f7ff fdfe 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 8004774:	e7f7      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      status = ret;
 8004776:	4626      	mov	r6, r4
 8004778:	e7ab      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi45ClockSelection)
 800477a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800477e:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8004782:	d002      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004784:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004788:	d1b0      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x290>
    if (ret == HAL_OK)
 800478a:	b9a4      	cbnz	r4, 80047b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800478c:	4a6b      	ldr	r2, [pc, #428]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800478e:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 8004790:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004792:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004796:	430b      	orrs	r3, r1
 8004798:	6513      	str	r3, [r2, #80]	@ 0x50
 800479a:	e7a9      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800479c:	2101      	movs	r1, #1
 800479e:	f105 0008 	add.w	r0, r5, #8
 80047a2:	f7ff fd6f 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047a6:	4604      	mov	r4, r0
        break;
 80047a8:	e7ef      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x32e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047aa:	2101      	movs	r1, #1
 80047ac:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80047b0:	f7ff fdde 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 80047b4:	e7f7      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      status = ret;
 80047b6:	4626      	mov	r6, r4
 80047b8:	e79a      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi6ClockSelection)
 80047ba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80047be:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80047c2:	d002      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80047c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047c8:	d1a0      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    if (ret == HAL_OK)
 80047ca:	b9ac      	cbnz	r4, 80047f8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80047cc:	4a5b      	ldr	r2, [pc, #364]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80047ce:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 80047d2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80047d4:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 80047d8:	430b      	orrs	r3, r1
 80047da:	6593      	str	r3, [r2, #88]	@ 0x58
 80047dc:	e798      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047de:	2101      	movs	r1, #1
 80047e0:	f105 0008 	add.w	r0, r5, #8
 80047e4:	f7ff fd4e 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047e8:	4604      	mov	r4, r0
        break;
 80047ea:	e7ee      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047ec:	2101      	movs	r1, #1
 80047ee:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80047f2:	f7ff fdbd 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 80047f6:	e7f7      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      status = ret;
 80047f8:	4626      	mov	r6, r4
 80047fa:	e789      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047fc:	4a4f      	ldr	r2, [pc, #316]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80047fe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004804:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004806:	e78f      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004808:	2101      	movs	r1, #1
 800480a:	f105 0008 	add.w	r0, r5, #8
 800480e:	f7ff fd39 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
 8004812:	4604      	mov	r4, r0
        break;
 8004814:	e788      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    switch (PeriphClkInit->FdcanClockSelection)
 8004816:	2601      	movs	r6, #1
 8004818:	4634      	mov	r4, r6
 800481a:	e78e      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      status = ret;
 800481c:	4626      	mov	r6, r4
 800481e:	e78c      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x2de>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004820:	4a46      	ldr	r2, [pc, #280]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004822:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004828:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800482a:	2c00      	cmp	r4, #0
 800482c:	d14e      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x470>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800482e:	4a43      	ldr	r2, [pc, #268]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004830:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8004832:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004834:	f023 0303 	bic.w	r3, r3, #3
 8004838:	430b      	orrs	r3, r1
 800483a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	0259      	lsls	r1, r3, #9
 8004840:	d54e      	bpl.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004842:	4f3f      	ldr	r7, [pc, #252]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800484a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800484c:	f7fd fc7e 	bl	800214c <HAL_GetTick>
 8004850:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	05da      	lsls	r2, r3, #23
 8004856:	d53b      	bpl.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    if (ret == HAL_OK)
 8004858:	2c00      	cmp	r4, #0
 800485a:	d175      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800485c:	4b37      	ldr	r3, [pc, #220]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800485e:	f8d5 00b4 	ldr.w	r0, [r5, #180]	@ 0xb4
 8004862:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004864:	4042      	eors	r2, r0
 8004866:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800486a:	d00b      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x428>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800486c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800486e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004870:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004874:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8004878:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800487a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800487c:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8004880:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8004882:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004884:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004888:	d042      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800488a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800488e:	492b      	ldr	r1, [pc, #172]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004890:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004894:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8004898:	d14b      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 800489a:	6908      	ldr	r0, [r1, #16]
 800489c:	4a29      	ldr	r2, [pc, #164]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800489e:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 80048a2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80048a6:	4302      	orrs	r2, r0
 80048a8:	610a      	str	r2, [r1, #16]
 80048aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ae:	4a23      	ldr	r2, [pc, #140]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80048b0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80048b2:	430b      	orrs	r3, r1
 80048b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80048b6:	e013      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048b8:	2102      	movs	r1, #2
 80048ba:	f105 0008 	add.w	r0, r5, #8
 80048be:	f7ff fce1 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
 80048c2:	4604      	mov	r4, r0
        break;
 80048c4:	e7b1      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch (PeriphClkInit->FmcClockSelection)
 80048c6:	2601      	movs	r6, #1
 80048c8:	4634      	mov	r4, r6
 80048ca:	e7b7      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      status = ret;
 80048cc:	4626      	mov	r6, r4
 80048ce:	e7b5      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d0:	f7fd fc3c 	bl	800214c <HAL_GetTick>
 80048d4:	eba0 0008 	sub.w	r0, r0, r8
 80048d8:	2864      	cmp	r0, #100	@ 0x64
 80048da:	d9ba      	bls.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = HAL_TIMEOUT;
 80048dc:	2603      	movs	r6, #3
 80048de:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	07d8      	lsls	r0, r3, #31
 80048e4:	d509      	bpl.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x49e>
    switch (PeriphClkInit->Usart16ClockSelection)
 80048e6:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d045      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80048ec:	d82e      	bhi.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d032      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d039      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x50e>
 80048f6:	2601      	movs	r6, #1
 80048f8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80048fa:	682b      	ldr	r3, [r5, #0]
 80048fc:	0799      	lsls	r1, r3, #30
 80048fe:	d551      	bpl.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004900:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8004902:	2b05      	cmp	r3, #5
 8004904:	d864      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8004906:	e8df f003 	tbb	[pc, r3]
 800490a:	3f45      	.short	0x3f45
 800490c:	4545455d 	.word	0x4545455d
        tickstart = HAL_GetTick();
 8004910:	f7fd fc1c 	bl	800214c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004914:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 800493c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        tickstart = HAL_GetTick();
 8004918:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491a:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800491e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8004922:	079b      	lsls	r3, r3, #30
 8004924:	d4b1      	bmi.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x42e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004926:	f7fd fc11 	bl	800214c <HAL_GetTick>
 800492a:	1bc0      	subs	r0, r0, r7
 800492c:	4548      	cmp	r0, r9
 800492e:	d9f6      	bls.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004930:	e7d4      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004932:	690a      	ldr	r2, [r1, #16]
 8004934:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8004938:	e7b6      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800493a:	bf00      	nop
 800493c:	58024400 	.word	0x58024400
 8004940:	58024800 	.word	0x58024800
 8004944:	00ffffcf 	.word	0x00ffffcf
      status = ret;
 8004948:	4626      	mov	r6, r4
 800494a:	e7c9      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    switch (PeriphClkInit->Usart16ClockSelection)
 800494c:	f023 0208 	bic.w	r2, r3, #8
 8004950:	2a20      	cmp	r2, #32
 8004952:	d001      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8004954:	2b18      	cmp	r3, #24
 8004956:	d1ce      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
    if (ret == HAL_OK)
 8004958:	b9a4      	cbnz	r4, 8004984 <HAL_RCCEx_PeriphCLKConfig+0x528>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800495a:	4a20      	ldr	r2, [pc, #128]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800495c:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800495e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004960:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004964:	430b      	orrs	r3, r1
 8004966:	6553      	str	r3, [r2, #84]	@ 0x54
 8004968:	e7c7      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x49e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800496a:	2101      	movs	r1, #1
 800496c:	f105 0008 	add.w	r0, r5, #8
 8004970:	f7ff fc88 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004974:	4604      	mov	r4, r0
        break;
 8004976:	e7ef      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004978:	2101      	movs	r1, #1
 800497a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800497e:	f7ff fcf7 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 8004982:	e7f7      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x518>
      status = ret;
 8004984:	4626      	mov	r6, r4
 8004986:	e7b8      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x49e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004988:	2101      	movs	r1, #1
 800498a:	f105 0008 	add.w	r0, r5, #8
 800498e:	f7ff fc79 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004992:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8004994:	b9fc      	cbnz	r4, 80049d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004996:	4a11      	ldr	r2, [pc, #68]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8004998:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 800499a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800499c:	f023 0307 	bic.w	r3, r3, #7
 80049a0:	430b      	orrs	r3, r1
 80049a2:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049a4:	682b      	ldr	r3, [r5, #0]
 80049a6:	075a      	lsls	r2, r3, #29
 80049a8:	d52b      	bpl.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80049aa:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80049ae:	2b05      	cmp	r3, #5
 80049b0:	f200 816e 	bhi.w	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x834>
 80049b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80049b8:	0014001a 	.word	0x0014001a
 80049bc:	001a0166 	.word	0x001a0166
 80049c0:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049c4:	2101      	movs	r1, #1
 80049c6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80049ca:	f7ff fcd1 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 80049ce:	e7e0      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80049d0:	2601      	movs	r6, #1
 80049d2:	4634      	mov	r4, r6
 80049d4:	e7e6      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x548>
      status = ret;
 80049d6:	4626      	mov	r6, r4
 80049d8:	e7e4      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x548>
 80049da:	bf00      	nop
 80049dc:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049e0:	2101      	movs	r1, #1
 80049e2:	f105 0008 	add.w	r0, r5, #8
 80049e6:	f7ff fc4d 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049ea:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 80049ec:	2c00      	cmp	r4, #0
 80049ee:	f040 8152 	bne.w	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049f2:	4aaa      	ldr	r2, [pc, #680]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80049f4:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 80049f8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80049fa:	f023 0307 	bic.w	r3, r3, #7
 80049fe:	430b      	orrs	r3, r1
 8004a00:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a02:	682b      	ldr	r3, [r5, #0]
 8004a04:	069b      	lsls	r3, r3, #26
 8004a06:	d510      	bpl.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004a08:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a10:	f000 8160 	beq.w	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8004a14:	f200 8144 	bhi.w	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 814a 	beq.w	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x856>
 8004a1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a22:	f000 8150 	beq.w	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8004a26:	2601      	movs	r6, #1
 8004a28:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a2a:	682b      	ldr	r3, [r5, #0]
 8004a2c:	065f      	lsls	r7, r3, #25
 8004a2e:	d510      	bpl.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004a30:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8004a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a38:	f000 816e 	beq.w	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004a3c:	f200 8152 	bhi.w	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8158 	beq.w	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8004a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4a:	f000 815e 	beq.w	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8004a4e:	2601      	movs	r6, #1
 8004a50:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a52:	682b      	ldr	r3, [r5, #0]
 8004a54:	0618      	lsls	r0, r3, #24
 8004a56:	d510      	bpl.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004a58:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 8004a5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a60:	f000 817c 	beq.w	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x900>
 8004a64:	f200 8160 	bhi.w	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8166 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8004a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a72:	f000 816c 	beq.w	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8004a76:	2601      	movs	r6, #1
 8004a78:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004a7a:	682b      	ldr	r3, [r5, #0]
 8004a7c:	0719      	lsls	r1, r3, #28
 8004a7e:	d514      	bpl.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x64e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004a80:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8004a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a88:	d107      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x63e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a8a:	2102      	movs	r1, #2
 8004a8c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004a90:	f7ff fc6e 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
        status = HAL_ERROR;
 8004a94:	2800      	cmp	r0, #0
 8004a96:	bf18      	it	ne
 8004a98:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a9a:	4a80      	ldr	r2, [pc, #512]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004a9c:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 8004aa0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004aa2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004aaa:	682b      	ldr	r3, [r5, #0]
 8004aac:	06da      	lsls	r2, r3, #27
 8004aae:	d514      	bpl.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x67e>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004ab0:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004ab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ab8:	d107      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x66e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004aba:	2102      	movs	r1, #2
 8004abc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004ac0:	f7ff fc56 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
        status = HAL_ERROR;
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	bf18      	it	ne
 8004ac8:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004aca:	4a74      	ldr	r2, [pc, #464]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004acc:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 8004ad0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ada:	682b      	ldr	r3, [r5, #0]
 8004adc:	031b      	lsls	r3, r3, #12
 8004ade:	d51b      	bpl.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    switch (PeriphClkInit->AdcClockSelection)
 8004ae0:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8004ae4:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004ae8:	f000 8140 	beq.w	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8004aec:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004af0:	d007      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8004af2:	2900      	cmp	r1, #0
 8004af4:	f040 8140 	bne.w	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x91c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af8:	f105 0008 	add.w	r0, r5, #8
 8004afc:	f7ff fbc2 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b00:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8004b02:	2c00      	cmp	r4, #0
 8004b04:	f040 813b 	bne.w	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b08:	4a64      	ldr	r2, [pc, #400]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b0a:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8004b0e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004b10:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004b14:	430b      	orrs	r3, r1
 8004b16:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	035f      	lsls	r7, r3, #13
 8004b1c:	d50f      	bpl.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch (PeriphClkInit->UsbClockSelection)
 8004b1e:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 8004b22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b26:	f000 813b 	beq.w	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8004b2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b2e:	f000 812d 	beq.w	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x930>
 8004b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b36:	f000 8124 	beq.w	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8004b3a:	2601      	movs	r6, #1
 8004b3c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b3e:	682b      	ldr	r3, [r5, #0]
 8004b40:	03d8      	lsls	r0, r3, #15
 8004b42:	d509      	bpl.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    switch (PeriphClkInit->SdmmcClockSelection)
 8004b44:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 8133 	beq.w	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x956>
 8004b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b50:	f000 813d 	beq.w	8004dce <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004b54:	2601      	movs	r6, #1
 8004b56:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	0099      	lsls	r1, r3, #2
 8004b5c:	d507      	bpl.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x712>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b5e:	2102      	movs	r1, #2
 8004b60:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004b64:	f7ff fc04 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
      status = HAL_ERROR;
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	bf18      	it	ne
 8004b6c:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b6e:	e9d5 3100 	ldrd	r3, r1, [r5]
 8004b72:	039a      	lsls	r2, r3, #14
 8004b74:	f140 8143 	bpl.w	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x9a2>
    switch (PeriphClkInit->RngClockSelection)
 8004b78:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 8004b7c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004b80:	f000 813f 	beq.w	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8004b84:	f200 812c 	bhi.w	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	f000 812f 	beq.w	8004dec <HAL_RCCEx_PeriphCLKConfig+0x990>
 8004b8e:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b90:	02df      	lsls	r7, r3, #11
 8004b92:	d506      	bpl.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x746>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b94:	4841      	ldr	r0, [pc, #260]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b96:	6f6e      	ldr	r6, [r5, #116]	@ 0x74
 8004b98:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004b9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004b9e:	4332      	orrs	r2, r6
 8004ba0:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ba2:	00de      	lsls	r6, r3, #3
 8004ba4:	d507      	bpl.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ba6:	483d      	ldr	r0, [pc, #244]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ba8:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 8004bac:	6902      	ldr	r2, [r0, #16]
 8004bae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004bb2:	4332      	orrs	r2, r6
 8004bb4:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bb6:	0298      	lsls	r0, r3, #10
 8004bb8:	d506      	bpl.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x76c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bba:	4838      	ldr	r0, [pc, #224]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004bbc:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
 8004bbe:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004bc0:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004bc4:	4332      	orrs	r2, r6
 8004bc6:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004bc8:	005a      	lsls	r2, r3, #1
 8004bca:	d509      	bpl.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bcc:	4a33      	ldr	r2, [pc, #204]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004bce:	6910      	ldr	r0, [r2, #16]
 8004bd0:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8004bd4:	6110      	str	r0, [r2, #16]
 8004bd6:	6910      	ldr	r0, [r2, #16]
 8004bd8:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 8004bdc:	4330      	orrs	r0, r6
 8004bde:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	da06      	bge.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004be4:	482d      	ldr	r0, [pc, #180]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004be6:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 8004be8:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8004bea:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004bee:	4332      	orrs	r2, r6
 8004bf0:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bf2:	021f      	lsls	r7, r3, #8
 8004bf4:	d507      	bpl.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bf6:	4a29      	ldr	r2, [pc, #164]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004bf8:	f8d5 008c 	ldr.w	r0, [r5, #140]	@ 0x8c
 8004bfc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004bfe:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004c02:	4303      	orrs	r3, r0
 8004c04:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004c06:	07ce      	lsls	r6, r1, #31
 8004c08:	d506      	bpl.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	f105 0008 	add.w	r0, r5, #8
 8004c10:	f7ff fb38 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
    if (ret == HAL_OK)
 8004c14:	4607      	mov	r7, r0
 8004c16:	b900      	cbnz	r0, 8004c1a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    switch (PeriphClkInit->RngClockSelection)
 8004c18:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c1a:	686b      	ldr	r3, [r5, #4]
 8004c1c:	079c      	lsls	r4, r3, #30
 8004c1e:	d506      	bpl.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c20:	2101      	movs	r1, #1
 8004c22:	f105 0008 	add.w	r0, r5, #8
 8004c26:	f7ff fb2d 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
    if (ret == HAL_OK)
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	b900      	cbnz	r0, 8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    switch (PeriphClkInit->RngClockSelection)
 8004c2e:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c30:	686b      	ldr	r3, [r5, #4]
 8004c32:	0758      	lsls	r0, r3, #29
 8004c34:	d506      	bpl.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c36:	2102      	movs	r1, #2
 8004c38:	f105 0008 	add.w	r0, r5, #8
 8004c3c:	f7ff fb22 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
    if (ret == HAL_OK)
 8004c40:	4604      	mov	r4, r0
 8004c42:	b900      	cbnz	r0, 8004c46 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    switch (PeriphClkInit->RngClockSelection)
 8004c44:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c46:	686b      	ldr	r3, [r5, #4]
 8004c48:	0719      	lsls	r1, r3, #28
 8004c4a:	d506      	bpl.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004c52:	f7ff fb8d 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
    if (ret == HAL_OK)
 8004c56:	4606      	mov	r6, r0
 8004c58:	b900      	cbnz	r0, 8004c5c <HAL_RCCEx_PeriphCLKConfig+0x800>
    switch (PeriphClkInit->RngClockSelection)
 8004c5a:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004c5c:	686b      	ldr	r3, [r5, #4]
 8004c5e:	06da      	lsls	r2, r3, #27
 8004c60:	d506      	bpl.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x814>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c62:	2101      	movs	r1, #1
 8004c64:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004c68:	f7ff fb82 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
    if (ret == HAL_OK)
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	b900      	cbnz	r0, 8004c72 <HAL_RCCEx_PeriphCLKConfig+0x816>
    switch (PeriphClkInit->RngClockSelection)
 8004c70:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004c72:	686b      	ldr	r3, [r5, #4]
 8004c74:	069b      	lsls	r3, r3, #26
 8004c76:	f100 80ca 	bmi.w	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
  if (status == HAL_OK)
 8004c7a:	1e20      	subs	r0, r4, #0
 8004c7c:	bf18      	it	ne
 8004c7e:	2001      	movne	r0, #1
}
 8004c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c84:	2101      	movs	r1, #1
 8004c86:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004c8a:	f7ff fb71 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 8004c8e:	e6ac      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x58e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004c90:	2601      	movs	r6, #1
 8004c92:	4634      	mov	r4, r6
 8004c94:	e6b5      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      status = ret;
 8004c96:	4626      	mov	r6, r4
 8004c98:	e6b3      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004c9a:	bf00      	nop
 8004c9c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004ca0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004ca4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004ca8:	d003      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x856>
 8004caa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004cae:	f47f aeba 	bne.w	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    if (ret == HAL_OK)
 8004cb2:	b9ac      	cbnz	r4, 8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x884>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cb4:	4a5b      	ldr	r2, [pc, #364]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004cb6:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 8004cba:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004cbc:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cc4:	e6b1      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	f105 0008 	add.w	r0, r5, #8
 8004ccc:	f7ff fada 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cd0:	4604      	mov	r4, r0
        break;
 8004cd2:	e7ee      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x856>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cd4:	2102      	movs	r1, #2
 8004cd6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004cda:	f7ff fb49 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 8004cde:	e7f7      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      status = ret;
 8004ce0:	4626      	mov	r6, r4
 8004ce2:	e6a2      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004ce4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ce8:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8004cec:	d003      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8004cee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cf2:	f47f aeac 	bne.w	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    if (ret == HAL_OK)
 8004cf6:	b9ac      	cbnz	r4, 8004d24 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cf8:	4a4a      	ldr	r2, [pc, #296]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004cfa:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 8004cfe:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004d00:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8004d04:	430b      	orrs	r3, r1
 8004d06:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d08:	e6a3      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	f105 0008 	add.w	r0, r5, #8
 8004d10:	f7ff fab8 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d14:	4604      	mov	r4, r0
        break;
 8004d16:	e7ee      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d18:	2102      	movs	r1, #2
 8004d1a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004d1e:	f7ff fb27 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 8004d22:	e7f7      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      status = ret;
 8004d24:	4626      	mov	r6, r4
 8004d26:	e694      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004d28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004d2c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004d30:	d003      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8004d32:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004d36:	f47f ae9e 	bne.w	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 8004d3a:	b9ac      	cbnz	r4, 8004d68 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004d3c:	4a39      	ldr	r2, [pc, #228]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004d3e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 8004d42:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004d44:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d4c:	e695      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d4e:	2100      	movs	r1, #0
 8004d50:	f105 0008 	add.w	r0, r5, #8
 8004d54:	f7ff fa96 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d58:	4604      	mov	r4, r0
        break;
 8004d5a:	e7ee      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x8de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d5c:	2102      	movs	r1, #2
 8004d5e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004d62:	f7ff fb05 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 8004d66:	e7f7      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
      status = ret;
 8004d68:	4626      	mov	r6, r4
 8004d6a:	e686      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d6c:	2102      	movs	r1, #2
 8004d6e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004d72:	f7ff fafd 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 8004d76:	e6c3      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
    switch (PeriphClkInit->AdcClockSelection)
 8004d78:	2601      	movs	r6, #1
 8004d7a:	4634      	mov	r4, r6
 8004d7c:	e6cc      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      status = ret;
 8004d7e:	4626      	mov	r6, r4
 8004d80:	e6ca      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d82:	4a28      	ldr	r2, [pc, #160]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004d84:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004d8c:	b97c      	cbnz	r4, 8004dae <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d8e:	4a25      	ldr	r2, [pc, #148]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004d90:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 8004d94:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004d96:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d9e:	e6ce      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004da0:	2101      	movs	r1, #1
 8004da2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004da6:	f7ff fae3 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
 8004daa:	4604      	mov	r4, r0
        break;
 8004dac:	e7ee      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x930>
      status = ret;
 8004dae:	4626      	mov	r6, r4
 8004db0:	e6c5      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004db4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dba:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004dbc:	b974      	cbnz	r4, 8004ddc <HAL_RCCEx_PeriphCLKConfig+0x980>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004dbe:	4a19      	ldr	r2, [pc, #100]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004dc0:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8004dc2:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dcc:	e6c4      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dce:	2102      	movs	r1, #2
 8004dd0:	f105 0008 	add.w	r0, r5, #8
 8004dd4:	f7ff fa56 	bl	8004284 <_ZL17RCCEx_PLL2_ConfigPK19RCC_PLL2InitTypeDefm>
 8004dd8:	4604      	mov	r4, r0
        break;
 8004dda:	e7ef      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 8004ddc:	4626      	mov	r6, r4
 8004dde:	e6bb      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    switch (PeriphClkInit->RngClockSelection)
 8004de0:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 8004de4:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8004de8:	f47f aed1 	bne.w	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x732>
    if (ret == HAL_OK)
 8004dec:	2c00      	cmp	r4, #0
 8004dee:	f47f aecf 	bne.w	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004df2:	4c0c      	ldr	r4, [pc, #48]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004df4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004df6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004dfa:	4302      	orrs	r2, r0
 8004dfc:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 8004dfe:	4634      	mov	r4, r6
 8004e00:	e6c6      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x734>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e02:	4f08      	ldr	r7, [pc, #32]	@ (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004e04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e06:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004e0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 8004e0c:	e7ee      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x990>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e0e:	2102      	movs	r1, #2
 8004e10:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004e14:	f7ff faac 	bl	8004370 <_ZL17RCCEx_PLL3_ConfigPK19RCC_PLL3InitTypeDefm>
    if (ret == HAL_OK)
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	f43f af2e 	beq.w	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x81e>
  return HAL_ERROR;
 8004e1e:	2001      	movs	r0, #1
 8004e20:	e72e      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8004e22:	bf00      	nop
 8004e24:	58024400 	.word	0x58024400

08004e28 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004e28:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004e2a:	f7ff f9f7 	bl	800421c <HAL_RCC_GetHCLKFreq>
 8004e2e:	4b05      	ldr	r3, [pc, #20]	@ (8004e44 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004e30:	4a05      	ldr	r2, [pc, #20]	@ (8004e48 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004e38:	5cd3      	ldrb	r3, [r2, r3]
 8004e3a:	f003 031f 	and.w	r3, r3, #31
}
 8004e3e:	40d8      	lsrs	r0, r3
 8004e40:	bd08      	pop	{r3, pc}
 8004e42:	bf00      	nop
 8004e44:	58024400 	.word	0x58024400
 8004e48:	08009c38 	.word	0x08009c38

08004e4c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e4c:	494f      	ldr	r1, [pc, #316]	@ (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8004e4e:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e50:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004e52:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e54:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 8004e56:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004e5a:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004e5e:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 8004e60:	f000 8090 	beq.w	8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e64:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004e68:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e6c:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e70:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004e78:	4353      	muls	r3, r2
    switch (pllsource)
 8004e7a:	2c01      	cmp	r4, #1
 8004e7c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e80:	ee06 3a90 	vmov	s13, r3
 8004e84:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8004e88:	d06e      	beq.n	8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 8004e8a:	2c02      	cmp	r4, #2
 8004e8c:	d05e      	beq.n	8004f4c <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8004e8e:	2c00      	cmp	r4, #0
 8004e90:	d16a      	bne.n	8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e92:	680b      	ldr	r3, [r1, #0]
 8004e94:	069b      	lsls	r3, r3, #26
 8004e96:	d547      	bpl.n	8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e98:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e9a:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e9c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8004ea0:	4a3b      	ldr	r2, [pc, #236]	@ (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ea6:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ea8:	ee07 2a90 	vmov	s15, r2
 8004eac:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8004eb0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8004eb4:	ee07 3a10 	vmov	s14, r3
 8004eb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004ebc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004ec0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ec8:	4a30      	ldr	r2, [pc, #192]	@ (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8004eca:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004ecc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004ed0:	ee07 3a10 	vmov	s14, r3
 8004ed4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004ed8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004edc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004ee0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004ee4:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004ee8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004eea:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004eee:	ee07 3a10 	vmov	s14, r3
 8004ef2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004ef6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004efa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004efe:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004f02:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004f06:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004f08:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004f0c:	ee06 3a90 	vmov	s13, r3
 8004f10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004f14:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004f18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004f1c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004f20:	ee17 3a90 	vmov	r3, s15
 8004f24:	6083      	str	r3, [r0, #8]
}
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f28:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8004f2a:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8004f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f3e:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f42:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8004f46:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8004f4a:	e7bd      	b.n	8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f4c:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8004f4e:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8004f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f62:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004f66:	e7ec      	b.n	8004f42 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f68:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8004f6a:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8004f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f7e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004f82:	e7de      	b.n	8004f42 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f84:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f88:	e7cc      	b.n	8004f24 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8004f8a:	bf00      	nop
 8004f8c:	58024400 	.word	0x58024400
 8004f90:	03d09000 	.word	0x03d09000
 8004f94:	4c742400 	.word	0x4c742400
 8004f98:	4bbebc20 	.word	0x4bbebc20
 8004f9c:	4a742400 	.word	0x4a742400

08004fa0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fa0:	494f      	ldr	r1, [pc, #316]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8004fa2:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fa4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004fa6:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004fa8:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 8004faa:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004fae:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004fb2:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 8004fb4:	f000 8090 	beq.w	80050d8 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fb8:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004fbc:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004fc0:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fc4:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004fcc:	4353      	muls	r3, r2
    switch (pllsource)
 8004fce:	2c01      	cmp	r4, #1
 8004fd0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fd4:	ee06 3a90 	vmov	s13, r3
 8004fd8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8004fdc:	d06e      	beq.n	80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 8004fde:	2c02      	cmp	r4, #2
 8004fe0:	d05e      	beq.n	80050a0 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8004fe2:	2c00      	cmp	r4, #0
 8004fe4:	d16a      	bne.n	80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fe6:	680b      	ldr	r3, [r1, #0]
 8004fe8:	069b      	lsls	r3, r3, #26
 8004fea:	d547      	bpl.n	800507c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fec:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ff0:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8004ff4:	4a3b      	ldr	r2, [pc, #236]	@ (80050e4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ffa:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ffc:	ee07 2a90 	vmov	s15, r2
 8005000:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8005004:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005008:	ee07 3a10 	vmov	s14, r3
 800500c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005010:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005014:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005018:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800501c:	4a30      	ldr	r2, [pc, #192]	@ (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800501e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005020:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005024:	ee07 3a10 	vmov	s14, r3
 8005028:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800502c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005030:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005034:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005038:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800503c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800503e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005042:	ee07 3a10 	vmov	s14, r3
 8005046:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800504a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800504e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005052:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005056:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800505a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800505c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005060:	ee06 3a90 	vmov	s13, r3
 8005064:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005068:	ee76 6a86 	vadd.f32	s13, s13, s12
 800506c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005070:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005074:	ee17 3a90 	vmov	r3, s15
 8005078:	6083      	str	r3, [r0, #8]
}
 800507a:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800507c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800507e:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 80050e8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8005082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800508e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005092:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005096:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800509a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800509e:	e7bd      	b.n	800501c <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050a2:	eddf 5a12 	vldr	s11, [pc, #72]	@ 80050ec <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80050a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80050ba:	e7ec      	b.n	8005096 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050bc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050be:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 80050c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80050d6:	e7de      	b.n	8005096 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80050d8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050dc:	e7cc      	b.n	8005078 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 80050de:	bf00      	nop
 80050e0:	58024400 	.word	0x58024400
 80050e4:	03d09000 	.word	0x03d09000
 80050e8:	4c742400 	.word	0x4c742400
 80050ec:	4bbebc20 	.word	0x4bbebc20
 80050f0:	4a742400 	.word	0x4a742400

080050f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050f4:	494f      	ldr	r1, [pc, #316]	@ (8005234 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 80050f6:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050f8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80050fa:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80050fc:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll1m != 0U)
 80050fe:	f416 7f7c 	tst.w	r6, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005102:	f3c6 1305 	ubfx	r3, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005106:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  if (pll1m != 0U)
 8005108:	f000 8090 	beq.w	800522c <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800510c:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005110:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005114:	f005 0201 	and.w	r2, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005118:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800511c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005120:	4353      	muls	r3, r2
    switch (pllsource)
 8005122:	2c01      	cmp	r4, #1
 8005124:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005128:	ee06 3a90 	vmov	s13, r3
 800512c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005130:	d04e      	beq.n	80051d0 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8005132:	2c02      	cmp	r4, #2
 8005134:	d05e      	beq.n	80051f4 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8005136:	2c00      	cmp	r4, #0
 8005138:	d16a      	bne.n	8005210 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800513a:	680b      	ldr	r3, [r1, #0]
 800513c:	069b      	lsls	r3, r3, #26
 800513e:	d567      	bpl.n	8005210 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005140:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005142:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005144:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8005148:	4a3b      	ldr	r2, [pc, #236]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800514a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800514e:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005150:	ee07 2a90 	vmov	s15, r2
 8005154:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8005158:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800515c:	ee07 3a10 	vmov	s14, r3
 8005160:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005164:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005168:	ee37 7a06 	vadd.f32	s14, s14, s12
 800516c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005170:	4a30      	ldr	r2, [pc, #192]	@ (8005234 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8005172:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005174:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005178:	ee07 3a10 	vmov	s14, r3
 800517c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005180:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005184:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005188:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800518c:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005190:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005192:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005196:	ee07 3a10 	vmov	s14, r3
 800519a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800519e:	ee37 7a06 	vadd.f32	s14, s14, s12
 80051a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80051a6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80051aa:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80051ae:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80051b0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80051b4:	ee06 3a90 	vmov	s13, r3
 80051b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80051bc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80051c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80051c4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80051c8:	ee17 3a90 	vmov	r3, s15
 80051cc:	6083      	str	r3, [r0, #8]
}
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051d0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80051d2:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800523c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 80051d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e6:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051ea:	eec5 6a87 	vdiv.f32	s13, s11, s14
 80051ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 80051f2:	e7bd      	b.n	8005170 <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051f4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80051f6:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8005240 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80051fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800520e:	e7ec      	b.n	80051ea <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005210:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8005212:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8005244 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8005216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005226:	ee77 7a86 	vadd.f32	s15, s15, s12
 800522a:	e7de      	b.n	80051ea <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800522c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005230:	e7cc      	b.n	80051cc <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8005232:	bf00      	nop
 8005234:	58024400 	.word	0x58024400
 8005238:	03d09000 	.word	0x03d09000
 800523c:	4a742400 	.word	0x4a742400
 8005240:	4bbebc20 	.word	0x4bbebc20
 8005244:	4c742400 	.word	0x4c742400

08005248 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8005248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800524a:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 800524e:	430b      	orrs	r3, r1
 8005250:	d115      	bne.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x36>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005252:	4b9d      	ldr	r3, [pc, #628]	@ (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005254:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005256:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 800525a:	2a04      	cmp	r2, #4
 800525c:	d82d      	bhi.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800525e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005262:	001c      	.short	0x001c
 8005264:	000500dd 	.word	0x000500dd
 8005268:	00410151 	.word	0x00410151
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005272:	f000 80db 	beq.w	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005276:	a801      	add	r0, sp, #4
 8005278:	f7ff fe92 	bl	8004fa0 <HAL_RCCEx_GetPLL3ClockFreq>
 800527c:	e0d5      	b.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800527e:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8005282:	430b      	orrs	r3, r1
 8005284:	d11b      	bne.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005286:	4b90      	ldr	r3, [pc, #576]	@ (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005288:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800528a:	f402 72e0 	and.w	r2, r2, #448	@ 0x1c0
    switch (saiclocksource)
 800528e:	2a80      	cmp	r2, #128	@ 0x80
 8005290:	d0ec      	beq.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8005292:	d80c      	bhi.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x66>
    switch (srcclk)
 8005294:	2a00      	cmp	r2, #0
 8005296:	f040 80c1 	bne.w	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800529a:	6818      	ldr	r0, [r3, #0]
 800529c:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 80052a0:	f000 80c4 	beq.w	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052a4:	a801      	add	r0, sp, #4
 80052a6:	f7ff ff25 	bl	80050f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052aa:	9802      	ldr	r0, [sp, #8]
 80052ac:	e0be      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
    switch (saiclocksource)
 80052ae:	2ac0      	cmp	r2, #192	@ 0xc0
 80052b0:	f000 8128 	beq.w	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80052b4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
    switch (saiclocksource)
 80052b8:	d014      	beq.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = 0;
 80052ba:	2000      	movs	r0, #0
 80052bc:	e0b6      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80052be:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 80052c2:	430b      	orrs	r3, r1
 80052c4:	d12f      	bne.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80052c6:	4b80      	ldr	r3, [pc, #512]	@ (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80052c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80052ca:	f402 0260 	and.w	r2, r2, #14680064	@ 0xe00000
    switch (saiclocksource)
 80052ce:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 80052d2:	d0cb      	beq.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 80052d4:	d9de      	bls.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 80052d6:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 80052da:	f000 8113 	beq.w	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80052de:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 80052e2:	e7e9      	b.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052e6:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052e8:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052ec:	0748      	lsls	r0, r1, #29
 80052ee:	d500      	bpl.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80052f0:	b172      	cbz	r2, 8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052f2:	4b75      	ldr	r3, [pc, #468]	@ (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80052f4:	6819      	ldr	r1, [r3, #0]
 80052f6:	05c9      	lsls	r1, r1, #23
 80052f8:	d410      	bmi.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005300:	f000 8094 	beq.w	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = 0;
 8005304:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8005308:	4870      	ldr	r0, [pc, #448]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800530a:	bf18      	it	ne
 800530c:	2000      	movne	r0, #0
 800530e:	e08d      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005310:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005312:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005316:	486e      	ldr	r0, [pc, #440]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005318:	40d8      	lsrs	r0, r3
 800531a:	e087      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800531c:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8005320:	d1eb      	bne.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          frequency = CSI_VALUE;
 8005322:	486c      	ldr	r0, [pc, #432]	@ (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005324:	e082      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005326:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 800532a:	430b      	orrs	r3, r1
 800532c:	d11b      	bne.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800532e:	4b66      	ldr	r3, [pc, #408]	@ (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005330:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005332:	f002 62e0 	and.w	r2, r2, #117440512	@ 0x7000000
    switch (saiclocksource)
 8005336:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 800533a:	d097      	beq.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800533c:	d9aa      	bls.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 800533e:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 8005342:	f000 80df 	beq.w	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8005346:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
    switch (srcclk)
 800534a:	d1b6      	bne.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800534c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800534e:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005350:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005354:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005356:	0748      	lsls	r0, r1, #29
 8005358:	d501      	bpl.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 800535a:	2a00      	cmp	r2, #0
 800535c:	d0d9      	beq.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800535e:	05d9      	lsls	r1, r3, #23
 8005360:	d470      	bmi.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005362:	4b59      	ldr	r3, [pc, #356]	@ (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005364:	e7c9      	b.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005366:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 800536a:	430b      	orrs	r3, r1
 800536c:	d10f      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800536e:	4b56      	ldr	r3, [pc, #344]	@ (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005370:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005372:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
    switch (srcclk)
 8005376:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800537a:	f43f af77 	beq.w	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800537e:	d989      	bls.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 8005380:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8005384:	f000 80be 	beq.w	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8005388:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800538c:	e7dd      	b.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x102>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800538e:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8005392:	430b      	orrs	r3, r1
 8005394:	d131      	bne.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005396:	4a4c      	ldr	r2, [pc, #304]	@ (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005398:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800539a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 800539e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80053a2:	f000 8084 	beq.w	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80053a6:	d80c      	bhi.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80053a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ac:	d015      	beq.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x192>
 80053ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053b2:	d01a      	beq.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d180      	bne.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x72>
}
 80053b8:	b005      	add	sp, #20
 80053ba:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 80053be:	f7fe bf4f 	b.w	8004260 <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 80053c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053c6:	d078      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80053c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
    switch (srcclk)
 80053cc:	f47f af75 	bne.w	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80053d0:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 80053d2:	4b3e      	ldr	r3, [pc, #248]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80053d4:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80053d8:	e073      	b.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053da:	6810      	ldr	r0, [r2, #0]
 80053dc:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80053e0:	d024      	beq.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053e2:	a801      	add	r0, sp, #4
 80053e4:	f7ff fd32 	bl	8004e4c <HAL_RCCEx_GetPLL2ClockFreq>
 80053e8:	e75f      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053ea:	6810      	ldr	r0, [r2, #0]
 80053ec:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80053f0:	d01c      	beq.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053f2:	a801      	add	r0, sp, #4
 80053f4:	f7ff fdd4 	bl	8004fa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80053f8:	e757      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80053fa:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 80053fe:	430b      	orrs	r3, r1
 8005400:	d124      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005402:	4b31      	ldr	r3, [pc, #196]	@ (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005404:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005406:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
    switch (srcclk)
 800540a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800540e:	d010      	beq.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005410:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8005414:	d09a      	beq.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005416:	2a00      	cmp	r2, #0
 8005418:	f47f af4f 	bne.w	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005422:	d003      	beq.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005424:	a801      	add	r0, sp, #4
 8005426:	f7ff fd11 	bl	8004e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800542a:	9801      	ldr	r0, [sp, #4]
}
 800542c:	b005      	add	sp, #20
 800542e:	f85d fb04 	ldr.w	pc, [sp], #4
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005438:	d0f8      	beq.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800543a:	a801      	add	r0, sp, #4
 800543c:	f7ff fdb0 	bl	8004fa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005440:	9803      	ldr	r0, [sp, #12]
 8005442:	e7f3      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005444:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8005448:	d18b      	bne.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800544a:	e76a      	b.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800544c:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8005450:	430b      	orrs	r3, r1
 8005452:	d10c      	bne.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x226>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005454:	4b1c      	ldr	r3, [pc, #112]	@ (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005456:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 8005458:	03d2      	lsls	r2, r2, #15
 800545a:	f57f af1e 	bpl.w	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005464:	d0e2      	beq.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005466:	a801      	add	r0, sp, #4
 8005468:	f7ff fcf0 	bl	8004e4c <HAL_RCCEx_GetPLL2ClockFreq>
 800546c:	e7e8      	b.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800546e:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8005472:	430b      	orrs	r3, r1
 8005474:	d130      	bne.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005476:	4a14      	ldr	r2, [pc, #80]	@ (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005478:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800547a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 800547e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005482:	d014      	beq.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8005484:	d80d      	bhi.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005486:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800548a:	d0a6      	beq.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x192>
 800548c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005490:	d0ab      	beq.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8005492:	2b00      	cmp	r3, #0
 8005494:	f47f af11 	bne.w	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x72>
}
 8005498:	b005      	add	sp, #20
 800549a:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800549e:	f7ff bcc3 	b.w	8004e28 <HAL_RCCEx_GetD3PCLK1Freq>
    switch (srcclk)
 80054a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a6:	d008      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80054a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054ac:	e78e      	b.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x184>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054ae:	6810      	ldr	r0, [r2, #0]
 80054b0:	f010 0004 	ands.w	r0, r0, #4
 80054b4:	d0ba      	beq.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054b6:	6813      	ldr	r3, [r2, #0]
 80054b8:	e72b      	b.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80054ba:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 80054bc:	4b05      	ldr	r3, [pc, #20]	@ (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80054be:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
          frequency = HSE_VALUE;
 80054c2:	bf18      	it	ne
 80054c4:	4618      	movne	r0, r3
 80054c6:	e7b1      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
 80054c8:	58024400 	.word	0x58024400
 80054cc:	017d7840 	.word	0x017d7840
 80054d0:	03d09000 	.word	0x03d09000
 80054d4:	003d0900 	.word	0x003d0900
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80054d8:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 80054dc:	4308      	orrs	r0, r1
 80054de:	f47f aeec 	bne.w	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x72>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80054e2:	4a09      	ldr	r2, [pc, #36]	@ (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80054e4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80054e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 80054ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054ee:	d007      	beq.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80054f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054f4:	f43f af71 	beq.w	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x192>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f47f aede 	bne.w	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80054fe:	e767      	b.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005500:	6810      	ldr	r0, [r2, #0]
 8005502:	e6cb      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005504:	4801      	ldr	r0, [pc, #4]	@ (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005506:	e791      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
 8005508:	58024400 	.word	0x58024400
 800550c:	00bb8000 	.word	0x00bb8000

08005510 <_ZL17SPI_CloseTransferP19__SPI_HandleTypeDef>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8005510:	6803      	ldr	r3, [r0, #0]
 8005512:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005514:	699a      	ldr	r2, [r3, #24]
 8005516:	f042 0208 	orr.w	r2, r2, #8
 800551a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	f042 0210 	orr.w	r2, r2, #16
 8005522:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	f022 0201 	bic.w	r2, r2, #1
 800552a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	f422 725b 	bic.w	r2, r2, #876	@ 0x36c
 8005532:	f022 0203 	bic.w	r2, r2, #3
 8005536:	611a      	str	r2, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800553e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005540:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 8005544:	2a04      	cmp	r2, #4
 8005546:	d00b      	beq.n	8005560 <_ZL17SPI_CloseTransferP19__SPI_HandleTypeDef+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005548:	068a      	lsls	r2, r1, #26
 800554a:	d509      	bpl.n	8005560 <_ZL17SPI_CloseTransferP19__SPI_HandleTypeDef+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800554c:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8005550:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005554:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	f042 0220 	orr.w	r2, r2, #32
 800555e:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005560:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 8005564:	2a03      	cmp	r2, #3
 8005566:	d00b      	beq.n	8005580 <_ZL17SPI_CloseTransferP19__SPI_HandleTypeDef+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005568:	064a      	lsls	r2, r1, #25
 800556a:	d509      	bpl.n	8005580 <_ZL17SPI_CloseTransferP19__SPI_HandleTypeDef+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800556c:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8005570:	f042 0204 	orr.w	r2, r2, #4
 8005574:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005578:	699a      	ldr	r2, [r3, #24]
 800557a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800557e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005580:	058a      	lsls	r2, r1, #22
 8005582:	d509      	bpl.n	8005598 <_ZL17SPI_CloseTransferP19__SPI_HandleTypeDef+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005584:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8005588:	f042 0201 	orr.w	r2, r2, #1
 800558c:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005596:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005598:	05ca      	lsls	r2, r1, #23
 800559a:	d509      	bpl.n	80055b0 <_ZL17SPI_CloseTransferP19__SPI_HandleTypeDef+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800559c:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 80055a0:	f042 0208 	orr.w	r2, r2, #8
 80055a4:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055ae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80055b6:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
}
 80055ba:	4770      	bx	lr

080055bc <HAL_SPI_Init>:
{
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 80055be:	4604      	mov	r4, r0
 80055c0:	b908      	cbnz	r0, 80055c6 <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 80055c2:	2001      	movs	r0, #1
}
 80055c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80055c6:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055c8:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80055ca:	494d      	ldr	r1, [pc, #308]	@ (8005700 <HAL_SPI_Init+0x144>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055cc:	6283      	str	r3, [r0, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80055ce:	428a      	cmp	r2, r1
 80055d0:	68c3      	ldr	r3, [r0, #12]
 80055d2:	d009      	beq.n	80055e8 <HAL_SPI_Init+0x2c>
 80055d4:	f5a1 4178 	sub.w	r1, r1, #63488	@ 0xf800
 80055d8:	428a      	cmp	r2, r1
 80055da:	d005      	beq.n	80055e8 <HAL_SPI_Init+0x2c>
 80055dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80055e0:	428a      	cmp	r2, r1
 80055e2:	d001      	beq.n	80055e8 <HAL_SPI_Init+0x2c>
 80055e4:	2b0f      	cmp	r3, #15
 80055e6:	d8ec      	bhi.n	80055c2 <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80055e8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80055ea:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80055ec:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 80055ee:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 80055f0:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80055f4:	4942      	ldr	r1, [pc, #264]	@ (8005700 <HAL_SPI_Init+0x144>)
 80055f6:	428a      	cmp	r2, r1
 80055f8:	d073      	beq.n	80056e2 <HAL_SPI_Init+0x126>
 80055fa:	f5a1 4178 	sub.w	r1, r1, #63488	@ 0xf800
 80055fe:	428a      	cmp	r2, r1
 8005600:	d06f      	beq.n	80056e2 <HAL_SPI_Init+0x126>
 8005602:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005606:	428a      	cmp	r2, r1
 8005608:	d06b      	beq.n	80056e2 <HAL_SPI_Init+0x126>
 800560a:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800560c:	d8d9      	bhi.n	80055c2 <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800560e:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 8005612:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005616:	b923      	cbnz	r3, 8005622 <HAL_SPI_Init+0x66>
    HAL_SPI_MspInit(hspi);
 8005618:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800561a:	f884 2080 	strb.w	r2, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 800561e:	f000 f99f 	bl	8005960 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8005622:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005624:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005626:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005628:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_SPI_DISABLE(hspi);
 800562c:	6813      	ldr	r3, [r2, #0]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800562e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
  __HAL_SPI_DISABLE(hspi);
 8005630:	f023 0301 	bic.w	r3, r3, #1
 8005634:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005636:	6893      	ldr	r3, [r2, #8]
 8005638:	f403 1cf8 	and.w	ip, r3, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800563c:	69a3      	ldr	r3, [r4, #24]
 800563e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005642:	d104      	bne.n	800564e <HAL_SPI_Init+0x92>
 8005644:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8005648:	d14d      	bne.n	80056e6 <HAL_SPI_Init+0x12a>
 800564a:	2e00      	cmp	r6, #0
 800564c:	d050      	beq.n	80056f0 <HAL_SPI_Init+0x134>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800564e:	f411 0080 	ands.w	r0, r1, #4194304	@ 0x400000
 8005652:	68e5      	ldr	r5, [r4, #12]
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005654:	6817      	ldr	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005656:	d050      	beq.n	80056fa <HAL_SPI_Init+0x13e>
 8005658:	2d06      	cmp	r5, #6
 800565a:	d94e      	bls.n	80056fa <HAL_SPI_Init+0x13e>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800565c:	f427 7e80 	bic.w	lr, r7, #256	@ 0x100
 8005660:	6d27      	ldr	r7, [r4, #80]	@ 0x50
 8005662:	ea4e 0707 	orr.w	r7, lr, r7
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005666:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005668:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800566a:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800566c:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800566e:	433d      	orrs	r5, r7
 8005670:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8005672:	433d      	orrs	r5, r7
 8005674:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
 8005676:	433d      	orrs	r5, r7
 8005678:	ea45 050c 	orr.w	r5, r5, ip
 800567c:	6095      	str	r5, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800567e:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8005680:	432b      	orrs	r3, r5
 8005682:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005684:	432b      	orrs	r3, r5
 8005686:	6925      	ldr	r5, [r4, #16]
 8005688:	432b      	orrs	r3, r5
 800568a:	6965      	ldr	r5, [r4, #20]
 800568c:	432b      	orrs	r3, r5
 800568e:	6a25      	ldr	r5, [r4, #32]
 8005690:	432b      	orrs	r3, r5
 8005692:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 8005694:	432b      	orrs	r3, r5
 8005696:	68a5      	ldr	r5, [r4, #8]
 8005698:	432b      	orrs	r3, r5
 800569a:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800569c:	432b      	orrs	r3, r5
 800569e:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 80056a0:	432b      	orrs	r3, r5
 80056a2:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80056a4:	b959      	cbnz	r1, 80056be <HAL_SPI_Init+0x102>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80056a6:	6893      	ldr	r3, [r2, #8]
 80056a8:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80056ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80056b0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80056b2:	6893      	ldr	r3, [r2, #8]
 80056b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80056bc:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056be:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80056c6:	b128      	cbz	r0, 80056d4 <HAL_SPI_Init+0x118>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80056c8:	68d3      	ldr	r3, [r2, #12]
 80056ca:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80056cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056d0:	430b      	orrs	r3, r1
 80056d2:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056d4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80056d6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056d8:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80056dc:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  return HAL_OK;
 80056e0:	e770      	b.n	80055c4 <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80056e2:	2b10      	cmp	r3, #16
 80056e4:	e792      	b.n	800560c <HAL_SPI_Init+0x50>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80056e6:	2900      	cmp	r1, #0
 80056e8:	d1b1      	bne.n	800564e <HAL_SPI_Init+0x92>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80056ea:	f1b6 5f80 	cmp.w	r6, #268435456	@ 0x10000000
 80056ee:	d1ae      	bne.n	800564e <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80056f0:	6810      	ldr	r0, [r2, #0]
 80056f2:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 80056f6:	6010      	str	r0, [r2, #0]
 80056f8:	e7a9      	b.n	800564e <HAL_SPI_Init+0x92>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80056fa:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 80056fe:	e7b2      	b.n	8005666 <HAL_SPI_Init+0xaa>
 8005700:	40013000 	.word	0x40013000

08005704 <HAL_SPI_Transmit>:
{
 8005704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005708:	4604      	mov	r4, r0
 800570a:	461d      	mov	r5, r3
 800570c:	4689      	mov	r9, r1
 800570e:	4690      	mov	r8, r2
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005710:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 8005712:	f7fc fd1b 	bl	800214c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005716:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
  tickstart = HAL_GetTick();
 800571a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800571c:	2b01      	cmp	r3, #1
 800571e:	b2d8      	uxtb	r0, r3
 8005720:	f040 8109 	bne.w	8005936 <HAL_SPI_Transmit+0x232>
  if ((pData == NULL) || (Size == 0UL))
 8005724:	f1b9 0f00 	cmp.w	r9, #0
 8005728:	f000 80b6 	beq.w	8005898 <HAL_SPI_Transmit+0x194>
 800572c:	f1b8 0f00 	cmp.w	r8, #0
 8005730:	f000 80b2 	beq.w	8005898 <HAL_SPI_Transmit+0x194>
  __HAL_LOCK(hspi);
 8005734:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 8005738:	2b01      	cmp	r3, #1
 800573a:	f000 80fc 	beq.w	8005936 <HAL_SPI_Transmit+0x232>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800573e:	2303      	movs	r3, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005740:	68a2      	ldr	r2, [r4, #8]
  __HAL_LOCK(hspi);
 8005742:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005746:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800574a:	f5b2 2fc0 	cmp.w	r2, #393216	@ 0x60000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800574e:	f04f 0300 	mov.w	r3, #0
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005752:	f8c4 905c 	str.w	r9, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005756:	f8a4 8060 	strh.w	r8, [r4, #96]	@ 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800575a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->pRxBuffPtr  = NULL;
 800575e:	6663      	str	r3, [r4, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8005760:	f8a4 8062 	strh.w	r8, [r4, #98]	@ 0x62
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005764:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005768:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800576c:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
    SPI_1LINE_TX(hspi);
 8005770:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005772:	d13f      	bne.n	80057f4 <HAL_SPI_Transmit+0xf0>
    SPI_1LINE_TX(hspi);
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800577a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	f36f 020f 	bfc	r2, #0, #16
 8005782:	ea42 0208 	orr.w	r2, r2, r8
 8005786:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005790:	6862      	ldr	r2, [r4, #4]
 8005792:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8005796:	d103      	bne.n	80057a0 <HAL_SPI_Transmit+0x9c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800579e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80057a0:	68e3      	ldr	r3, [r4, #12]
 80057a2:	2b0f      	cmp	r3, #15
 80057a4:	d83b      	bhi.n	800581e <HAL_SPI_Transmit+0x11a>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057a6:	2b07      	cmp	r3, #7
 80057a8:	f200 808d 	bhi.w	80058c6 <HAL_SPI_Transmit+0x1c2>
    while (hspi->TxXferCount > 0UL)
 80057ac:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80057b0:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d038      	beq.n	800582a <HAL_SPI_Transmit+0x126>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80057b8:	694b      	ldr	r3, [r1, #20]
 80057ba:	0798      	lsls	r0, r3, #30
 80057bc:	f140 80b1 	bpl.w	8005922 <HAL_SPI_Transmit+0x21e>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80057c0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80057c4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d903      	bls.n	80057d4 <HAL_SPI_Transmit+0xd0>
 80057cc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80057ce:	2b40      	cmp	r3, #64	@ 0x40
 80057d0:	f200 8090 	bhi.w	80058f4 <HAL_SPI_Transmit+0x1f0>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80057d4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b01      	cmp	r3, #1
 80057dc:	f200 8095 	bhi.w	800590a <HAL_SPI_Transmit+0x206>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057e0:	7813      	ldrb	r3, [r2, #0]
 80057e2:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80057e6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80057e8:	3301      	adds	r3, #1
 80057ea:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 80057ec:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80057f0:	3b01      	subs	r3, #1
 80057f2:	e086      	b.n	8005902 <HAL_SPI_Transmit+0x1fe>
    SPI_2LINES_TX(hspi);
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80057fa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80057fe:	60da      	str	r2, [r3, #12]
 8005800:	e7bc      	b.n	800577c <HAL_SPI_Transmit+0x78>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005802:	6953      	ldr	r3, [r2, #20]
 8005804:	0798      	lsls	r0, r3, #30
 8005806:	d530      	bpl.n	800586a <HAL_SPI_Transmit+0x166>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005808:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800580a:	f853 1b04 	ldr.w	r1, [r3], #4
 800580e:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005810:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005812:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8005816:	3b01      	subs	r3, #1
 8005818:	b29b      	uxth	r3, r3
 800581a:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 800581e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005822:	6822      	ldr	r2, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1eb      	bne.n	8005802 <HAL_SPI_Transmit+0xfe>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	071b      	lsls	r3, r3, #28
 8005830:	d40c      	bmi.n	800584c <HAL_SPI_Transmit+0x148>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005832:	f7fc fc8b 	bl	800214c <HAL_GetTick>
 8005836:	1b80      	subs	r0, r0, r6
 8005838:	4285      	cmp	r5, r0
 800583a:	d8f6      	bhi.n	800582a <HAL_SPI_Transmit+0x126>
 800583c:	1c6a      	adds	r2, r5, #1
 800583e:	d0f4      	beq.n	800582a <HAL_SPI_Transmit+0x126>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005840:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005844:	f043 0320 	orr.w	r3, r3, #32
 8005848:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  SPI_CloseTransfer(hspi);
 800584c:	4620      	mov	r0, r4
 800584e:	f7ff fe5f 	bl	8005510 <_ZL17SPI_CloseTransferP19__SPI_HandleTypeDef>
  hspi->State = HAL_SPI_STATE_READY;
 8005852:	2301      	movs	r3, #1
 8005854:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_UNLOCK(hspi);
 8005858:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800585a:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  __HAL_UNLOCK(hspi);
 800585e:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005862:	1ac0      	subs	r0, r0, r3
 8005864:	bf18      	it	ne
 8005866:	2001      	movne	r0, #1
 8005868:	e016      	b.n	8005898 <HAL_SPI_Transmit+0x194>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800586a:	f7fc fc6f 	bl	800214c <HAL_GetTick>
 800586e:	1b80      	subs	r0, r0, r6
 8005870:	42a8      	cmp	r0, r5
 8005872:	d3d4      	bcc.n	800581e <HAL_SPI_Transmit+0x11a>
 8005874:	1c69      	adds	r1, r5, #1
 8005876:	d0d2      	beq.n	800581e <HAL_SPI_Transmit+0x11a>
          SPI_CloseTransfer(hspi);
 8005878:	4620      	mov	r0, r4
 800587a:	f7ff fe49 	bl	8005510 <_ZL17SPI_CloseTransferP19__SPI_HandleTypeDef>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800587e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8005882:	2003      	movs	r0, #3
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005888:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800588c:	2301      	movs	r3, #1
 800588e:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 8005892:	2300      	movs	r3, #0
 8005894:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 8005898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800589c:	694b      	ldr	r3, [r1, #20]
 800589e:	079a      	lsls	r2, r3, #30
 80058a0:	d520      	bpl.n	80058e4 <HAL_SPI_Transmit+0x1e0>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80058a2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80058a6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80058a8:	b292      	uxth	r2, r2
 80058aa:	2a01      	cmp	r2, #1
 80058ac:	d901      	bls.n	80058b2 <HAL_SPI_Transmit+0x1ae>
 80058ae:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80058b0:	b982      	cbnz	r2, 80058d4 <HAL_SPI_Transmit+0x1d0>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80058b2:	f833 2b02 	ldrh.w	r2, [r3], #2
 80058b6:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b8:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 80058ba:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80058be:	3b01      	subs	r3, #1
          hspi->TxXferCount -= (uint16_t)2UL;
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 80058c6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80058ca:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e4      	bne.n	800589c <HAL_SPI_Transmit+0x198>
 80058d2:	e7aa      	b.n	800582a <HAL_SPI_Transmit+0x126>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80058d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80058d8:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80058da:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80058dc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80058e0:	3b02      	subs	r3, #2
 80058e2:	e7ed      	b.n	80058c0 <HAL_SPI_Transmit+0x1bc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058e4:	f7fc fc32 	bl	800214c <HAL_GetTick>
 80058e8:	1b80      	subs	r0, r0, r6
 80058ea:	42a8      	cmp	r0, r5
 80058ec:	d3eb      	bcc.n	80058c6 <HAL_SPI_Transmit+0x1c2>
 80058ee:	1c6b      	adds	r3, r5, #1
 80058f0:	d0e9      	beq.n	80058c6 <HAL_SPI_Transmit+0x1c2>
 80058f2:	e7c1      	b.n	8005878 <HAL_SPI_Transmit+0x174>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80058f4:	f852 3b04 	ldr.w	r3, [r2], #4
 80058f8:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)4UL;
 80058fa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80058fe:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005900:	3b04      	subs	r3, #4
          hspi->TxXferCount--;
 8005902:	b29b      	uxth	r3, r3
 8005904:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 8005908:	e750      	b.n	80057ac <HAL_SPI_Transmit+0xa8>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800590a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800590c:	2b00      	cmp	r3, #0
 800590e:	f43f af67 	beq.w	80057e0 <HAL_SPI_Transmit+0xdc>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005912:	f832 3b02 	ldrh.w	r3, [r2], #2
 8005916:	843b      	strh	r3, [r7, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 8005918:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800591c:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800591e:	3b02      	subs	r3, #2
 8005920:	e7ef      	b.n	8005902 <HAL_SPI_Transmit+0x1fe>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005922:	f7fc fc13 	bl	800214c <HAL_GetTick>
 8005926:	1b80      	subs	r0, r0, r6
 8005928:	42a8      	cmp	r0, r5
 800592a:	f4ff af3f 	bcc.w	80057ac <HAL_SPI_Transmit+0xa8>
 800592e:	1c69      	adds	r1, r5, #1
 8005930:	f43f af3c 	beq.w	80057ac <HAL_SPI_Transmit+0xa8>
 8005934:	e7a0      	b.n	8005878 <HAL_SPI_Transmit+0x174>
    return HAL_BUSY;
 8005936:	2002      	movs	r0, #2
 8005938:	e7ae      	b.n	8005898 <HAL_SPI_Transmit+0x194>
	...

0800593c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800593c:	4b07      	ldr	r3, [pc, #28]	@ (800595c <HAL_MspInit+0x20>)
{
 800593e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005940:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8005944:	f042 0202 	orr.w	r2, r2, #2
 8005948:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 800594c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005958:	b002      	add	sp, #8
 800595a:	4770      	bx	lr
 800595c:	58024400 	.word	0x58024400

08005960 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005960:	b510      	push	{r4, lr}
 8005962:	b0b8      	sub	sp, #224	@ 0xe0
 8005964:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005966:	2214      	movs	r2, #20
 8005968:	2100      	movs	r1, #0
 800596a:	a803      	add	r0, sp, #12
 800596c:	f000 f8c8 	bl	8005b00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005970:	22c0      	movs	r2, #192	@ 0xc0
 8005972:	2100      	movs	r1, #0
 8005974:	a808      	add	r0, sp, #32
 8005976:	f000 f8c3 	bl	8005b00 <memset>
  if(hspi->Instance==SPI1)
 800597a:	6822      	ldr	r2, [r4, #0]
 800597c:	4b1a      	ldr	r3, [pc, #104]	@ (80059e8 <HAL_SPI_MspInit+0x88>)
 800597e:	429a      	cmp	r2, r3
 8005980:	d130      	bne.n	80059e4 <HAL_SPI_MspInit+0x84>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8005982:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005986:	2300      	movs	r3, #0
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005988:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800598a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800598e:	f7fe fd65 	bl	800445c <HAL_RCCEx_PeriphCLKConfig>
 8005992:	b108      	cbz	r0, 8005998 <HAL_SPI_MspInit+0x38>
    {
      Error_Handler();
 8005994:	f7fc fb0a 	bl	8001fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005998:	4b14      	ldr	r3, [pc, #80]	@ (80059ec <HAL_SPI_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800599a:	a903      	add	r1, sp, #12
 800599c:	4814      	ldr	r0, [pc, #80]	@ (80059f0 <HAL_SPI_MspInit+0x90>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800599e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80059a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80059a6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80059aa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80059ae:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80059b2:	9201      	str	r2, [sp, #4]
 80059b4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059c2:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	9302      	str	r3, [sp, #8]
 80059ce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d0:	2302      	movs	r3, #2
 80059d2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d6:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059d8:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80059dc:	2305      	movs	r3, #5
 80059de:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059e0:	f7fd fe9a 	bl	8003718 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80059e4:	b038      	add	sp, #224	@ 0xe0
 80059e6:	bd10      	pop	{r4, pc}
 80059e8:	40013000 	.word	0x40013000
 80059ec:	58024400 	.word	0x58024400
 80059f0:	58020000 	.word	0x58020000

080059f4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80059f4:	e7fe      	b.n	80059f4 <NMI_Handler>

080059f6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059f6:	e7fe      	b.n	80059f6 <HardFault_Handler>

080059f8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059f8:	e7fe      	b.n	80059f8 <MemManage_Handler>

080059fa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059fa:	e7fe      	b.n	80059fa <BusFault_Handler>

080059fc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059fc:	e7fe      	b.n	80059fc <UsageFault_Handler>

080059fe <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059fe:	4770      	bx	lr

08005a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8005a00:	4770      	bx	lr

08005a02 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8005a02:	4770      	bx	lr

08005a04 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a04:	f7fc bb96 	b.w	8002134 <HAL_IncTick>

08005a08 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8005a08:	2001      	movs	r0, #1
 8005a0a:	4770      	bx	lr

08005a0c <_kill>:

int _kill(int pid, int sig)
{
 8005a0c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005a0e:	f000 f87f 	bl	8005b10 <__errno>
 8005a12:	2316      	movs	r3, #22
 8005a14:	6003      	str	r3, [r0, #0]
  return -1;
}
 8005a16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a1a:	bd08      	pop	{r3, pc}

08005a1c <_exit>:

void _exit (int status)
{
 8005a1c:	b508      	push	{r3, lr}
  errno = EINVAL;
 8005a1e:	f000 f877 	bl	8005b10 <__errno>
 8005a22:	2316      	movs	r3, #22
 8005a24:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8005a26:	e7fe      	b.n	8005a26 <_exit+0xa>

08005a28 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005a28:	4a25      	ldr	r2, [pc, #148]	@ (8005ac0 <SystemInit+0x98>)
 8005a2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005a2e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a32:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005a36:	4a23      	ldr	r2, [pc, #140]	@ (8005ac4 <SystemInit+0x9c>)
 8005a38:	6813      	ldr	r3, [r2, #0]
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	2b06      	cmp	r3, #6
 8005a40:	d805      	bhi.n	8005a4e <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005a42:	6813      	ldr	r3, [r2, #0]
 8005a44:	f023 030f 	bic.w	r3, r3, #15
 8005a48:	f043 0307 	orr.w	r3, r3, #7
 8005a4c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac8 <SystemInit+0xa0>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005a58:	2200      	movs	r2, #0
 8005a5a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8005acc <SystemInit+0xa4>)
 8005a5e:	6819      	ldr	r1, [r3, #0]
 8005a60:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005a62:	4918      	ldr	r1, [pc, #96]	@ (8005ac4 <SystemInit+0x9c>)
  RCC->CR &= 0xEAF6ED7FU;
 8005a64:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005a66:	680a      	ldr	r2, [r1, #0]
 8005a68:	0712      	lsls	r2, r2, #28
 8005a6a:	d505      	bpl.n	8005a78 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005a6c:	680a      	ldr	r2, [r1, #0]
 8005a6e:	f022 020f 	bic.w	r2, r2, #15
 8005a72:	f042 0207 	orr.w	r2, r2, #7
 8005a76:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005a78:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005a7a:	4915      	ldr	r1, [pc, #84]	@ (8005ad0 <SystemInit+0xa8>)
  RCC->D1CFGR = 0x00000000;
 8005a7c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8005a7e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8005a80:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8005a82:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005a84:	4913      	ldr	r1, [pc, #76]	@ (8005ad4 <SystemInit+0xac>)
 8005a86:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005a88:	4913      	ldr	r1, [pc, #76]	@ (8005ad8 <SystemInit+0xb0>)
 8005a8a:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005a8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005a8e:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005a90:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005a92:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005a94:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005a96:	6819      	ldr	r1, [r3, #0]
 8005a98:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8005a9c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005a9e:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8005adc <SystemInit+0xb4>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f36f 030f 	bfc	r3, #0, #16
 8005aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aac:	d203      	bcs.n	8005ab6 <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005aae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae0 <SystemInit+0xb8>)
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae4 <SystemInit+0xbc>)
 8005ab8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8005abc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005abe:	4770      	bx	lr
 8005ac0:	e000ed00 	.word	0xe000ed00
 8005ac4:	52002000 	.word	0x52002000
 8005ac8:	58024400 	.word	0x58024400
 8005acc:	eaf6ed7f 	.word	0xeaf6ed7f
 8005ad0:	02020200 	.word	0x02020200
 8005ad4:	01ff0000 	.word	0x01ff0000
 8005ad8:	01010280 	.word	0x01010280
 8005adc:	5c001000 	.word	0x5c001000
 8005ae0:	51008000 	.word	0x51008000
 8005ae4:	52004000 	.word	0x52004000

08005ae8 <ExitRun0Mode>:
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8005ae8:	4b04      	ldr	r3, [pc, #16]	@ (8005afc <ExitRun0Mode+0x14>)
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	f042 0202 	orr.w	r2, r2, #2
 8005af0:	60da      	str	r2, [r3, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	0492      	lsls	r2, r2, #18
 8005af6:	d5fc      	bpl.n	8005af2 <ExitRun0Mode+0xa>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	58024800 	.word	0x58024800

08005b00 <memset>:
 8005b00:	4402      	add	r2, r0
 8005b02:	4603      	mov	r3, r0
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d100      	bne.n	8005b0a <memset+0xa>
 8005b08:	4770      	bx	lr
 8005b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b0e:	e7f9      	b.n	8005b04 <memset+0x4>

08005b10 <__errno>:
 8005b10:	4b01      	ldr	r3, [pc, #4]	@ (8005b18 <__errno+0x8>)
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	24000010 	.word	0x24000010

08005b1c <__libc_init_array>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005b54 <__libc_init_array+0x38>)
 8005b20:	4c0d      	ldr	r4, [pc, #52]	@ (8005b58 <__libc_init_array+0x3c>)
 8005b22:	1b64      	subs	r4, r4, r5
 8005b24:	10a4      	asrs	r4, r4, #2
 8005b26:	2600      	movs	r6, #0
 8005b28:	42a6      	cmp	r6, r4
 8005b2a:	d109      	bne.n	8005b40 <__libc_init_array+0x24>
 8005b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005b5c <__libc_init_array+0x40>)
 8005b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005b60 <__libc_init_array+0x44>)
 8005b30:	f000 f872 	bl	8005c18 <_init>
 8005b34:	1b64      	subs	r4, r4, r5
 8005b36:	10a4      	asrs	r4, r4, #2
 8005b38:	2600      	movs	r6, #0
 8005b3a:	42a6      	cmp	r6, r4
 8005b3c:	d105      	bne.n	8005b4a <__libc_init_array+0x2e>
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b44:	4798      	blx	r3
 8005b46:	3601      	adds	r6, #1
 8005b48:	e7ee      	b.n	8005b28 <__libc_init_array+0xc>
 8005b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4e:	4798      	blx	r3
 8005b50:	3601      	adds	r6, #1
 8005b52:	e7f2      	b.n	8005b3a <__libc_init_array+0x1e>
 8005b54:	08009ee4 	.word	0x08009ee4
 8005b58:	08009ee4 	.word	0x08009ee4
 8005b5c:	08009ee4 	.word	0x08009ee4
 8005b60:	08009ee8 	.word	0x08009ee8

08005b64 <abort>:
 8005b64:	b508      	push	{r3, lr}
 8005b66:	2006      	movs	r0, #6
 8005b68:	f000 f82c 	bl	8005bc4 <raise>
 8005b6c:	2001      	movs	r0, #1
 8005b6e:	f7ff ff55 	bl	8005a1c <_exit>

08005b72 <_raise_r>:
 8005b72:	291f      	cmp	r1, #31
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4605      	mov	r5, r0
 8005b78:	460c      	mov	r4, r1
 8005b7a:	d904      	bls.n	8005b86 <_raise_r+0x14>
 8005b7c:	2316      	movs	r3, #22
 8005b7e:	6003      	str	r3, [r0, #0]
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b84:	bd38      	pop	{r3, r4, r5, pc}
 8005b86:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005b88:	b112      	cbz	r2, 8005b90 <_raise_r+0x1e>
 8005b8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b8e:	b94b      	cbnz	r3, 8005ba4 <_raise_r+0x32>
 8005b90:	4628      	mov	r0, r5
 8005b92:	f000 f831 	bl	8005bf8 <_getpid_r>
 8005b96:	4622      	mov	r2, r4
 8005b98:	4601      	mov	r1, r0
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ba0:	f000 b818 	b.w	8005bd4 <_kill_r>
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d00a      	beq.n	8005bbe <_raise_r+0x4c>
 8005ba8:	1c59      	adds	r1, r3, #1
 8005baa:	d103      	bne.n	8005bb4 <_raise_r+0x42>
 8005bac:	2316      	movs	r3, #22
 8005bae:	6003      	str	r3, [r0, #0]
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	e7e7      	b.n	8005b84 <_raise_r+0x12>
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005bba:	4620      	mov	r0, r4
 8005bbc:	4798      	blx	r3
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	e7e0      	b.n	8005b84 <_raise_r+0x12>
	...

08005bc4 <raise>:
 8005bc4:	4b02      	ldr	r3, [pc, #8]	@ (8005bd0 <raise+0xc>)
 8005bc6:	4601      	mov	r1, r0
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	f7ff bfd2 	b.w	8005b72 <_raise_r>
 8005bce:	bf00      	nop
 8005bd0:	24000010 	.word	0x24000010

08005bd4 <_kill_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4d07      	ldr	r5, [pc, #28]	@ (8005bf4 <_kill_r+0x20>)
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4604      	mov	r4, r0
 8005bdc:	4608      	mov	r0, r1
 8005bde:	4611      	mov	r1, r2
 8005be0:	602b      	str	r3, [r5, #0]
 8005be2:	f7ff ff13 	bl	8005a0c <_kill>
 8005be6:	1c43      	adds	r3, r0, #1
 8005be8:	d102      	bne.n	8005bf0 <_kill_r+0x1c>
 8005bea:	682b      	ldr	r3, [r5, #0]
 8005bec:	b103      	cbz	r3, 8005bf0 <_kill_r+0x1c>
 8005bee:	6023      	str	r3, [r4, #0]
 8005bf0:	bd38      	pop	{r3, r4, r5, pc}
 8005bf2:	bf00      	nop
 8005bf4:	240013a8 	.word	0x240013a8

08005bf8 <_getpid_r>:
 8005bf8:	f7ff bf06 	b.w	8005a08 <_getpid>

08005bfc <memcpy>:
 8005bfc:	440a      	add	r2, r1
 8005bfe:	4291      	cmp	r1, r2
 8005c00:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005c04:	d100      	bne.n	8005c08 <memcpy+0xc>
 8005c06:	4770      	bx	lr
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c12:	4291      	cmp	r1, r2
 8005c14:	d1f9      	bne.n	8005c0a <memcpy+0xe>
 8005c16:	bd10      	pop	{r4, pc}

08005c18 <_init>:
 8005c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1a:	bf00      	nop
 8005c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1e:	bc08      	pop	{r3}
 8005c20:	469e      	mov	lr, r3
 8005c22:	4770      	bx	lr

08005c24 <_fini>:
 8005c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c26:	bf00      	nop
 8005c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2a:	bc08      	pop	{r3}
 8005c2c:	469e      	mov	lr, r3
 8005c2e:	4770      	bx	lr
